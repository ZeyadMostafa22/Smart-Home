
Final_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00001f32  00001fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080016c  0080016c  000020d2  2**0
                  ALLOC
  3 .stab         00001b18  00000000  00000000  000020d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fd2  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00004bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00004d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00004f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00006f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009094  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00009234  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  000094f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009da3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
      8a:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <main>:
u8 fantemp = 25;
volatile u16 light = 0;
volatile u16 temp_sensor_reading = 0;

int main()
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62

	GIE_VidEnable();
     cde:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GIE_VidEnable>
	TIMER1_VidInit();
     ce2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TIMER1_VidInit>
	TIMER1_VidServoMotor_Angle(180);
     ce6:	84 eb       	ldi	r24, 0xB4	; 180
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TIMER1_VidServoMotor_Angle>
	PWM_Timer0_Init(0);
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	0e 94 42 0b 	call	0x1684	; 0x1684 <PWM_Timer0_Init>
	ADC_VidInit(ADC_REF_AVCC,clk_64_prescaler);
     cf4:	80 e4       	ldi	r24, 0x40	; 64
     cf6:	63 e0       	ldi	r22, 0x03	; 3
     cf8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <ADC_VidInit>
	UART_VidInit();
     cfc:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <UART_VidInit>
	
	DIO_VidSetPinDirection(ROOM1_PORT, ROOM1_PIN, Output);
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	64 e0       	ldi	r22, 0x04	; 4
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	0e 94 c8 0b 	call	0x1790	; 0x1790 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(ROOM2_PORT, ROOM2_PIN, Output);
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	65 e0       	ldi	r22, 0x05	; 5
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	0e 94 c8 0b 	call	0x1790	; 0x1790 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(ROOM3_PORT, ROOM3_PIN, Output);
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	66 e0       	ldi	r22, 0x06	; 6
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(ROOM4_PORT, ROOM4_PIN, Output);
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	67 e0       	ldi	r22, 0x07	; 7
     d22:	41 e0       	ldi	r20, 0x01	; 1
     d24:	0e 94 c8 0b 	call	0x1790	; 0x1790 <DIO_VidSetPinDirection>

	DIO_VidSetPinValue(ROOM1_PORT, ROOM1_PIN, PinLow);
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	64 e0       	ldi	r22, 0x04	; 4
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(ROOM2_PORT, ROOM2_PIN, PinLow);
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	65 e0       	ldi	r22, 0x05	; 5
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(ROOM3_PORT, ROOM3_PIN, PinLow);
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	66 e0       	ldi	r22, 0x06	; 6
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(ROOM4_PORT, ROOM4_PIN, PinLow);
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	67 e0       	ldi	r22, 0x07	; 7
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>

	DIO_VidSetPinDirection(FAN_PORT, FAN1_PIN, Output);
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	41 e0       	ldi	r20, 0x01	; 1
     d56:	0e 94 c8 0b 	call	0x1790	; 0x1790 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(FAN_PORT, FAN2_PIN, Output);
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	0e 94 c8 0b 	call	0x1790	; 0x1790 <DIO_VidSetPinDirection>

	DIO_VidSetPinValue(FAN_PORT, FAN1_PIN, PinLow);
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(FAN_PORT, FAN2_PIN, PinHigh);
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>

	DIO_VidSetPinDirection(Port_D, DOOR_PIN, Output);
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	65 e0       	ldi	r22, 0x05	; 5
     d7c:	41 e0       	ldi	r20, 0x01	; 1
     d7e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <DIO_VidSetPinDirection>

	

	while (1)
	{
		vFan();
     d82:	0e 94 11 07 	call	0xe22	; 0xe22 <vFan>
		vLDR();
     d86:	0e 94 c6 06 	call	0xd8c	; 0xd8c <vLDR>
     d8a:	fb cf       	rjmp	.-10     	; 0xd82 <main+0xac>

00000d8c <vLDR>:
	}
		
}
void vLDR(void)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	0f 92       	push	r0
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	Global_u8LDRFlag = FALSE;
     d96:	10 92 71 01 	sts	0x0171, r1
	for(u8 Local_u8Counter = 0; Local_u8Counter < 4; Local_u8Counter++)
     d9a:	19 82       	std	Y+1, r1	; 0x01
     d9c:	3b c0       	rjmp	.+118    	; 0xe14 <vLDR+0x88>
	{
		if(Global_u8Rooms[Local_u8Counter] == MANUAL)
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	88 2f       	mov	r24, r24
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	fc 01       	movw	r30, r24
     da6:	e3 59       	subi	r30, 0x93	; 147
     da8:	fe 4f       	sbci	r31, 0xFE	; 254
     daa:	80 81       	ld	r24, Z
     dac:	88 23       	and	r24, r24
     dae:	79 f1       	breq	.+94     	; 0xe0e <vLDR+0x82>
			continue;
		
		if(Global_u8LDRFlag == FALSE)
     db0:	80 91 71 01 	lds	r24, 0x0171
     db4:	88 23       	and	r24, r24
     db6:	51 f4       	brne	.+20     	; 0xdcc <vLDR+0x40>
		{	
			light = ADC_u16ReadChannel(ADC_CHANNEL_0);
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <ADC_u16ReadChannel>
     dbe:	90 93 73 01 	sts	0x0173, r25
     dc2:	80 93 72 01 	sts	0x0172, r24
			Global_u8LDRFlag = TRUE;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	80 93 71 01 	sts	0x0171, r24
		}
		if (light < 512)
     dcc:	80 91 72 01 	lds	r24, 0x0172
     dd0:	90 91 73 01 	lds	r25, 0x0173
     dd4:	22 e0       	ldi	r18, 0x02	; 2
     dd6:	80 30       	cpi	r24, 0x00	; 0
     dd8:	92 07       	cpc	r25, r18
     dda:	48 f4       	brcc	.+18     	; 0xdee <vLDR+0x62>
		{
			DIO_VidSetPinValue(ROOM1_PORT, ROOM1_PIN + Local_u8Counter, PinHigh);
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	98 2f       	mov	r25, r24
     de0:	9c 5f       	subi	r25, 0xFC	; 252
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	69 2f       	mov	r22, r25
     de6:	41 e0       	ldi	r20, 0x01	; 1
     de8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
     dec:	10 c0       	rjmp	.+32     	; 0xe0e <vLDR+0x82>
		}
		else if (light >= 512)
     dee:	80 91 72 01 	lds	r24, 0x0172
     df2:	90 91 73 01 	lds	r25, 0x0173
     df6:	22 e0       	ldi	r18, 0x02	; 2
     df8:	80 30       	cpi	r24, 0x00	; 0
     dfa:	92 07       	cpc	r25, r18
     dfc:	40 f0       	brcs	.+16     	; 0xe0e <vLDR+0x82>
		{
			DIO_VidSetPinValue(ROOM1_PORT, ROOM1_PIN + Local_u8Counter, PinLow);
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	98 2f       	mov	r25, r24
     e02:	9c 5f       	subi	r25, 0xFC	; 252
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	69 2f       	mov	r22, r25
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
		
}
void vLDR(void)
{
	Global_u8LDRFlag = FALSE;
	for(u8 Local_u8Counter = 0; Local_u8Counter < 4; Local_u8Counter++)
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	8f 5f       	subi	r24, 0xFF	; 255
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	84 30       	cpi	r24, 0x04	; 4
     e18:	10 f2       	brcs	.-124    	; 0xd9e <vLDR+0x12>
		else if (light >= 512)
		{
			DIO_VidSetPinValue(ROOM1_PORT, ROOM1_PIN + Local_u8Counter, PinLow);
		}
	}
}
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <vFan>:

void vFan(void)
{
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
	if (MANUAL == fanmode)
     e2a:	80 91 6c 01 	lds	r24, 0x016C
     e2e:	88 23       	and	r24, r24
     e30:	09 f4       	brne	.+2      	; 0xe34 <vFan+0x12>
     e32:	72 c0       	rjmp	.+228    	; 0xf18 <vFan+0xf6>
		return;

	temp_sensor_reading = round(ADC_u16ReadChannel(ADC_CHANNEL_1) * 0.488);
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <ADC_u16ReadChannel>
     e3a:	cc 01       	movw	r24, r24
     e3c:	a0 e0       	ldi	r26, 0x00	; 0
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	bc 01       	movw	r22, r24
     e42:	cd 01       	movw	r24, r26
     e44:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	bc 01       	movw	r22, r24
     e4e:	cd 01       	movw	r24, r26
     e50:	23 e2       	ldi	r18, 0x23	; 35
     e52:	3b ed       	ldi	r19, 0xDB	; 219
     e54:	49 ef       	ldi	r20, 0xF9	; 249
     e56:	5e e3       	ldi	r21, 0x3E	; 62
     e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	bc 01       	movw	r22, r24
     e62:	cd 01       	movw	r24, r26
     e64:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <round>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	bc 01       	movw	r22, r24
     e6e:	cd 01       	movw	r24, r26
     e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	90 93 75 01 	sts	0x0175, r25
     e7c:	80 93 74 01 	sts	0x0174, r24

	if (temp_sensor_reading >= (fantemp - 5) && temp_sensor_reading < fantemp)
     e80:	80 91 6b 01 	lds	r24, 0x016B
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	05 97       	sbiw	r24, 0x05	; 5
     e8a:	9c 01       	movw	r18, r24
     e8c:	80 91 74 01 	lds	r24, 0x0174
     e90:	90 91 75 01 	lds	r25, 0x0175
     e94:	82 17       	cp	r24, r18
     e96:	93 07       	cpc	r25, r19
     e98:	78 f0       	brcs	.+30     	; 0xeb8 <vFan+0x96>
     e9a:	80 91 6b 01 	lds	r24, 0x016B
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	80 91 74 01 	lds	r24, 0x0174
     ea6:	90 91 75 01 	lds	r25, 0x0175
     eaa:	82 17       	cp	r24, r18
     eac:	93 07       	cpc	r25, r19
     eae:	20 f4       	brcc	.+8      	; 0xeb8 <vFan+0x96>
	{
		set_dutycycle(50);
     eb0:	82 e3       	ldi	r24, 0x32	; 50
     eb2:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <set_dutycycle>
     eb6:	30 c0       	rjmp	.+96     	; 0xf18 <vFan+0xf6>
	}
	else if (temp_sensor_reading >= fantemp && temp_sensor_reading < (fantemp + 5))
     eb8:	80 91 6b 01 	lds	r24, 0x016B
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	80 91 74 01 	lds	r24, 0x0174
     ec4:	90 91 75 01 	lds	r25, 0x0175
     ec8:	82 17       	cp	r24, r18
     eca:	93 07       	cpc	r25, r19
     ecc:	88 f0       	brcs	.+34     	; 0xef0 <vFan+0xce>
     ece:	80 91 6b 01 	lds	r24, 0x016B
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	05 96       	adiw	r24, 0x05	; 5
     ed8:	9c 01       	movw	r18, r24
     eda:	80 91 74 01 	lds	r24, 0x0174
     ede:	90 91 75 01 	lds	r25, 0x0175
     ee2:	82 17       	cp	r24, r18
     ee4:	93 07       	cpc	r25, r19
     ee6:	20 f4       	brcc	.+8      	; 0xef0 <vFan+0xce>
	{
		set_dutycycle(150);
     ee8:	86 e9       	ldi	r24, 0x96	; 150
     eea:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <set_dutycycle>
     eee:	14 c0       	rjmp	.+40     	; 0xf18 <vFan+0xf6>
	}
	else if (temp_sensor_reading >= (fantemp + 5))
     ef0:	80 91 6b 01 	lds	r24, 0x016B
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	05 96       	adiw	r24, 0x05	; 5
     efa:	9c 01       	movw	r18, r24
     efc:	80 91 74 01 	lds	r24, 0x0174
     f00:	90 91 75 01 	lds	r25, 0x0175
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	20 f0       	brcs	.+8      	; 0xf12 <vFan+0xf0>
	{
		set_dutycycle(255);
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <set_dutycycle>
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <vFan+0xf6>
	}
	else
	{
		set_dutycycle(0);
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <set_dutycycle>
	}

}
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <__vector_13>:

ISR(UART_RXC_VECT)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	60 97       	sbiw	r28, 0x10	; 16
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	cd bf       	out	0x3d, r28	; 61
	switch (UDR)
     f4e:	ec e2       	ldi	r30, 0x2C	; 44
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	38 8b       	std	Y+16, r19	; 0x10
     f5a:	2f 87       	std	Y+15, r18	; 0x0f
     f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5e:	98 89       	ldd	r25, Y+16	; 0x10
     f60:	8f 31       	cpi	r24, 0x1F	; 31
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <__vector_13+0x4a>
     f66:	18 c1       	rjmp	.+560    	; 0x1198 <__vector_13+0x27a>
     f68:	2f 85       	ldd	r18, Y+15	; 0x0f
     f6a:	38 89       	ldd	r19, Y+16	; 0x10
     f6c:	20 32       	cpi	r18, 0x20	; 32
     f6e:	31 05       	cpc	r19, r1
     f70:	0c f0       	brlt	.+2      	; 0xf74 <__vector_13+0x56>
     f72:	5b c0       	rjmp	.+182    	; 0x102a <__vector_13+0x10c>
     f74:	8f 85       	ldd	r24, Y+15	; 0x0f
     f76:	98 89       	ldd	r25, Y+16	; 0x10
     f78:	80 31       	cpi	r24, 0x10	; 16
     f7a:	91 05       	cpc	r25, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <__vector_13+0x62>
     f7e:	71 c1       	rjmp	.+738    	; 0x1262 <__vector_13+0x344>
     f80:	2f 85       	ldd	r18, Y+15	; 0x0f
     f82:	38 89       	ldd	r19, Y+16	; 0x10
     f84:	21 31       	cpi	r18, 0x11	; 17
     f86:	31 05       	cpc	r19, r1
     f88:	2c f5       	brge	.+74     	; 0xfd4 <__vector_13+0xb6>
     f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8c:	98 89       	ldd	r25, Y+16	; 0x10
     f8e:	8d 30       	cpi	r24, 0x0D	; 13
     f90:	91 05       	cpc	r25, r1
     f92:	09 f4       	brne	.+2      	; 0xf96 <__vector_13+0x78>
     f94:	bb c0       	rjmp	.+374    	; 0x110c <__vector_13+0x1ee>
     f96:	2f 85       	ldd	r18, Y+15	; 0x0f
     f98:	38 89       	ldd	r19, Y+16	; 0x10
     f9a:	2e 30       	cpi	r18, 0x0E	; 14
     f9c:	31 05       	cpc	r19, r1
     f9e:	6c f4       	brge	.+26     	; 0xfba <__vector_13+0x9c>
     fa0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa2:	98 89       	ldd	r25, Y+16	; 0x10
     fa4:	8b 30       	cpi	r24, 0x0B	; 11
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <__vector_13+0x8e>
     faa:	9a c0       	rjmp	.+308    	; 0x10e0 <__vector_13+0x1c2>
     fac:	2f 85       	ldd	r18, Y+15	; 0x0f
     fae:	38 89       	ldd	r19, Y+16	; 0x10
     fb0:	2c 30       	cpi	r18, 0x0C	; 12
     fb2:	31 05       	cpc	r19, r1
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <__vector_13+0x9a>
     fb6:	9f c0       	rjmp	.+318    	; 0x10f6 <__vector_13+0x1d8>
     fb8:	dd c1       	rjmp	.+954    	; 0x1374 <__vector_13+0x456>
     fba:	8f 85       	ldd	r24, Y+15	; 0x0f
     fbc:	98 89       	ldd	r25, Y+16	; 0x10
     fbe:	8e 30       	cpi	r24, 0x0E	; 14
     fc0:	91 05       	cpc	r25, r1
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <__vector_13+0xa8>
     fc4:	ae c0       	rjmp	.+348    	; 0x1122 <__vector_13+0x204>
     fc6:	2f 85       	ldd	r18, Y+15	; 0x0f
     fc8:	38 89       	ldd	r19, Y+16	; 0x10
     fca:	2f 30       	cpi	r18, 0x0F	; 15
     fcc:	31 05       	cpc	r19, r1
     fce:	09 f4       	brne	.+2      	; 0xfd2 <__vector_13+0xb4>
     fd0:	13 c1       	rjmp	.+550    	; 0x11f8 <__vector_13+0x2da>
     fd2:	d0 c1       	rjmp	.+928    	; 0x1374 <__vector_13+0x456>
     fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd6:	98 89       	ldd	r25, Y+16	; 0x10
     fd8:	87 31       	cpi	r24, 0x17	; 23
     fda:	91 05       	cpc	r25, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <__vector_13+0xc2>
     fde:	cc c0       	rjmp	.+408    	; 0x1178 <__vector_13+0x25a>
     fe0:	2f 85       	ldd	r18, Y+15	; 0x0f
     fe2:	38 89       	ldd	r19, Y+16	; 0x10
     fe4:	28 31       	cpi	r18, 0x18	; 24
     fe6:	31 05       	cpc	r19, r1
     fe8:	6c f4       	brge	.+26     	; 0x1004 <__vector_13+0xe6>
     fea:	8f 85       	ldd	r24, Y+15	; 0x0f
     fec:	98 89       	ldd	r25, Y+16	; 0x10
     fee:	85 31       	cpi	r24, 0x15	; 21
     ff0:	91 05       	cpc	r25, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <__vector_13+0xd8>
     ff4:	b1 c0       	rjmp	.+354    	; 0x1158 <__vector_13+0x23a>
     ff6:	2f 85       	ldd	r18, Y+15	; 0x0f
     ff8:	38 89       	ldd	r19, Y+16	; 0x10
     ffa:	26 31       	cpi	r18, 0x16	; 22
     ffc:	31 05       	cpc	r19, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <__vector_13+0xe4>
    1000:	b3 c0       	rjmp	.+358    	; 0x1168 <__vector_13+0x24a>
    1002:	b8 c1       	rjmp	.+880    	; 0x1374 <__vector_13+0x456>
    1004:	8f 85       	ldd	r24, Y+15	; 0x0f
    1006:	98 89       	ldd	r25, Y+16	; 0x10
    1008:	89 31       	cpi	r24, 0x19	; 25
    100a:	91 05       	cpc	r25, r1
    100c:	09 f4       	brne	.+2      	; 0x1010 <__vector_13+0xf2>
    100e:	e8 c0       	rjmp	.+464    	; 0x11e0 <__vector_13+0x2c2>
    1010:	2f 85       	ldd	r18, Y+15	; 0x0f
    1012:	38 89       	ldd	r19, Y+16	; 0x10
    1014:	29 31       	cpi	r18, 0x19	; 25
    1016:	31 05       	cpc	r19, r1
    1018:	0c f4       	brge	.+2      	; 0x101c <__vector_13+0xfe>
    101a:	b6 c0       	rjmp	.+364    	; 0x1188 <__vector_13+0x26a>
    101c:	8f 85       	ldd	r24, Y+15	; 0x0f
    101e:	98 89       	ldd	r25, Y+16	; 0x10
    1020:	8a 31       	cpi	r24, 0x1A	; 26
    1022:	91 05       	cpc	r25, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <__vector_13+0x10a>
    1026:	0d c1       	rjmp	.+538    	; 0x1242 <__vector_13+0x324>
    1028:	a5 c1       	rjmp	.+842    	; 0x1374 <__vector_13+0x456>
    102a:	2f 85       	ldd	r18, Y+15	; 0x0f
    102c:	38 89       	ldd	r19, Y+16	; 0x10
    102e:	29 32       	cpi	r18, 0x29	; 41
    1030:	31 05       	cpc	r19, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <__vector_13+0x118>
    1034:	81 c0       	rjmp	.+258    	; 0x1138 <__vector_13+0x21a>
    1036:	8f 85       	ldd	r24, Y+15	; 0x0f
    1038:	98 89       	ldd	r25, Y+16	; 0x10
    103a:	8a 32       	cpi	r24, 0x2A	; 42
    103c:	91 05       	cpc	r25, r1
    103e:	2c f5       	brge	.+74     	; 0x108a <__vector_13+0x16c>
    1040:	2f 85       	ldd	r18, Y+15	; 0x0f
    1042:	38 89       	ldd	r19, Y+16	; 0x10
    1044:	22 32       	cpi	r18, 0x22	; 34
    1046:	31 05       	cpc	r19, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <__vector_13+0x12e>
    104a:	be c0       	rjmp	.+380    	; 0x11c8 <__vector_13+0x2aa>
    104c:	8f 85       	ldd	r24, Y+15	; 0x0f
    104e:	98 89       	ldd	r25, Y+16	; 0x10
    1050:	83 32       	cpi	r24, 0x23	; 35
    1052:	91 05       	cpc	r25, r1
    1054:	6c f4       	brge	.+26     	; 0x1070 <__vector_13+0x152>
    1056:	2f 85       	ldd	r18, Y+15	; 0x0f
    1058:	38 89       	ldd	r19, Y+16	; 0x10
    105a:	20 32       	cpi	r18, 0x20	; 32
    105c:	31 05       	cpc	r19, r1
    105e:	09 f4       	brne	.+2      	; 0x1062 <__vector_13+0x144>
    1060:	a3 c0       	rjmp	.+326    	; 0x11a8 <__vector_13+0x28a>
    1062:	8f 85       	ldd	r24, Y+15	; 0x0f
    1064:	98 89       	ldd	r25, Y+16	; 0x10
    1066:	81 32       	cpi	r24, 0x21	; 33
    1068:	91 05       	cpc	r25, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <__vector_13+0x150>
    106c:	a5 c0       	rjmp	.+330    	; 0x11b8 <__vector_13+0x29a>
    106e:	82 c1       	rjmp	.+772    	; 0x1374 <__vector_13+0x456>
    1070:	2f 85       	ldd	r18, Y+15	; 0x0f
    1072:	38 89       	ldd	r19, Y+16	; 0x10
    1074:	23 32       	cpi	r18, 0x23	; 35
    1076:	31 05       	cpc	r19, r1
    1078:	09 f4       	brne	.+2      	; 0x107c <__vector_13+0x15e>
    107a:	b8 c0       	rjmp	.+368    	; 0x11ec <__vector_13+0x2ce>
    107c:	8f 85       	ldd	r24, Y+15	; 0x0f
    107e:	98 89       	ldd	r25, Y+16	; 0x10
    1080:	84 32       	cpi	r24, 0x24	; 36
    1082:	91 05       	cpc	r25, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <__vector_13+0x16a>
    1086:	e5 c0       	rjmp	.+458    	; 0x1252 <__vector_13+0x334>
    1088:	75 c1       	rjmp	.+746    	; 0x1374 <__vector_13+0x456>
    108a:	2f 85       	ldd	r18, Y+15	; 0x0f
    108c:	38 89       	ldd	r19, Y+16	; 0x10
    108e:	2c 32       	cpi	r18, 0x2C	; 44
    1090:	31 05       	cpc	r19, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <__vector_13+0x178>
    1094:	5d c0       	rjmp	.+186    	; 0x1150 <__vector_13+0x232>
    1096:	8f 85       	ldd	r24, Y+15	; 0x0f
    1098:	98 89       	ldd	r25, Y+16	; 0x10
    109a:	8d 32       	cpi	r24, 0x2D	; 45
    109c:	91 05       	cpc	r25, r1
    109e:	6c f4       	brge	.+26     	; 0x10ba <__vector_13+0x19c>
    10a0:	2f 85       	ldd	r18, Y+15	; 0x0f
    10a2:	38 89       	ldd	r19, Y+16	; 0x10
    10a4:	2a 32       	cpi	r18, 0x2A	; 42
    10a6:	31 05       	cpc	r19, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <__vector_13+0x18e>
    10aa:	4a c0       	rjmp	.+148    	; 0x1140 <__vector_13+0x222>
    10ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ae:	98 89       	ldd	r25, Y+16	; 0x10
    10b0:	8b 32       	cpi	r24, 0x2B	; 43
    10b2:	91 05       	cpc	r25, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <__vector_13+0x19a>
    10b6:	48 c0       	rjmp	.+144    	; 0x1148 <__vector_13+0x22a>
    10b8:	5d c1       	rjmp	.+698    	; 0x1374 <__vector_13+0x456>
    10ba:	2f 85       	ldd	r18, Y+15	; 0x0f
    10bc:	38 89       	ldd	r19, Y+16	; 0x10
    10be:	2e 32       	cpi	r18, 0x2E	; 46
    10c0:	31 05       	cpc	r19, r1
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <__vector_13+0x1a8>
    10c4:	d7 c0       	rjmp	.+430    	; 0x1274 <__vector_13+0x356>
    10c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c8:	98 89       	ldd	r25, Y+16	; 0x10
    10ca:	8e 32       	cpi	r24, 0x2E	; 46
    10cc:	91 05       	cpc	r25, r1
    10ce:	0c f4       	brge	.+2      	; 0x10d2 <__vector_13+0x1b4>
    10d0:	83 c0       	rjmp	.+262    	; 0x11d8 <__vector_13+0x2ba>
    10d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    10d4:	38 89       	ldd	r19, Y+16	; 0x10
    10d6:	27 33       	cpi	r18, 0x37	; 55
    10d8:	31 05       	cpc	r19, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <__vector_13+0x1c0>
    10dc:	9c c0       	rjmp	.+312    	; 0x1216 <__vector_13+0x2f8>
    10de:	4a c1       	rjmp	.+660    	; 0x1374 <__vector_13+0x456>
	{
		case ROOM1_STATUS:
			response = DIO_VidGetPinValue(ROOM1_PORT, ROOM1_PIN);
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	64 e0       	ldi	r22, 0x04	; 4
    10e4:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_VidGetPinValue>
    10e8:	80 93 69 01 	sts	0x0169, r24
			UART_VidSendByte(response);
    10ec:	80 91 69 01 	lds	r24, 0x0169
    10f0:	0e 94 08 0a 	call	0x1410	; 0x1410 <UART_VidSendByte>
    10f4:	3f c1       	rjmp	.+638    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM2_STATUS:
			response = DIO_VidGetPinValue(ROOM2_PORT, ROOM2_PIN);
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	65 e0       	ldi	r22, 0x05	; 5
    10fa:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_VidGetPinValue>
    10fe:	80 93 69 01 	sts	0x0169, r24
			UART_VidSendByte(response);
    1102:	80 91 69 01 	lds	r24, 0x0169
    1106:	0e 94 08 0a 	call	0x1410	; 0x1410 <UART_VidSendByte>
    110a:	34 c1       	rjmp	.+616    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM3_STATUS:
			response = DIO_VidGetPinValue(ROOM3_PORT, ROOM3_PIN);
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	66 e0       	ldi	r22, 0x06	; 6
    1110:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_VidGetPinValue>
    1114:	80 93 69 01 	sts	0x0169, r24
			UART_VidSendByte(response);
    1118:	80 91 69 01 	lds	r24, 0x0169
    111c:	0e 94 08 0a 	call	0x1410	; 0x1410 <UART_VidSendByte>
    1120:	29 c1       	rjmp	.+594    	; 0x1374 <__vector_13+0x456>
			break;

		case ROOM4_STATUS:
			response = DIO_VidGetPinValue(ROOM4_PORT, ROOM4_PIN);
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	67 e0       	ldi	r22, 0x07	; 7
    1126:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_VidGetPinValue>
    112a:	80 93 69 01 	sts	0x0169, r24
			UART_VidSendByte(response);
    112e:	80 91 69 01 	lds	r24, 0x0169
    1132:	0e 94 08 0a 	call	0x1410	; 0x1410 <UART_VidSendByte>
    1136:	1e c1       	rjmp	.+572    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM1_SET_AUTO:
			Global_u8Rooms[0] = AUTO;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	80 93 6d 01 	sts	0x016D, r24
    113e:	1a c1       	rjmp	.+564    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM2_SET_AUTO:
			Global_u8Rooms[1] = AUTO;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 6e 01 	sts	0x016E, r24
    1146:	16 c1       	rjmp	.+556    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM3_SET_AUTO:
			Global_u8Rooms[2] = AUTO;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 6f 01 	sts	0x016F, r24
    114e:	12 c1       	rjmp	.+548    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM4_SET_AUTO:
			Global_u8Rooms[3] = AUTO;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 93 70 01 	sts	0x0170, r24
    1156:	0e c1       	rjmp	.+540    	; 0x1374 <__vector_13+0x456>
			break;

		case ROOM1_TURN_ON:
			DIO_VidSetPinValue(ROOM1_PORT, ROOM1_PIN, PinHigh);
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	64 e0       	ldi	r22, 0x04	; 4
    115c:	41 e0       	ldi	r20, 0x01	; 1
    115e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
			Global_u8Rooms[0] = MANUAL;
    1162:	10 92 6d 01 	sts	0x016D, r1
    1166:	06 c1       	rjmp	.+524    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM2_TURN_ON:
			DIO_VidSetPinValue(ROOM2_PORT, ROOM2_PIN, PinHigh);
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	65 e0       	ldi	r22, 0x05	; 5
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
			Global_u8Rooms[1] = MANUAL;
    1172:	10 92 6e 01 	sts	0x016E, r1
    1176:	fe c0       	rjmp	.+508    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM3_TURN_ON:
			DIO_VidSetPinValue(ROOM3_PORT, ROOM3_PIN, PinHigh);
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	66 e0       	ldi	r22, 0x06	; 6
    117c:	41 e0       	ldi	r20, 0x01	; 1
    117e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
			Global_u8Rooms[2] = MANUAL;
    1182:	10 92 6f 01 	sts	0x016F, r1
    1186:	f6 c0       	rjmp	.+492    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM4_TURN_ON:
			DIO_VidSetPinValue(ROOM4_PORT, ROOM4_PIN, PinHigh);
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	67 e0       	ldi	r22, 0x07	; 7
    118c:	41 e0       	ldi	r20, 0x01	; 1
    118e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
			Global_u8Rooms[3] = MANUAL;
    1192:	10 92 70 01 	sts	0x0170, r1
    1196:	ee c0       	rjmp	.+476    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM1_TURN_OFF:
			DIO_VidSetPinValue(ROOM1_PORT, ROOM1_PIN, PinLow);
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	64 e0       	ldi	r22, 0x04	; 4
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
			Global_u8Rooms[0] = MANUAL;
    11a2:	10 92 6d 01 	sts	0x016D, r1
    11a6:	e6 c0       	rjmp	.+460    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM2_TURN_OFF:
			DIO_VidSetPinValue(ROOM2_PORT, ROOM2_PIN, PinLow);
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	65 e0       	ldi	r22, 0x05	; 5
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
			Global_u8Rooms[1] = MANUAL;
    11b2:	10 92 6e 01 	sts	0x016E, r1
    11b6:	de c0       	rjmp	.+444    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM3_TURN_OFF:
			DIO_VidSetPinValue(ROOM3_PORT, ROOM3_PIN, PinLow);
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	66 e0       	ldi	r22, 0x06	; 6
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
			Global_u8Rooms[2] = MANUAL;
    11c2:	10 92 6f 01 	sts	0x016F, r1
    11c6:	d6 c0       	rjmp	.+428    	; 0x1374 <__vector_13+0x456>
			break;
		case ROOM4_TURN_OFF:
			DIO_VidSetPinValue(ROOM4_PORT, ROOM4_PIN, PinLow);
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	67 e0       	ldi	r22, 0x07	; 7
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_VidSetPinValue>
			Global_u8Rooms[3] = MANUAL;
    11d2:	10 92 70 01 	sts	0x0170, r1
    11d6:	ce c0       	rjmp	.+412    	; 0x1374 <__vector_13+0x456>
			break;

		case FAN_SET_AUTO:
			fanmode = AUTO;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	80 93 6c 01 	sts	0x016C, r24
    11de:	ca c0       	rjmp	.+404    	; 0x1374 <__vector_13+0x456>
			break;
		case FAN_TURN_ON:
			set_dutycycle(255);
    11e0:	8f ef       	ldi	r24, 0xFF	; 255
    11e2:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <set_dutycycle>
			fanmode = MANUAL;
    11e6:	10 92 6c 01 	sts	0x016C, r1
    11ea:	c4 c0       	rjmp	.+392    	; 0x1374 <__vector_13+0x456>
			break;

		case FAN_TURN_OFF:
			set_dutycycle(0);
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <set_dutycycle>
			fanmode = MANUAL;
    11f2:	10 92 6c 01 	sts	0x016C, r1
    11f6:	be c0       	rjmp	.+380    	; 0x1374 <__vector_13+0x456>
			break;
		case FAN_STATUS:
			if (0 == TIMER0_Get_U8Dutycycle())
    11f8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TIMER0_Get_U8Dutycycle>
    11fc:	88 23       	and	r24, r24
    11fe:	19 f4       	brne	.+6      	; 0x1206 <__vector_13+0x2e8>
			{
				response = OFF_STATUS;
    1200:	10 92 69 01 	sts	0x0169, r1
    1204:	03 c0       	rjmp	.+6      	; 0x120c <__vector_13+0x2ee>
			}
			else
			{
				response = ON_STATUS;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	80 93 69 01 	sts	0x0169, r24
			}
			UART_VidSendByte(response);
    120c:	80 91 69 01 	lds	r24, 0x0169
    1210:	0e 94 08 0a 	call	0x1410	; 0x1410 <UART_VidSendByte>
    1214:	af c0       	rjmp	.+350    	; 0x1374 <__vector_13+0x456>
			break;
		case SET_TEMPERATURE:
			CLR_BIT(UCSRB, UCSRB_RXCIE);
    1216:	aa e2       	ldi	r26, 0x2A	; 42
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ea e2       	ldi	r30, 0x2A	; 42
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8f 77       	andi	r24, 0x7F	; 127
    1222:	8c 93       	st	X, r24
			fantemp = UART_u8ReceiveData();
    1224:	0e 94 3f 0a 	call	0x147e	; 0x147e <UART_u8ReceiveData>
    1228:	80 93 6b 01 	sts	0x016B, r24
			fanmode = AUTO;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	80 93 6c 01 	sts	0x016C, r24
			SET_BIT(UCSRB, UCSRB_RXCIE);
    1232:	aa e2       	ldi	r26, 0x2A	; 42
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ea e2       	ldi	r30, 0x2A	; 42
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	80 68       	ori	r24, 0x80	; 128
    123e:	8c 93       	st	X, r24
    1240:	99 c0       	rjmp	.+306    	; 0x1374 <__vector_13+0x456>
			break;
		case DOOR_OPEN:
			TIMER1_VidServoMotor_Angle(90);
    1242:	8a e5       	ldi	r24, 0x5A	; 90
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TIMER1_VidServoMotor_Angle>
			doorstatus = OPEN_STATUS;
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	80 93 6a 01 	sts	0x016A, r24
    1250:	91 c0       	rjmp	.+290    	; 0x1374 <__vector_13+0x456>
			break;
		case DOOR_CLOSE:
			TIMER1_VidServoMotor_Angle(180);
    1252:	84 eb       	ldi	r24, 0xB4	; 180
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TIMER1_VidServoMotor_Angle>
			doorstatus = CLOSED_STATUS;
    125a:	83 e0       	ldi	r24, 0x03	; 3
    125c:	80 93 6a 01 	sts	0x016A, r24
    1260:	89 c0       	rjmp	.+274    	; 0x1374 <__vector_13+0x456>
			break;
		case DOOR_STATUS:
			response = doorstatus;
    1262:	80 91 6a 01 	lds	r24, 0x016A
    1266:	80 93 69 01 	sts	0x0169, r24
			UART_VidSendByte(response);
    126a:	80 91 69 01 	lds	r24, 0x0169
    126e:	0e 94 08 0a 	call	0x1410	; 0x1410 <UART_VidSendByte>
    1272:	80 c0       	rjmp	.+256    	; 0x1374 <__vector_13+0x456>
			break;
		case DOOR_SET_AUTO:
			TIMER1_VidServoMotor_Angle(90);
    1274:	8a e5       	ldi	r24, 0x5A	; 90
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TIMER1_VidServoMotor_Angle>
			doorstatus = OPEN_STATUS;
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	80 93 6a 01 	sts	0x016A, r24
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	aa ef       	ldi	r26, 0xFA	; 250
    1288:	b4 e4       	ldi	r27, 0x44	; 68
    128a:	8b 87       	std	Y+11, r24	; 0x0b
    128c:	9c 87       	std	Y+12, r25	; 0x0c
    128e:	ad 87       	std	Y+13, r26	; 0x0d
    1290:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1292:	6b 85       	ldd	r22, Y+11	; 0x0b
    1294:	7c 85       	ldd	r23, Y+12	; 0x0c
    1296:	8d 85       	ldd	r24, Y+13	; 0x0d
    1298:	9e 85       	ldd	r25, Y+14	; 0x0e
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	4a ef       	ldi	r20, 0xFA	; 250
    12a0:	54 e4       	ldi	r21, 0x44	; 68
    12a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	8f 83       	std	Y+7, r24	; 0x07
    12ac:	98 87       	std	Y+8, r25	; 0x08
    12ae:	a9 87       	std	Y+9, r26	; 0x09
    12b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b2:	6f 81       	ldd	r22, Y+7	; 0x07
    12b4:	78 85       	ldd	r23, Y+8	; 0x08
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e8       	ldi	r20, 0x80	; 128
    12c0:	5f e3       	ldi	r21, 0x3F	; 63
    12c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c6:	88 23       	and	r24, r24
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <__vector_13+0x3b6>
		__ticks = 1;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	9e 83       	std	Y+6, r25	; 0x06
    12d0:	8d 83       	std	Y+5, r24	; 0x05
    12d2:	3f c0       	rjmp	.+126    	; 0x1352 <__vector_13+0x434>
	else if (__tmp > 65535)
    12d4:	6f 81       	ldd	r22, Y+7	; 0x07
    12d6:	78 85       	ldd	r23, Y+8	; 0x08
    12d8:	89 85       	ldd	r24, Y+9	; 0x09
    12da:	9a 85       	ldd	r25, Y+10	; 0x0a
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	3f ef       	ldi	r19, 0xFF	; 255
    12e0:	4f e7       	ldi	r20, 0x7F	; 127
    12e2:	57 e4       	ldi	r21, 0x47	; 71
    12e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e8:	18 16       	cp	r1, r24
    12ea:	4c f5       	brge	.+82     	; 0x133e <__vector_13+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e2       	ldi	r20, 0x20	; 32
    12fa:	51 e4       	ldi	r21, 0x41	; 65
    12fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	bc 01       	movw	r22, r24
    1306:	cd 01       	movw	r24, r26
    1308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	9e 83       	std	Y+6, r25	; 0x06
    1312:	8d 83       	std	Y+5, r24	; 0x05
    1314:	0f c0       	rjmp	.+30     	; 0x1334 <__vector_13+0x416>
    1316:	88 ec       	ldi	r24, 0xC8	; 200
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9c 83       	std	Y+4, r25	; 0x04
    131c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <__vector_13+0x404>
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	69 f7       	brne	.-38     	; 0x1316 <__vector_13+0x3f8>
    133c:	14 c0       	rjmp	.+40     	; 0x1366 <__vector_13+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133e:	6f 81       	ldd	r22, Y+7	; 0x07
    1340:	78 85       	ldd	r23, Y+8	; 0x08
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	9a 85       	ldd	r25, Y+10	; 0x0a
    1346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <__vector_13+0x440>
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(DOOR_TIME);
			TIMER1_VidServoMotor_Angle(180);
    1366:	84 eb       	ldi	r24, 0xB4	; 180
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TIMER1_VidServoMotor_Angle>
			doorstatus = CLOSED_STATUS;
    136e:	83 e0       	ldi	r24, 0x03	; 3
    1370:	80 93 6a 01 	sts	0x016A, r24
			break;

		default:
			break;
	}
}
    1374:	60 96       	adiw	r28, 0x10	; 16
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	ff 91       	pop	r31
    1380:	ef 91       	pop	r30
    1382:	bf 91       	pop	r27
    1384:	af 91       	pop	r26
    1386:	9f 91       	pop	r25
    1388:	8f 91       	pop	r24
    138a:	7f 91       	pop	r23
    138c:	6f 91       	pop	r22
    138e:	5f 91       	pop	r21
    1390:	4f 91       	pop	r20
    1392:	3f 91       	pop	r19
    1394:	2f 91       	pop	r18
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f 90       	pop	r0
    139c:	1f 90       	pop	r1
    139e:	18 95       	reti

000013a0 <UART_VidInit>:


#include "UART_interface.h"

void UART_VidInit(void)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    // SELECT THIS REGISTER
    SET_BIT(UCSRC, UCSRC_URSEL);
    13a8:	a0 e4       	ldi	r26, 0x40	; 64
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e0 e4       	ldi	r30, 0x40	; 64
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	80 68       	ori	r24, 0x80	; 128
    13b4:	8c 93       	st	X, r24
    // SET  FORMAT 8 DATA, 1 STOP, NO PARITY
    SET_BIT(UCSRC, UCSRC_UCSZ0);
    13b6:	a0 e4       	ldi	r26, 0x40	; 64
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e0 e4       	ldi	r30, 0x40	; 64
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	82 60       	ori	r24, 0x02	; 2
    13c2:	8c 93       	st	X, r24
    SET_BIT(UCSRC, UCSRC_UCSZ1);
    13c4:	a0 e4       	ldi	r26, 0x40	; 64
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e0 e4       	ldi	r30, 0x40	; 64
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	84 60       	ori	r24, 0x04	; 4
    13d0:	8c 93       	st	X, r24
    // SET BAUD RATE TO 9600
    UBRRH = (u8)(UBRR_VAL >> 8);
    13d2:	e0 e4       	ldi	r30, 0x40	; 64
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	10 82       	st	Z, r1
    UBRRL = (u8)UBRR_VAL;
    13d8:	e9 e2       	ldi	r30, 0x29	; 41
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	83 e3       	ldi	r24, 0x33	; 51
    13de:	80 83       	st	Z, r24
    // ENABLE RX & TX
    SET_BIT(UCSRB, UCSRB_RXEN);
    13e0:	aa e2       	ldi	r26, 0x2A	; 42
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	ea e2       	ldi	r30, 0x2A	; 42
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 61       	ori	r24, 0x10	; 16
    13ec:	8c 93       	st	X, r24
    SET_BIT(UCSRB, UCSRB_TXEN);
    13ee:	aa e2       	ldi	r26, 0x2A	; 42
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	ea e2       	ldi	r30, 0x2A	; 42
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	88 60       	ori	r24, 0x08	; 8
    13fa:	8c 93       	st	X, r24
    SET_BIT(UCSRB, UCSRB_RXCIE);
    13fc:	aa e2       	ldi	r26, 0x2A	; 42
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ea e2       	ldi	r30, 0x2A	; 42
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	80 68       	ori	r24, 0x80	; 128
    1408:	8c 93       	st	X, r24
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <UART_VidSendByte>:

void UART_VidSendByte(u8 Copy_u8Byte)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	0f 92       	push	r0
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	89 83       	std	Y+1, r24	; 0x01
    // Polling until UDR is empty
    while (GET_BIT(UCSRA, UCSRA_UDRE) != 1)
    141c:	eb e2       	ldi	r30, 0x2B	; 43
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	82 95       	swap	r24
    1424:	86 95       	lsr	r24
    1426:	87 70       	andi	r24, 0x07	; 7
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	81 70       	andi	r24, 0x01	; 1
    142e:	90 70       	andi	r25, 0x00	; 0
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	a1 f3       	breq	.-24     	; 0x141c <UART_VidSendByte+0xc>
        ;
    // Send Data
    UDR = Copy_u8Byte;
    1434:	ec e2       	ldi	r30, 0x2C	; 44
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	80 83       	st	Z, r24
}
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <UART_VidSendString>:

void UART_VidSendString(const char *str)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	00 d0       	rcall	.+0      	; 0x144a <UART_VidSendString+0x6>
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	0b c0       	rjmp	.+22     	; 0x146a <UART_VidSendString+0x26>
    while (*str)
        UART_VidSendByte(*str++);
    1454:	e9 81       	ldd	r30, Y+1	; 0x01
    1456:	fa 81       	ldd	r31, Y+2	; 0x02
    1458:	20 81       	ld	r18, Z
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	82 2f       	mov	r24, r18
    1466:	0e 94 08 0a 	call	0x1410	; 0x1410 <UART_VidSendByte>
    UDR = Copy_u8Byte;
}

void UART_VidSendString(const char *str)
{
    while (*str)
    146a:	e9 81       	ldd	r30, Y+1	; 0x01
    146c:	fa 81       	ldd	r31, Y+2	; 0x02
    146e:	80 81       	ld	r24, Z
    1470:	88 23       	and	r24, r24
    1472:	81 f7       	brne	.-32     	; 0x1454 <UART_VidSendString+0x10>
        UART_VidSendByte(*str++);
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <UART_u8ReceiveData>:

u8 UART_u8ReceiveData(void)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    // Polling until receive complete
    while (GET_BIT(UCSRA, UCSRA_RXC) != 1)
    1486:	eb e2       	ldi	r30, 0x2B	; 43
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	88 1f       	adc	r24, r24
    148e:	88 27       	eor	r24, r24
    1490:	88 1f       	adc	r24, r24
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	c1 f7       	brne	.-16     	; 0x1486 <UART_u8ReceiveData+0x8>
        ;
    return UDR;
    1496:	ec e2       	ldi	r30, 0x2C	; 44
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <TIMER1_VidInit>:
#include "../../../include/STD_TYPES.h"
#include"TIMER1_private.h"
#include "TIMER1_interface.h"

void TIMER1_VidInit()
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
	//Non Inverting Mode FPWM
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    14aa:	af e4       	ldi	r26, 0x4F	; 79
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ef e4       	ldi	r30, 0x4F	; 79
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	80 68       	ori	r24, 0x80	; 128
    14b6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    14b8:	af e4       	ldi	r26, 0x4F	; 79
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	ef e4       	ldi	r30, 0x4F	; 79
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	8f 7b       	andi	r24, 0xBF	; 191
    14c4:	8c 93       	st	X, r24

	//Seting Waveform Geniration Mode
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    14c6:	af e4       	ldi	r26, 0x4F	; 79
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ef e4       	ldi	r30, 0x4F	; 79
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8e 7f       	andi	r24, 0xFE	; 254
    14d2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);//
    14d4:	af e4       	ldi	r26, 0x4F	; 79
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ef e4       	ldi	r30, 0x4F	; 79
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	82 60       	ori	r24, 0x02	; 2
    14e0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    14e2:	ae e4       	ldi	r26, 0x4E	; 78
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	ee e4       	ldi	r30, 0x4E	; 78
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	88 60       	ori	r24, 0x08	; 8
    14ee:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    14f0:	ae e4       	ldi	r26, 0x4E	; 78
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ee e4       	ldi	r30, 0x4E	; 78
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	80 61       	ori	r24, 0x10	; 16
    14fc:	8c 93       	st	X, r24

	//Set Presscaler Devide By 8
	TCCR1B&=0xf8;
    14fe:	ae e4       	ldi	r26, 0x4E	; 78
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	ee e4       	ldi	r30, 0x4E	; 78
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	88 7f       	andi	r24, 0xF8	; 248
    150a:	8c 93       	st	X, r24
	TCCR1B|=2;
    150c:	ae e4       	ldi	r26, 0x4E	; 78
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ee e4       	ldi	r30, 0x4E	; 78
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	82 60       	ori	r24, 0x02	; 2
    1518:	8c 93       	st	X, r24

	TIMER1_Vid_SetICR_TopValue(19999);
    151a:	8f e1       	ldi	r24, 0x1F	; 31
    151c:	9e e4       	ldi	r25, 0x4E	; 78
    151e:	0e 94 94 0a 	call	0x1528	; 0x1528 <TIMER1_Vid_SetICR_TopValue>

}
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <TIMER1_Vid_SetICR_TopValue>:
void TIMER1_Vid_SetICR_TopValue(u16 value)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <TIMER1_Vid_SetICR_TopValue+0x6>
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = value;
    1536:	e6 e4       	ldi	r30, 0x46	; 70
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	80 83       	st	Z, r24
}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <TIMER1_Vid_SetOCR_CompMatch>:

void TIMER1_Vid_SetOCR_CompMatch(u16 value)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <TIMER1_Vid_SetOCR_CompMatch+0x6>
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = value;
    155a:	ea e4       	ldi	r30, 0x4A	; 74
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
}
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <TIMER1_VidServoMotor_Angle>:

void TIMER1_VidServoMotor_Angle(u16 value)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <TIMER1_VidServoMotor_Angle+0x6>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_Vid_SetOCR_CompMatch(( (50 * value) + 8991 )/9);
    157e:	29 81       	ldd	r18, Y+1	; 0x01
    1580:	3a 81       	ldd	r19, Y+2	; 0x02
    1582:	82 e3       	ldi	r24, 0x32	; 50
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	ac 01       	movw	r20, r24
    1588:	24 9f       	mul	r18, r20
    158a:	c0 01       	movw	r24, r0
    158c:	25 9f       	mul	r18, r21
    158e:	90 0d       	add	r25, r0
    1590:	34 9f       	mul	r19, r20
    1592:	90 0d       	add	r25, r0
    1594:	11 24       	eor	r1, r1
    1596:	81 5e       	subi	r24, 0xE1	; 225
    1598:	9c 4d       	sbci	r25, 0xDC	; 220
    159a:	29 e0       	ldi	r18, 0x09	; 9
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	b9 01       	movw	r22, r18
    15a0:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__udivmodhi4>
    15a4:	cb 01       	movw	r24, r22
    15a6:	0e 94 a6 0a 	call	0x154c	; 0x154c <TIMER1_Vid_SetOCR_CompMatch>
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <TIMER0_Vid_Init>:
#include "TIMER_PRIVATE.h"
#include "TIMER_INTERFAEC.h"


void TIMER0_Vid_Init(et_TIMER0MODE mode )
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <TIMER0_Vid_Init+0x6>
    15ba:	0f 92       	push	r0
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	89 83       	std	Y+1, r24	; 0x01
	/************** timer mode **************/
	switch(mode)
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3b 83       	std	Y+3, r19	; 0x03
    15ca:	2a 83       	std	Y+2, r18	; 0x02
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	9b 81       	ldd	r25, Y+3	; 0x03
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <TIMER0_Vid_Init+0x24>
    15d6:	42 c0       	rjmp	.+132    	; 0x165c <TIMER0_Vid_Init+0xa8>
    15d8:	2a 81       	ldd	r18, Y+2	; 0x02
    15da:	3b 81       	ldd	r19, Y+3	; 0x03
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	2c f4       	brge	.+10     	; 0x15ec <TIMER0_Vid_Init+0x38>
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	9b 81       	ldd	r25, Y+3	; 0x03
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	61 f0       	breq	.+24     	; 0x1602 <TIMER0_Vid_Init+0x4e>
    15ea:	46 c0       	rjmp	.+140    	; 0x1678 <TIMER0_Vid_Init+0xc4>
    15ec:	2a 81       	ldd	r18, Y+2	; 0x02
    15ee:	3b 81       	ldd	r19, Y+3	; 0x03
    15f0:	22 30       	cpi	r18, 0x02	; 2
    15f2:	31 05       	cpc	r19, r1
    15f4:	a9 f0       	breq	.+42     	; 0x1620 <TIMER0_Vid_Init+0x6c>
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	9b 81       	ldd	r25, Y+3	; 0x03
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	f9 f0       	breq	.+62     	; 0x163e <TIMER0_Vid_Init+0x8a>
    1600:	3b c0       	rjmp	.+118    	; 0x1678 <TIMER0_Vid_Init+0xc4>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0,TCCR0_WGM00);
    1602:	a3 e5       	ldi	r26, 0x53	; 83
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e3 e5       	ldi	r30, 0x53	; 83
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	8f 7b       	andi	r24, 0xBF	; 191
    160e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
    1610:	a3 e5       	ldi	r26, 0x53	; 83
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e3 e5       	ldi	r30, 0x53	; 83
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	87 7f       	andi	r24, 0xF7	; 247
    161c:	8c 93       	st	X, r24
    161e:	2c c0       	rjmp	.+88     	; 0x1678 <TIMER0_Vid_Init+0xc4>
		break;

	case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0,TCCR0_WGM00);
    1620:	a3 e5       	ldi	r26, 0x53	; 83
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e3 e5       	ldi	r30, 0x53	; 83
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	8f 7b       	andi	r24, 0xBF	; 191
    162c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    162e:	a3 e5       	ldi	r26, 0x53	; 83
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e3 e5       	ldi	r30, 0x53	; 83
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	88 60       	ori	r24, 0x08	; 8
    163a:	8c 93       	st	X, r24
    163c:	1d c0       	rjmp	.+58     	; 0x1678 <TIMER0_Vid_Init+0xc4>
		break;

	case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0,TCCR0_WGM00);
    163e:	a3 e5       	ldi	r26, 0x53	; 83
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e3 e5       	ldi	r30, 0x53	; 83
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	80 64       	ori	r24, 0x40	; 64
    164a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    164c:	a3 e5       	ldi	r26, 0x53	; 83
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e3 e5       	ldi	r30, 0x53	; 83
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	88 60       	ori	r24, 0x08	; 8
    1658:	8c 93       	st	X, r24
    165a:	0e c0       	rjmp	.+28     	; 0x1678 <TIMER0_Vid_Init+0xc4>
		break;

	case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0,TCCR0_WGM00);
    165c:	a3 e5       	ldi	r26, 0x53	; 83
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e3 e5       	ldi	r30, 0x53	; 83
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 64       	ori	r24, 0x40	; 64
    1668:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
    166a:	a3 e5       	ldi	r26, 0x53	; 83
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e3 e5       	ldi	r30, 0x53	; 83
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	87 7f       	andi	r24, 0xF7	; 247
    1676:	8c 93       	st	X, r24
		break;

	}
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <PWM_Timer0_Init>:
void PWM_Timer0_Init(u8 set_duty_cycle)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	0f 92       	push	r0
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    1690:	e2 e5       	ldi	r30, 0x52	; 82
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	10 82       	st	Z, r1
	OCR0 = set_duty_cycle;
    1696:	ec e5       	ldi	r30, 0x5C	; 92
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	80 83       	st	Z, r24
	DIO_VidSetPinDirection(Port_B,Pin3,Output); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	63 e0       	ldi	r22, 0x03	; 3
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	0e 94 c8 0b 	call	0x1790	; 0x1790 <DIO_VidSetPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 =  (1<<TCCR0_WGM00)|(1<<TCCR0_WGM01)| (1<<TCCR0_COM01)|(1<<TCCR0_CS01)|(1<<TCCR0_CS00);
    16a8:	e3 e5       	ldi	r30, 0x53	; 83
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8b e6       	ldi	r24, 0x6B	; 107
    16ae:	80 83       	st	Z, r24

}
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <set_dutycycle>:

void set_dutycycle(u8 duty)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	0f 92       	push	r0
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = duty ;//Set the OCR0 depending on the duty percentage
    16c4:	ec e5       	ldi	r30, 0x5C	; 92
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	80 83       	st	Z, r24
}
    16cc:	0f 90       	pop	r0
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <TIMER0_Get_U8Dutycycle>:
u8 TIMER0_Get_U8Dutycycle(void){
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	return OCR0;
    16dc:	ec e5       	ldi	r30, 0x5C	; 92
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
}
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <TIMER0_Vid_stop>:
void TIMER0_Vid_stop(void)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, TCCR0_CS00);
    16f0:	a3 e5       	ldi	r26, 0x53	; 83
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e3 e5       	ldi	r30, 0x53	; 83
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8e 7f       	andi	r24, 0xFE	; 254
    16fc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS01);
    16fe:	a3 e5       	ldi	r26, 0x53	; 83
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e3 e5       	ldi	r30, 0x53	; 83
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	8d 7f       	andi	r24, 0xFD	; 253
    170a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS02);
    170c:	a3 e5       	ldi	r26, 0x53	; 83
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e3 e5       	ldi	r30, 0x53	; 83
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	8b 7f       	andi	r24, 0xFB	; 251
    1718:	8c 93       	st	X, r24
}
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <TIMER0_Interrupt_Enable>:




void TIMER0_Interrupt_Enable()
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE0);
    1728:	a9 e5       	ldi	r26, 0x59	; 89
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e9 e5       	ldi	r30, 0x59	; 89
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	81 60       	ori	r24, 0x01	; 1
    1734:	8c 93       	st	X, r24
}
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <TIMER0_Interrupt_Disable>:
void TIMER0_Interrupt_Disable()
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE0);
    1744:	a9 e5       	ldi	r26, 0x59	; 89
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e9 e5       	ldi	r30, 0x59	; 89
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	8e 7f       	andi	r24, 0xFE	; 254
    1750:	8c 93       	st	X, r24
}
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <GIE_VidEnable>:
#include "../../../include/BIT_MATH.h"

#include "GIE_interface.h"

void GIE_VidEnable()
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREF_I);
    1760:	af e5       	ldi	r26, 0x5F	; 95
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ef e5       	ldi	r30, 0x5F	; 95
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	80 68       	ori	r24, 0x80	; 128
    176c:	8c 93       	st	X, r24
}
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <GIE_VidDisable>:
void GIE_VidDisable()
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREF_I);
    177c:	af e5       	ldi	r26, 0x5F	; 95
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	ef e5       	ldi	r30, 0x5F	; 95
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	8f 77       	andi	r24, 0x7F	; 127
    1788:	8c 93       	st	X, r24
}
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <DIO_VidSetPinDirection>:
#include "DIO_private.h"
#include "DIO_interface.h"

// Setting pin direction
void DIO_VidSetPinDirection(et_Port port, et_Pin pin, et_Direction direction)
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	27 97       	sbiw	r28, 0x07	; 7
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	6a 83       	std	Y+2, r22	; 0x02
    17a8:	4b 83       	std	Y+3, r20	; 0x03
	if (direction == Input)
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	88 23       	and	r24, r24
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <DIO_VidSetPinDirection+0x22>
    17b0:	74 c0       	rjmp	.+232    	; 0x189a <DIO_VidSetPinDirection+0x10a>
	{
		switch (port)
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3f 83       	std	Y+7, r19	; 0x07
    17ba:	2e 83       	std	Y+6, r18	; 0x06
    17bc:	8e 81       	ldd	r24, Y+6	; 0x06
    17be:	9f 81       	ldd	r25, Y+7	; 0x07
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	59 f1       	breq	.+86     	; 0x181c <DIO_VidSetPinDirection+0x8c>
    17c6:	2e 81       	ldd	r18, Y+6	; 0x06
    17c8:	3f 81       	ldd	r19, Y+7	; 0x07
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	2c f4       	brge	.+10     	; 0x17da <DIO_VidSetPinDirection+0x4a>
    17d0:	8e 81       	ldd	r24, Y+6	; 0x06
    17d2:	9f 81       	ldd	r25, Y+7	; 0x07
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	69 f0       	breq	.+26     	; 0x17f2 <DIO_VidSetPinDirection+0x62>
    17d8:	d2 c0       	rjmp	.+420    	; 0x197e <DIO_VidSetPinDirection+0x1ee>
    17da:	2e 81       	ldd	r18, Y+6	; 0x06
    17dc:	3f 81       	ldd	r19, Y+7	; 0x07
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	89 f1       	breq	.+98     	; 0x1846 <DIO_VidSetPinDirection+0xb6>
    17e4:	8e 81       	ldd	r24, Y+6	; 0x06
    17e6:	9f 81       	ldd	r25, Y+7	; 0x07
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	91 05       	cpc	r25, r1
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <DIO_VidSetPinDirection+0x60>
    17ee:	40 c0       	rjmp	.+128    	; 0x1870 <DIO_VidSetPinDirection+0xe0>
    17f0:	c6 c0       	rjmp	.+396    	; 0x197e <DIO_VidSetPinDirection+0x1ee>
		{
		case Port_A:
			CLR_BIT(DDRA, pin);
    17f2:	aa e3       	ldi	r26, 0x3A	; 58
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	ea e3       	ldi	r30, 0x3A	; 58
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <DIO_VidSetPinDirection+0x80>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <DIO_VidSetPinDirection+0x7c>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	b1 c0       	rjmp	.+354    	; 0x197e <DIO_VidSetPinDirection+0x1ee>
			break;

		case Port_B:
			CLR_BIT(DDRB, pin);
    181c:	a7 e3       	ldi	r26, 0x37	; 55
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e7 e3       	ldi	r30, 0x37	; 55
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <DIO_VidSetPinDirection+0xaa>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <DIO_VidSetPinDirection+0xa6>
    183e:	80 95       	com	r24
    1840:	84 23       	and	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	9c c0       	rjmp	.+312    	; 0x197e <DIO_VidSetPinDirection+0x1ee>
			break;

		case Port_C:
			CLR_BIT(DDRC, pin);
    1846:	a4 e3       	ldi	r26, 0x34	; 52
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e4 e3       	ldi	r30, 0x34	; 52
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_VidSetPinDirection+0xd4>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_VidSetPinDirection+0xd0>
    1868:	80 95       	com	r24
    186a:	84 23       	and	r24, r20
    186c:	8c 93       	st	X, r24
    186e:	87 c0       	rjmp	.+270    	; 0x197e <DIO_VidSetPinDirection+0x1ee>
			break;

		case Port_D:
			CLR_BIT(DDRD, pin);
    1870:	a1 e3       	ldi	r26, 0x31	; 49
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e1 e3       	ldi	r30, 0x31	; 49
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <DIO_VidSetPinDirection+0xfe>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <DIO_VidSetPinDirection+0xfa>
    1892:	80 95       	com	r24
    1894:	84 23       	and	r24, r20
    1896:	8c 93       	st	X, r24
    1898:	72 c0       	rjmp	.+228    	; 0x197e <DIO_VidSetPinDirection+0x1ee>
			break;
		default:
			break;
		}
	}
	else if (direction == Output)
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	09 f0       	breq	.+2      	; 0x18a2 <DIO_VidSetPinDirection+0x112>
    18a0:	6e c0       	rjmp	.+220    	; 0x197e <DIO_VidSetPinDirection+0x1ee>
	{
		switch (port)
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	3d 83       	std	Y+5, r19	; 0x05
    18aa:	2c 83       	std	Y+4, r18	; 0x04
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	91 05       	cpc	r25, r1
    18b4:	49 f1       	breq	.+82     	; 0x1908 <DIO_VidSetPinDirection+0x178>
    18b6:	2c 81       	ldd	r18, Y+4	; 0x04
    18b8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ba:	22 30       	cpi	r18, 0x02	; 2
    18bc:	31 05       	cpc	r19, r1
    18be:	2c f4       	brge	.+10     	; 0x18ca <DIO_VidSetPinDirection+0x13a>
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	9d 81       	ldd	r25, Y+5	; 0x05
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	61 f0       	breq	.+24     	; 0x18e0 <DIO_VidSetPinDirection+0x150>
    18c8:	5a c0       	rjmp	.+180    	; 0x197e <DIO_VidSetPinDirection+0x1ee>
    18ca:	2c 81       	ldd	r18, Y+4	; 0x04
    18cc:	3d 81       	ldd	r19, Y+5	; 0x05
    18ce:	22 30       	cpi	r18, 0x02	; 2
    18d0:	31 05       	cpc	r19, r1
    18d2:	71 f1       	breq	.+92     	; 0x1930 <DIO_VidSetPinDirection+0x1a0>
    18d4:	8c 81       	ldd	r24, Y+4	; 0x04
    18d6:	9d 81       	ldd	r25, Y+5	; 0x05
    18d8:	83 30       	cpi	r24, 0x03	; 3
    18da:	91 05       	cpc	r25, r1
    18dc:	e9 f1       	breq	.+122    	; 0x1958 <DIO_VidSetPinDirection+0x1c8>
    18de:	4f c0       	rjmp	.+158    	; 0x197e <DIO_VidSetPinDirection+0x1ee>
		{
		case Port_A:
			SET_BIT(DDRA, pin);
    18e0:	aa e3       	ldi	r26, 0x3A	; 58
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	ea e3       	ldi	r30, 0x3A	; 58
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_VidSetPinDirection+0x16e>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_VidSetPinDirection+0x16a>
    1902:	84 2b       	or	r24, r20
    1904:	8c 93       	st	X, r24
    1906:	3b c0       	rjmp	.+118    	; 0x197e <DIO_VidSetPinDirection+0x1ee>
			break;

		case Port_B:
			SET_BIT(DDRB, pin);
    1908:	a7 e3       	ldi	r26, 0x37	; 55
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e7 e3       	ldi	r30, 0x37	; 55
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	02 2e       	mov	r0, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <DIO_VidSetPinDirection+0x196>
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	0a 94       	dec	r0
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <DIO_VidSetPinDirection+0x192>
    192a:	84 2b       	or	r24, r20
    192c:	8c 93       	st	X, r24
    192e:	27 c0       	rjmp	.+78     	; 0x197e <DIO_VidSetPinDirection+0x1ee>
			break;

		case Port_C:
			SET_BIT(DDRC, pin);
    1930:	a4 e3       	ldi	r26, 0x34	; 52
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e4 e3       	ldi	r30, 0x34	; 52
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <DIO_VidSetPinDirection+0x1be>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <DIO_VidSetPinDirection+0x1ba>
    1952:	84 2b       	or	r24, r20
    1954:	8c 93       	st	X, r24
    1956:	13 c0       	rjmp	.+38     	; 0x197e <DIO_VidSetPinDirection+0x1ee>
			break;

		case Port_D:
			SET_BIT(DDRD, pin);
    1958:	a1 e3       	ldi	r26, 0x31	; 49
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e1 e3       	ldi	r30, 0x31	; 49
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <DIO_VidSetPinDirection+0x1e6>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <DIO_VidSetPinDirection+0x1e2>
    197a:	84 2b       	or	r24, r20
    197c:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
    197e:	27 96       	adiw	r28, 0x07	; 7
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <DIO_VidSetPinValue>:

// Setting pin value
void DIO_VidSetPinValue(et_Port port, et_Pin pin, et_Status value)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	27 97       	sbiw	r28, 0x07	; 7
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	6a 83       	std	Y+2, r22	; 0x02
    19a8:	4b 83       	std	Y+3, r20	; 0x03
	if (value == PinLow)
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	88 23       	and	r24, r24
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <DIO_VidSetPinValue+0x22>
    19b0:	74 c0       	rjmp	.+232    	; 0x1a9a <DIO_VidSetPinValue+0x10a>
	{
		switch (port)
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	3f 83       	std	Y+7, r19	; 0x07
    19ba:	2e 83       	std	Y+6, r18	; 0x06
    19bc:	8e 81       	ldd	r24, Y+6	; 0x06
    19be:	9f 81       	ldd	r25, Y+7	; 0x07
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	91 05       	cpc	r25, r1
    19c4:	59 f1       	breq	.+86     	; 0x1a1c <DIO_VidSetPinValue+0x8c>
    19c6:	2e 81       	ldd	r18, Y+6	; 0x06
    19c8:	3f 81       	ldd	r19, Y+7	; 0x07
    19ca:	22 30       	cpi	r18, 0x02	; 2
    19cc:	31 05       	cpc	r19, r1
    19ce:	2c f4       	brge	.+10     	; 0x19da <DIO_VidSetPinValue+0x4a>
    19d0:	8e 81       	ldd	r24, Y+6	; 0x06
    19d2:	9f 81       	ldd	r25, Y+7	; 0x07
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	69 f0       	breq	.+26     	; 0x19f2 <DIO_VidSetPinValue+0x62>
    19d8:	d2 c0       	rjmp	.+420    	; 0x1b7e <DIO_VidSetPinValue+0x1ee>
    19da:	2e 81       	ldd	r18, Y+6	; 0x06
    19dc:	3f 81       	ldd	r19, Y+7	; 0x07
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	31 05       	cpc	r19, r1
    19e2:	89 f1       	breq	.+98     	; 0x1a46 <DIO_VidSetPinValue+0xb6>
    19e4:	8e 81       	ldd	r24, Y+6	; 0x06
    19e6:	9f 81       	ldd	r25, Y+7	; 0x07
    19e8:	83 30       	cpi	r24, 0x03	; 3
    19ea:	91 05       	cpc	r25, r1
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <DIO_VidSetPinValue+0x60>
    19ee:	40 c0       	rjmp	.+128    	; 0x1a70 <DIO_VidSetPinValue+0xe0>
    19f0:	c6 c0       	rjmp	.+396    	; 0x1b7e <DIO_VidSetPinValue+0x1ee>
		{
		case Port_A:
			CLR_BIT(PORTA, pin);
    19f2:	ab e3       	ldi	r26, 0x3B	; 59
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	eb e3       	ldi	r30, 0x3B	; 59
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <DIO_VidSetPinValue+0x80>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <DIO_VidSetPinValue+0x7c>
    1a14:	80 95       	com	r24
    1a16:	84 23       	and	r24, r20
    1a18:	8c 93       	st	X, r24
    1a1a:	b1 c0       	rjmp	.+354    	; 0x1b7e <DIO_VidSetPinValue+0x1ee>
			break;

		case Port_B:
			CLR_BIT(PORTB, pin);
    1a1c:	a8 e3       	ldi	r26, 0x38	; 56
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e8 e3       	ldi	r30, 0x38	; 56
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	48 2f       	mov	r20, r24
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 2e       	mov	r0, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <DIO_VidSetPinValue+0xaa>
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	0a 94       	dec	r0
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <DIO_VidSetPinValue+0xa6>
    1a3e:	80 95       	com	r24
    1a40:	84 23       	and	r24, r20
    1a42:	8c 93       	st	X, r24
    1a44:	9c c0       	rjmp	.+312    	; 0x1b7e <DIO_VidSetPinValue+0x1ee>
			break;

		case Port_C:
			CLR_BIT(PORTC, pin);
    1a46:	a5 e3       	ldi	r26, 0x35	; 53
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e5 e3       	ldi	r30, 0x35	; 53
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <DIO_VidSetPinValue+0xd4>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <DIO_VidSetPinValue+0xd0>
    1a68:	80 95       	com	r24
    1a6a:	84 23       	and	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	87 c0       	rjmp	.+270    	; 0x1b7e <DIO_VidSetPinValue+0x1ee>
			break;

		case Port_D:
			CLR_BIT(PORTD, pin);
    1a70:	a2 e3       	ldi	r26, 0x32	; 50
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e2 e3       	ldi	r30, 0x32	; 50
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_VidSetPinValue+0xfe>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_VidSetPinValue+0xfa>
    1a92:	80 95       	com	r24
    1a94:	84 23       	and	r24, r20
    1a96:	8c 93       	st	X, r24
    1a98:	72 c0       	rjmp	.+228    	; 0x1b7e <DIO_VidSetPinValue+0x1ee>
			break;
		default:
			break;
		}
	}
	else if (value == PinHigh)
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <DIO_VidSetPinValue+0x112>
    1aa0:	6e c0       	rjmp	.+220    	; 0x1b7e <DIO_VidSetPinValue+0x1ee>
	{
		switch (port)
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	3d 83       	std	Y+5, r19	; 0x05
    1aaa:	2c 83       	std	Y+4, r18	; 0x04
    1aac:	8c 81       	ldd	r24, Y+4	; 0x04
    1aae:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	49 f1       	breq	.+82     	; 0x1b08 <DIO_VidSetPinValue+0x178>
    1ab6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aba:	22 30       	cpi	r18, 0x02	; 2
    1abc:	31 05       	cpc	r19, r1
    1abe:	2c f4       	brge	.+10     	; 0x1aca <DIO_VidSetPinValue+0x13a>
    1ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	61 f0       	breq	.+24     	; 0x1ae0 <DIO_VidSetPinValue+0x150>
    1ac8:	5a c0       	rjmp	.+180    	; 0x1b7e <DIO_VidSetPinValue+0x1ee>
    1aca:	2c 81       	ldd	r18, Y+4	; 0x04
    1acc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ace:	22 30       	cpi	r18, 0x02	; 2
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	71 f1       	breq	.+92     	; 0x1b30 <DIO_VidSetPinValue+0x1a0>
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad8:	83 30       	cpi	r24, 0x03	; 3
    1ada:	91 05       	cpc	r25, r1
    1adc:	e9 f1       	breq	.+122    	; 0x1b58 <DIO_VidSetPinValue+0x1c8>
    1ade:	4f c0       	rjmp	.+158    	; 0x1b7e <DIO_VidSetPinValue+0x1ee>
		{
		case Port_A:
			SET_BIT(PORTA, pin);
    1ae0:	ab e3       	ldi	r26, 0x3B	; 59
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	eb e3       	ldi	r30, 0x3B	; 59
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	48 2f       	mov	r20, r24
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 2e       	mov	r0, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <DIO_VidSetPinValue+0x16e>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	0a 94       	dec	r0
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <DIO_VidSetPinValue+0x16a>
    1b02:	84 2b       	or	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	3b c0       	rjmp	.+118    	; 0x1b7e <DIO_VidSetPinValue+0x1ee>
			break;

		case Port_B:
			SET_BIT(PORTB, pin);
    1b08:	a8 e3       	ldi	r26, 0x38	; 56
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e8 e3       	ldi	r30, 0x38	; 56
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <DIO_VidSetPinValue+0x196>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <DIO_VidSetPinValue+0x192>
    1b2a:	84 2b       	or	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	27 c0       	rjmp	.+78     	; 0x1b7e <DIO_VidSetPinValue+0x1ee>
			break;

		case Port_C:
			SET_BIT(PORTC, pin);
    1b30:	a5 e3       	ldi	r26, 0x35	; 53
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e5 e3       	ldi	r30, 0x35	; 53
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 2e       	mov	r0, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <DIO_VidSetPinValue+0x1be>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	0a 94       	dec	r0
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <DIO_VidSetPinValue+0x1ba>
    1b52:	84 2b       	or	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	13 c0       	rjmp	.+38     	; 0x1b7e <DIO_VidSetPinValue+0x1ee>
			break;

		case Port_D:
			SET_BIT(PORTD, pin);
    1b58:	a2 e3       	ldi	r26, 0x32	; 50
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e2 e3       	ldi	r30, 0x32	; 50
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	48 2f       	mov	r20, r24
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	02 2e       	mov	r0, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <DIO_VidSetPinValue+0x1e6>
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	0a 94       	dec	r0
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <DIO_VidSetPinValue+0x1e2>
    1b7a:	84 2b       	or	r24, r20
    1b7c:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
    1b7e:	27 96       	adiw	r28, 0x07	; 7
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <DIO_VidGetPinValue>:

// getting pin value
et_Status DIO_VidGetPinValue(et_Port port, et_Pin pin)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <DIO_VidGetPinValue+0x6>
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <DIO_VidGetPinValue+0x8>
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <DIO_VidGetPinValue+0xa>
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	3d 83       	std	Y+5, r19	; 0x05
    1baa:	2c 83       	std	Y+4, r18	; 0x04
    1bac:	4c 81       	ldd	r20, Y+4	; 0x04
    1bae:	5d 81       	ldd	r21, Y+5	; 0x05
    1bb0:	41 30       	cpi	r20, 0x01	; 1
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	49 f1       	breq	.+82     	; 0x1c08 <DIO_VidGetPinValue+0x78>
    1bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bba:	82 30       	cpi	r24, 0x02	; 2
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	34 f4       	brge	.+12     	; 0x1bcc <DIO_VidGetPinValue+0x3c>
    1bc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc4:	21 15       	cp	r18, r1
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	61 f0       	breq	.+24     	; 0x1be2 <DIO_VidGetPinValue+0x52>
    1bca:	57 c0       	rjmp	.+174    	; 0x1c7a <DIO_VidGetPinValue+0xea>
    1bcc:	4c 81       	ldd	r20, Y+4	; 0x04
    1bce:	5d 81       	ldd	r21, Y+5	; 0x05
    1bd0:	42 30       	cpi	r20, 0x02	; 2
    1bd2:	51 05       	cpc	r21, r1
    1bd4:	61 f1       	breq	.+88     	; 0x1c2e <DIO_VidGetPinValue+0x9e>
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	91 05       	cpc	r25, r1
    1bde:	d1 f1       	breq	.+116    	; 0x1c54 <DIO_VidGetPinValue+0xc4>
    1be0:	4c c0       	rjmp	.+152    	; 0x1c7a <DIO_VidGetPinValue+0xea>
	{
	case Port_A:
		return GET_BIT(PINA, pin);
    1be2:	e9 e3       	ldi	r30, 0x39	; 57
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a9 01       	movw	r20, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_VidGetPinValue+0x6a>
    1bf6:	55 95       	asr	r21
    1bf8:	47 95       	ror	r20
    1bfa:	8a 95       	dec	r24
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <DIO_VidGetPinValue+0x66>
    1bfe:	ca 01       	movw	r24, r20
    1c00:	58 2f       	mov	r21, r24
    1c02:	51 70       	andi	r21, 0x01	; 1
    1c04:	5b 83       	std	Y+3, r21	; 0x03
    1c06:	3a c0       	rjmp	.+116    	; 0x1c7c <DIO_VidGetPinValue+0xec>
		break;

	case Port_B:
		return GET_BIT(PINB, pin);
    1c08:	e6 e3       	ldi	r30, 0x36	; 54
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a9 01       	movw	r20, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <DIO_VidGetPinValue+0x90>
    1c1c:	55 95       	asr	r21
    1c1e:	47 95       	ror	r20
    1c20:	8a 95       	dec	r24
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <DIO_VidGetPinValue+0x8c>
    1c24:	ca 01       	movw	r24, r20
    1c26:	58 2f       	mov	r21, r24
    1c28:	51 70       	andi	r21, 0x01	; 1
    1c2a:	5b 83       	std	Y+3, r21	; 0x03
    1c2c:	27 c0       	rjmp	.+78     	; 0x1c7c <DIO_VidGetPinValue+0xec>
		break;

	case Port_C:
		return GET_BIT(PINC, pin);
    1c2e:	e3 e3       	ldi	r30, 0x33	; 51
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	88 2f       	mov	r24, r24
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a9 01       	movw	r20, r18
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <DIO_VidGetPinValue+0xb6>
    1c42:	55 95       	asr	r21
    1c44:	47 95       	ror	r20
    1c46:	8a 95       	dec	r24
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <DIO_VidGetPinValue+0xb2>
    1c4a:	ca 01       	movw	r24, r20
    1c4c:	58 2f       	mov	r21, r24
    1c4e:	51 70       	andi	r21, 0x01	; 1
    1c50:	5b 83       	std	Y+3, r21	; 0x03
    1c52:	14 c0       	rjmp	.+40     	; 0x1c7c <DIO_VidGetPinValue+0xec>
		break;

	case Port_D:
		return GET_BIT(PIND, pin);
    1c54:	e0 e3       	ldi	r30, 0x30	; 48
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a9 01       	movw	r20, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_VidGetPinValue+0xdc>
    1c68:	55 95       	asr	r21
    1c6a:	47 95       	ror	r20
    1c6c:	8a 95       	dec	r24
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <DIO_VidGetPinValue+0xd8>
    1c70:	ca 01       	movw	r24, r20
    1c72:	58 2f       	mov	r21, r24
    1c74:	51 70       	andi	r21, 0x01	; 1
    1c76:	5b 83       	std	Y+3, r21	; 0x03
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <DIO_VidGetPinValue+0xec>
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <DIO_VidGetPinValue+0xf0>
		break;
	default:
		break;
	}
}
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	8e 83       	std	Y+6, r24	; 0x06
    1c80:	8e 81       	ldd	r24, Y+6	; 0x06
    1c82:	26 96       	adiw	r28, 0x06	; 6
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <ADC_VidInit>:
#include "ADC_private.h"
#include "ADC_config.h"
#include "ADC_interface.h"

void ADC_VidInit(u8 Copy_u8RefVoltage, u8 Copy_u8PreScalar)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <ADC_VidInit+0x6>
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	6a 83       	std	Y+2, r22	; 0x02
   // SET REFERENCE VOLTAGE
   ADMUX &= 0b00011111;
    1ca2:	a7 e2       	ldi	r26, 0x27	; 39
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e7 e2       	ldi	r30, 0x27	; 39
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	8f 71       	andi	r24, 0x1F	; 31
    1cae:	8c 93       	st	X, r24
   ADMUX |= Copy_u8RefVoltage;
    1cb0:	a7 e2       	ldi	r26, 0x27	; 39
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e7 e2       	ldi	r30, 0x27	; 39
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	90 81       	ld	r25, Z
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	89 2b       	or	r24, r25
    1cbe:	8c 93       	st	X, r24
   // SET CLOCK DIVISION FACTOR
   ADCSRA &= 0b11111000;
    1cc0:	a6 e2       	ldi	r26, 0x26	; 38
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e6 e2       	ldi	r30, 0x26	; 38
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 7f       	andi	r24, 0xF8	; 248
    1ccc:	8c 93       	st	X, r24
   ADCSRA |= Copy_u8PreScalar;
    1cce:	a6 e2       	ldi	r26, 0x26	; 38
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e6 e2       	ldi	r30, 0x26	; 38
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	90 81       	ld	r25, Z
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	89 2b       	or	r24, r25
    1cdc:	8c 93       	st	X, r24
   // CLEAR LEFT ADJUSTMENT
   CLR_BIT(ADMUX, ADMUX_ADLAR);
    1cde:	a7 e2       	ldi	r26, 0x27	; 39
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e7 e2       	ldi	r30, 0x27	; 39
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8f 7d       	andi	r24, 0xDF	; 223
    1cea:	8c 93       	st	X, r24
   // ENABLE ADC
   SET_BIT(ADCSRA, ADCSRA_ADEN);
    1cec:	a6 e2       	ldi	r26, 0x26	; 38
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e6 e2       	ldi	r30, 0x26	; 38
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	80 68       	ori	r24, 0x80	; 128
    1cf8:	8c 93       	st	X, r24
}
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <ADC_u16ReadChannel>:

u16 ADC_u16ReadChannel(u8 Copy_u8Channel)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	0f 92       	push	r0
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	89 83       	std	Y+1, r24	; 0x01
   // SET ADC CHANNEL
   ADMUX &= 0b11110000;
    1d10:	a7 e2       	ldi	r26, 0x27	; 39
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e7 e2       	ldi	r30, 0x27	; 39
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 7f       	andi	r24, 0xF0	; 240
    1d1c:	8c 93       	st	X, r24
   ADMUX |= Copy_u8Channel;
    1d1e:	a7 e2       	ldi	r26, 0x27	; 39
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e7 e2       	ldi	r30, 0x27	; 39
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	90 81       	ld	r25, Z
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	89 2b       	or	r24, r25
    1d2c:	8c 93       	st	X, r24
   // START ADC CONVERSION
   SET_BIT(ADCSRA, ADCSRA_ADSC);
    1d2e:	a6 e2       	ldi	r26, 0x26	; 38
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e6 e2       	ldi	r30, 0x26	; 38
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	80 64       	ori	r24, 0x40	; 64
    1d3a:	8c 93       	st	X, r24
   // POLL UNTIL CONVERSION IS COMPLETE
   while (GET_BIT(ADCSRA, ADCSRA_ADSC))
    1d3c:	e6 e2       	ldi	r30, 0x26	; 38
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	82 95       	swap	r24
    1d44:	86 95       	lsr	r24
    1d46:	86 95       	lsr	r24
    1d48:	83 70       	andi	r24, 0x03	; 3
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	81 70       	andi	r24, 0x01	; 1
    1d50:	90 70       	andi	r25, 0x00	; 0
    1d52:	88 23       	and	r24, r24
    1d54:	99 f7       	brne	.-26     	; 0x1d3c <ADC_u16ReadChannel+0x38>
      ;

   return ADC;
    1d56:	e4 e2       	ldi	r30, 0x24	; 36
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <ADC_VidEnableInterrupt>:

void ADC_VidEnableInterrupt(u8 Copy_u8Channel)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	0f 92       	push	r0
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	89 83       	std	Y+1, r24	; 0x01
   // SET ADC CHANNEL
   ADMUX &= 0xF0;
    1d72:	a7 e2       	ldi	r26, 0x27	; 39
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e7 e2       	ldi	r30, 0x27	; 39
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	80 7f       	andi	r24, 0xF0	; 240
    1d7e:	8c 93       	st	X, r24
   ADMUX |= Copy_u8Channel;
    1d80:	a7 e2       	ldi	r26, 0x27	; 39
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e7 e2       	ldi	r30, 0x27	; 39
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	90 81       	ld	r25, Z
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	89 2b       	or	r24, r25
    1d8e:	8c 93       	st	X, r24

   // ENABLE ADC INTERRUPT
   SET_BIT(ADCSRA, ADCSRA_ADIE);
    1d90:	a6 e2       	ldi	r26, 0x26	; 38
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e6 e2       	ldi	r30, 0x26	; 38
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	88 60       	ori	r24, 0x08	; 8
    1d9c:	8c 93       	st	X, r24
   
   // START ADC CONVERSION
   SET_BIT(ADCSRA, ADCSRA_ADSC);
    1d9e:	a6 e2       	ldi	r26, 0x26	; 38
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e6 e2       	ldi	r30, 0x26	; 38
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	80 64       	ori	r24, 0x40	; 64
    1daa:	8c 93       	st	X, r24
   
}
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <__udivmodhi4>:
    1db4:	aa 1b       	sub	r26, r26
    1db6:	bb 1b       	sub	r27, r27
    1db8:	51 e1       	ldi	r21, 0x11	; 17
    1dba:	07 c0       	rjmp	.+14     	; 0x1dca <__udivmodhi4_ep>

00001dbc <__udivmodhi4_loop>:
    1dbc:	aa 1f       	adc	r26, r26
    1dbe:	bb 1f       	adc	r27, r27
    1dc0:	a6 17       	cp	r26, r22
    1dc2:	b7 07       	cpc	r27, r23
    1dc4:	10 f0       	brcs	.+4      	; 0x1dca <__udivmodhi4_ep>
    1dc6:	a6 1b       	sub	r26, r22
    1dc8:	b7 0b       	sbc	r27, r23

00001dca <__udivmodhi4_ep>:
    1dca:	88 1f       	adc	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	5a 95       	dec	r21
    1dd0:	a9 f7       	brne	.-22     	; 0x1dbc <__udivmodhi4_loop>
    1dd2:	80 95       	com	r24
    1dd4:	90 95       	com	r25
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	08 95       	ret

00001ddc <__prologue_saves__>:
    1ddc:	2f 92       	push	r2
    1dde:	3f 92       	push	r3
    1de0:	4f 92       	push	r4
    1de2:	5f 92       	push	r5
    1de4:	6f 92       	push	r6
    1de6:	7f 92       	push	r7
    1de8:	8f 92       	push	r8
    1dea:	9f 92       	push	r9
    1dec:	af 92       	push	r10
    1dee:	bf 92       	push	r11
    1df0:	cf 92       	push	r12
    1df2:	df 92       	push	r13
    1df4:	ef 92       	push	r14
    1df6:	ff 92       	push	r15
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	ca 1b       	sub	r28, r26
    1e06:	db 0b       	sbc	r29, r27
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	09 94       	ijmp

00001e14 <__epilogue_restores__>:
    1e14:	2a 88       	ldd	r2, Y+18	; 0x12
    1e16:	39 88       	ldd	r3, Y+17	; 0x11
    1e18:	48 88       	ldd	r4, Y+16	; 0x10
    1e1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e20:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e22:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e24:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e26:	b9 84       	ldd	r11, Y+9	; 0x09
    1e28:	c8 84       	ldd	r12, Y+8	; 0x08
    1e2a:	df 80       	ldd	r13, Y+7	; 0x07
    1e2c:	ee 80       	ldd	r14, Y+6	; 0x06
    1e2e:	fd 80       	ldd	r15, Y+5	; 0x05
    1e30:	0c 81       	ldd	r16, Y+4	; 0x04
    1e32:	1b 81       	ldd	r17, Y+3	; 0x03
    1e34:	aa 81       	ldd	r26, Y+2	; 0x02
    1e36:	b9 81       	ldd	r27, Y+1	; 0x01
    1e38:	ce 0f       	add	r28, r30
    1e3a:	d1 1d       	adc	r29, r1
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	ed 01       	movw	r28, r26
    1e48:	08 95       	ret

00001e4a <round>:
    1e4a:	50 d0       	rcall	.+160    	; 0x1eec <__fp_splitA>
    1e4c:	e0 f0       	brcs	.+56     	; 0x1e86 <round+0x3c>
    1e4e:	9e 37       	cpi	r25, 0x7E	; 126
    1e50:	d8 f0       	brcs	.+54     	; 0x1e88 <round+0x3e>
    1e52:	96 39       	cpi	r25, 0x96	; 150
    1e54:	b8 f4       	brcc	.+46     	; 0x1e84 <round+0x3a>
    1e56:	9e 38       	cpi	r25, 0x8E	; 142
    1e58:	48 f4       	brcc	.+18     	; 0x1e6c <round+0x22>
    1e5a:	67 2f       	mov	r22, r23
    1e5c:	78 2f       	mov	r23, r24
    1e5e:	88 27       	eor	r24, r24
    1e60:	98 5f       	subi	r25, 0xF8	; 248
    1e62:	f9 cf       	rjmp	.-14     	; 0x1e56 <round+0xc>
    1e64:	86 95       	lsr	r24
    1e66:	77 95       	ror	r23
    1e68:	67 95       	ror	r22
    1e6a:	93 95       	inc	r25
    1e6c:	95 39       	cpi	r25, 0x95	; 149
    1e6e:	d0 f3       	brcs	.-12     	; 0x1e64 <round+0x1a>
    1e70:	b6 2f       	mov	r27, r22
    1e72:	b1 70       	andi	r27, 0x01	; 1
    1e74:	6b 0f       	add	r22, r27
    1e76:	71 1d       	adc	r23, r1
    1e78:	81 1d       	adc	r24, r1
    1e7a:	20 f4       	brcc	.+8      	; 0x1e84 <round+0x3a>
    1e7c:	87 95       	ror	r24
    1e7e:	77 95       	ror	r23
    1e80:	67 95       	ror	r22
    1e82:	93 95       	inc	r25
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <__fp_mintl>
    1e86:	1c c0       	rjmp	.+56     	; 0x1ec0 <__fp_mpack>
    1e88:	4c c0       	rjmp	.+152    	; 0x1f22 <__fp_szero>

00001e8a <__fp_mintl>:
    1e8a:	88 23       	and	r24, r24
    1e8c:	71 f4       	brne	.+28     	; 0x1eaa <__fp_mintl+0x20>
    1e8e:	77 23       	and	r23, r23
    1e90:	21 f0       	breq	.+8      	; 0x1e9a <__fp_mintl+0x10>
    1e92:	98 50       	subi	r25, 0x08	; 8
    1e94:	87 2b       	or	r24, r23
    1e96:	76 2f       	mov	r23, r22
    1e98:	07 c0       	rjmp	.+14     	; 0x1ea8 <__fp_mintl+0x1e>
    1e9a:	66 23       	and	r22, r22
    1e9c:	11 f4       	brne	.+4      	; 0x1ea2 <__fp_mintl+0x18>
    1e9e:	99 27       	eor	r25, r25
    1ea0:	0d c0       	rjmp	.+26     	; 0x1ebc <__fp_mintl+0x32>
    1ea2:	90 51       	subi	r25, 0x10	; 16
    1ea4:	86 2b       	or	r24, r22
    1ea6:	70 e0       	ldi	r23, 0x00	; 0
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	2a f0       	brmi	.+10     	; 0x1eb6 <__fp_mintl+0x2c>
    1eac:	9a 95       	dec	r25
    1eae:	66 0f       	add	r22, r22
    1eb0:	77 1f       	adc	r23, r23
    1eb2:	88 1f       	adc	r24, r24
    1eb4:	da f7       	brpl	.-10     	; 0x1eac <__fp_mintl+0x22>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	96 95       	lsr	r25
    1eba:	87 95       	ror	r24
    1ebc:	97 f9       	bld	r25, 7
    1ebe:	08 95       	ret

00001ec0 <__fp_mpack>:
    1ec0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ec2:	31 f0       	breq	.+12     	; 0x1ed0 <__fp_mpack_finite+0xc>

00001ec4 <__fp_mpack_finite>:
    1ec4:	91 50       	subi	r25, 0x01	; 1
    1ec6:	20 f4       	brcc	.+8      	; 0x1ed0 <__fp_mpack_finite+0xc>
    1ec8:	87 95       	ror	r24
    1eca:	77 95       	ror	r23
    1ecc:	67 95       	ror	r22
    1ece:	b7 95       	ror	r27
    1ed0:	88 0f       	add	r24, r24
    1ed2:	91 1d       	adc	r25, r1
    1ed4:	96 95       	lsr	r25
    1ed6:	87 95       	ror	r24
    1ed8:	97 f9       	bld	r25, 7
    1eda:	08 95       	ret

00001edc <__fp_split3>:
    1edc:	57 fd       	sbrc	r21, 7
    1ede:	90 58       	subi	r25, 0x80	; 128
    1ee0:	44 0f       	add	r20, r20
    1ee2:	55 1f       	adc	r21, r21
    1ee4:	59 f0       	breq	.+22     	; 0x1efc <__fp_splitA+0x10>
    1ee6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee8:	71 f0       	breq	.+28     	; 0x1f06 <__fp_splitA+0x1a>
    1eea:	47 95       	ror	r20

00001eec <__fp_splitA>:
    1eec:	88 0f       	add	r24, r24
    1eee:	97 fb       	bst	r25, 7
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	61 f0       	breq	.+24     	; 0x1f0c <__fp_splitA+0x20>
    1ef4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ef6:	79 f0       	breq	.+30     	; 0x1f16 <__fp_splitA+0x2a>
    1ef8:	87 95       	ror	r24
    1efa:	08 95       	ret
    1efc:	12 16       	cp	r1, r18
    1efe:	13 06       	cpc	r1, r19
    1f00:	14 06       	cpc	r1, r20
    1f02:	55 1f       	adc	r21, r21
    1f04:	f2 cf       	rjmp	.-28     	; 0x1eea <__fp_split3+0xe>
    1f06:	46 95       	lsr	r20
    1f08:	f1 df       	rcall	.-30     	; 0x1eec <__fp_splitA>
    1f0a:	08 c0       	rjmp	.+16     	; 0x1f1c <__fp_splitA+0x30>
    1f0c:	16 16       	cp	r1, r22
    1f0e:	17 06       	cpc	r1, r23
    1f10:	18 06       	cpc	r1, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	f1 cf       	rjmp	.-30     	; 0x1ef8 <__fp_splitA+0xc>
    1f16:	86 95       	lsr	r24
    1f18:	71 05       	cpc	r23, r1
    1f1a:	61 05       	cpc	r22, r1
    1f1c:	08 94       	sec
    1f1e:	08 95       	ret

00001f20 <__fp_zero>:
    1f20:	e8 94       	clt

00001f22 <__fp_szero>:
    1f22:	bb 27       	eor	r27, r27
    1f24:	66 27       	eor	r22, r22
    1f26:	77 27       	eor	r23, r23
    1f28:	cb 01       	movw	r24, r22
    1f2a:	97 f9       	bld	r25, 7
    1f2c:	08 95       	ret

00001f2e <_exit>:
    1f2e:	f8 94       	cli

00001f30 <__stop_program>:
    1f30:	ff cf       	rjmp	.-2      	; 0x1f30 <__stop_program>
