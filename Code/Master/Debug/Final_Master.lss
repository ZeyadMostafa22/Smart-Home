
Final_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007922  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002f0  00800060  00007922  00007996  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000056c4  00000000  00000000  00007c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000129c  00000000  00000000  0000d34c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  0000e788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  0000e978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  00010d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  000120fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  000132d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  00013494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  00013787  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00014155  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f9 e7       	ldi	r31, 0x79	; 121
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f4 06 	call	0xde8	; 0xde8 <main>
      7a:	0c 94 8f 3c 	jmp	0x791e	; 0x791e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 13 3c 	jmp	0x7826	; 0x7826 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e3       	ldi	r26, 0x30	; 48
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 2f 3c 	jmp	0x785e	; 0x785e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 1f 3c 	jmp	0x783e	; 0x783e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3b 3c 	jmp	0x7876	; 0x7876 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 1f 3c 	jmp	0x783e	; 0x783e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3b 3c 	jmp	0x7876	; 0x7876 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 13 3c 	jmp	0x7826	; 0x7826 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e3       	ldi	r24, 0x30	; 48
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 2f 3c 	jmp	0x785e	; 0x785e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1b 3c 	jmp	0x7836	; 0x7836 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e3       	ldi	r22, 0x30	; 48
     68c:	72 e0       	ldi	r23, 0x02	; 2
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 37 3c 	jmp	0x786e	; 0x786e <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 1f 3c 	jmp	0x783e	; 0x783e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 3b 3c 	jmp	0x7876	; 0x7876 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 1f 3c 	jmp	0x783e	; 0x783e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 3b 3c 	jmp	0x7876	; 0x7876 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 1f 3c 	jmp	0x783e	; 0x783e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 3b 3c 	jmp	0x7876	; 0x7876 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 1c 3c 	jmp	0x7838	; 0x7838 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 38 3c 	jmp	0x7870	; 0x7870 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 23 3c 	jmp	0x7846	; 0x7846 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 3f 3c 	jmp	0x787e	; 0x787e <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	e8 5c       	subi	r30, 0xC8	; 200
     a84:	fd 4f       	sbci	r31, 0xFD	; 253
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <main>:
#define LED_CLOSE_DOOR Pin2

void WaitForKey(u8 *PtrKeyPressed);

int main()
{
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	cb 52       	subi	r28, 0x2B	; 43
     df6:	d2 40       	sbci	r29, 0x02	; 2
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
    // inti
    TWI_init();
     e02:	0e 94 39 27 	call	0x4e72	; 0x4e72 <TWI_init>
    KPD_VidInit();
     e06:	0e 94 45 3b 	call	0x768a	; 0x768a <KPD_VidInit>
    LCD_VidInit();
     e0a:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_VidInit>
    UART_VidInit();
     e0e:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <UART_VidInit>

    DIO_VidSetPinDirection(LED_PORT, LED_BLOCK, Output); // Led Block
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	41 e0       	ldi	r20, 0x01	; 1
     e18:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
    DIO_VidSetPinDirection(LED_PORT, LED_OPEN_DOOR, Output); // Led Open Door
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
    DIO_VidSetPinDirection(LED_PORT, LED_CLOSE_DOOR, Output); // Led Close Door
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	62 e0       	ldi	r22, 0x02	; 2
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
    // Clear Leds
    DIO_VidSetPinValue(LED_PORT, LED_BLOCK, PinLow);
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    DIO_VidSetPinValue(LED_PORT, LED_OPEN_DOOR, PinLow);
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    // Close Door
    DIO_VidSetPinValue(LED_PORT, LED_CLOSE_DOOR, PinHigh);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	62 e0       	ldi	r22, 0x02	; 2
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>

    u8 Local_u8ShowMenu = MAIN_MENU;
     e4e:	fe 01       	movw	r30, r28
     e50:	e3 5e       	subi	r30, 0xE3	; 227
     e52:	fd 4f       	sbci	r31, 0xFD	; 253
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	80 83       	st	Z, r24
    u8 Local_u8KeyPressed = NOT_PRESSED;
     e58:	fe 01       	movw	r30, r28
     e5a:	e2 5e       	subi	r30, 0xE2	; 226
     e5c:	fd 4f       	sbci	r31, 0xFD	; 253
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	80 83       	st	Z, r24
    u8 Local_u8Response = DEMAND_RESPONSE;
     e62:	fe 01       	movw	r30, r28
     e64:	e4 5e       	subi	r30, 0xE4	; 228
     e66:	fd 4f       	sbci	r31, 0xFD	; 253
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	80 83       	st	Z, r24
    u8 Local_u8Chooser = ROOM1;
     e6c:	fe 01       	movw	r30, r28
     e6e:	e5 5e       	subi	r30, 0xE5	; 229
     e70:	fd 4f       	sbci	r31, 0xFD	; 253
     e72:	10 82       	st	Z, r1
    u8 Local_u8Tens = 0;
     e74:	fe 01       	movw	r30, r28
     e76:	e6 5e       	subi	r30, 0xE6	; 230
     e78:	fd 4f       	sbci	r31, 0xFD	; 253
     e7a:	10 82       	st	Z, r1
    u8 Local_u8Ones = 0;
     e7c:	fe 01       	movw	r30, r28
     e7e:	e7 5e       	subi	r30, 0xE7	; 231
     e80:	fd 4f       	sbci	r31, 0xFD	; 253
     e82:	10 82       	st	Z, r1
    u8 Local_u8Temperature = 0;
     e84:	fe 01       	movw	r30, r28
     e86:	e8 5e       	subi	r30, 0xE8	; 232
     e88:	fd 4f       	sbci	r31, 0xFD	; 253
     e8a:	10 82       	st	Z, r1

    u8 Pass[PASS_SIZE] = {NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED};
     e8c:	fe 01       	movw	r30, r28
     e8e:	e1 5e       	subi	r30, 0xE1	; 225
     e90:	fd 4f       	sbci	r31, 0xFD	; 253
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	80 83       	st	Z, r24
     e96:	fe 01       	movw	r30, r28
     e98:	e1 5e       	subi	r30, 0xE1	; 225
     e9a:	fd 4f       	sbci	r31, 0xFD	; 253
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	81 83       	std	Z+1, r24	; 0x01
     ea0:	fe 01       	movw	r30, r28
     ea2:	e1 5e       	subi	r30, 0xE1	; 225
     ea4:	fd 4f       	sbci	r31, 0xFD	; 253
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	82 83       	std	Z+2, r24	; 0x02
     eaa:	fe 01       	movw	r30, r28
     eac:	e1 5e       	subi	r30, 0xE1	; 225
     eae:	fd 4f       	sbci	r31, 0xFD	; 253
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	83 83       	std	Z+3, r24	; 0x03
    u8 Entered_Pass[PASS_SIZE] = {NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED};
     eb4:	fe 01       	movw	r30, r28
     eb6:	ed 5d       	subi	r30, 0xDD	; 221
     eb8:	fd 4f       	sbci	r31, 0xFD	; 253
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	80 83       	st	Z, r24
     ebe:	fe 01       	movw	r30, r28
     ec0:	ed 5d       	subi	r30, 0xDD	; 221
     ec2:	fd 4f       	sbci	r31, 0xFD	; 253
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	81 83       	std	Z+1, r24	; 0x01
     ec8:	fe 01       	movw	r30, r28
     eca:	ed 5d       	subi	r30, 0xDD	; 221
     ecc:	fd 4f       	sbci	r31, 0xFD	; 253
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	82 83       	std	Z+2, r24	; 0x02
     ed2:	fe 01       	movw	r30, r28
     ed4:	ed 5d       	subi	r30, 0xDD	; 221
     ed6:	fd 4f       	sbci	r31, 0xFD	; 253
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	83 83       	std	Z+3, r24	; 0x03
    u8 Pass_Match = TRUE;
     edc:	fe 01       	movw	r30, r28
     ede:	e9 5e       	subi	r30, 0xE9	; 233
     ee0:	fd 4f       	sbci	r31, 0xFD	; 253
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	80 83       	st	Z, r24
    u8 Pass_Counter;
    u8 Block_Mode_Flag = FALSE;
     ee6:	fe 01       	movw	r30, r28
     ee8:	e9 5d       	subi	r30, 0xD9	; 217
     eea:	fd 4f       	sbci	r31, 0xFD	; 253
     eec:	10 82       	st	Z, r1
    u8 User_Status = 0;
     eee:	fe 01       	movw	r30, r28
     ef0:	e8 5d       	subi	r30, 0xD8	; 216
     ef2:	fd 4f       	sbci	r31, 0xFD	; 253
     ef4:	10 82       	st	Z, r1
    u8 pass_tries_count = 0;
     ef6:	fe 01       	movw	r30, r28
     ef8:	eb 5e       	subi	r30, 0xEB	; 235
     efa:	fd 4f       	sbci	r31, 0xFD	; 253
     efc:	10 82       	st	Z, r1

    
    // Welcome Screen
    LCD_VidSendString_XY("Welcome To", 0, 3);
     efe:	80 e6       	ldi	r24, 0x60	; 96
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	43 e0       	ldi	r20, 0x03	; 3
     f06:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    LCD_VidSendString_XY("Smart Home", 1, 3);
     f0a:	8b e6       	ldi	r24, 0x6B	; 107
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	43 e0       	ldi	r20, 0x03	; 3
     f12:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
     f16:	fe 01       	movw	r30, r28
     f18:	ef 5e       	subi	r30, 0xEF	; 239
     f1a:	fd 4f       	sbci	r31, 0xFD	; 253
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	aa e7       	ldi	r26, 0x7A	; 122
     f22:	b4 e4       	ldi	r27, 0x44	; 68
     f24:	80 83       	st	Z, r24
     f26:	91 83       	std	Z+1, r25	; 0x01
     f28:	a2 83       	std	Z+2, r26	; 0x02
     f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2c:	8e 01       	movw	r16, r28
     f2e:	03 5f       	subi	r16, 0xF3	; 243
     f30:	1d 4f       	sbci	r17, 0xFD	; 253
     f32:	fe 01       	movw	r30, r28
     f34:	ef 5e       	subi	r30, 0xEF	; 239
     f36:	fd 4f       	sbci	r31, 0xFD	; 253
     f38:	60 81       	ld	r22, Z
     f3a:	71 81       	ldd	r23, Z+1	; 0x01
     f3c:	82 81       	ldd	r24, Z+2	; 0x02
     f3e:	93 81       	ldd	r25, Z+3	; 0x03
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	4a ef       	ldi	r20, 0xFA	; 250
     f46:	54 e4       	ldi	r21, 0x44	; 68
     f48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	f8 01       	movw	r30, r16
     f52:	80 83       	st	Z, r24
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	a2 83       	std	Z+2, r26	; 0x02
     f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f5a:	fe 01       	movw	r30, r28
     f5c:	e3 5f       	subi	r30, 0xF3	; 243
     f5e:	fd 4f       	sbci	r31, 0xFD	; 253
     f60:	60 81       	ld	r22, Z
     f62:	71 81       	ldd	r23, Z+1	; 0x01
     f64:	82 81       	ldd	r24, Z+2	; 0x02
     f66:	93 81       	ldd	r25, Z+3	; 0x03
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e8       	ldi	r20, 0x80	; 128
     f6e:	5f e3       	ldi	r21, 0x3F	; 63
     f70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f74:	88 23       	and	r24, r24
     f76:	44 f4       	brge	.+16     	; 0xf88 <main+0x1a0>
		__ticks = 1;
     f78:	fe 01       	movw	r30, r28
     f7a:	e5 5f       	subi	r30, 0xF5	; 245
     f7c:	fd 4f       	sbci	r31, 0xFD	; 253
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	91 83       	std	Z+1, r25	; 0x01
     f84:	80 83       	st	Z, r24
     f86:	64 c0       	rjmp	.+200    	; 0x1050 <main+0x268>
	else if (__tmp > 65535)
     f88:	fe 01       	movw	r30, r28
     f8a:	e3 5f       	subi	r30, 0xF3	; 243
     f8c:	fd 4f       	sbci	r31, 0xFD	; 253
     f8e:	60 81       	ld	r22, Z
     f90:	71 81       	ldd	r23, Z+1	; 0x01
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	3f ef       	ldi	r19, 0xFF	; 255
     f9a:	4f e7       	ldi	r20, 0x7F	; 127
     f9c:	57 e4       	ldi	r21, 0x47	; 71
     f9e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fa2:	18 16       	cp	r1, r24
     fa4:	0c f0       	brlt	.+2      	; 0xfa8 <main+0x1c0>
     fa6:	43 c0       	rjmp	.+134    	; 0x102e <main+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa8:	fe 01       	movw	r30, r28
     faa:	ef 5e       	subi	r30, 0xEF	; 239
     fac:	fd 4f       	sbci	r31, 0xFD	; 253
     fae:	60 81       	ld	r22, Z
     fb0:	71 81       	ldd	r23, Z+1	; 0x01
     fb2:	82 81       	ldd	r24, Z+2	; 0x02
     fb4:	93 81       	ldd	r25, Z+3	; 0x03
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	51 e4       	ldi	r21, 0x41	; 65
     fbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	8e 01       	movw	r16, r28
     fc8:	05 5f       	subi	r16, 0xF5	; 245
     fca:	1d 4f       	sbci	r17, 0xFD	; 253
     fcc:	bc 01       	movw	r22, r24
     fce:	cd 01       	movw	r24, r26
     fd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	f8 01       	movw	r30, r16
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	80 83       	st	Z, r24
     fde:	1f c0       	rjmp	.+62     	; 0x101e <main+0x236>
     fe0:	fe 01       	movw	r30, r28
     fe2:	e7 5f       	subi	r30, 0xF7	; 247
     fe4:	fd 4f       	sbci	r31, 0xFD	; 253
     fe6:	88 ec       	ldi	r24, 0xC8	; 200
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fee:	fe 01       	movw	r30, r28
     ff0:	e7 5f       	subi	r30, 0xF7	; 247
     ff2:	fd 4f       	sbci	r31, 0xFD	; 253
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <main+0x210>
     ffc:	fe 01       	movw	r30, r28
     ffe:	e7 5f       	subi	r30, 0xF7	; 247
    1000:	fd 4f       	sbci	r31, 0xFD	; 253
    1002:	91 83       	std	Z+1, r25	; 0x01
    1004:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1006:	de 01       	movw	r26, r28
    1008:	a5 5f       	subi	r26, 0xF5	; 245
    100a:	bd 4f       	sbci	r27, 0xFD	; 253
    100c:	fe 01       	movw	r30, r28
    100e:	e5 5f       	subi	r30, 0xF5	; 245
    1010:	fd 4f       	sbci	r31, 0xFD	; 253
    1012:	80 81       	ld	r24, Z
    1014:	91 81       	ldd	r25, Z+1	; 0x01
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	11 96       	adiw	r26, 0x01	; 1
    101a:	9c 93       	st	X, r25
    101c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	fe 01       	movw	r30, r28
    1020:	e5 5f       	subi	r30, 0xF5	; 245
    1022:	fd 4f       	sbci	r31, 0xFD	; 253
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	d1 f6       	brne	.-76     	; 0xfe0 <main+0x1f8>
    102c:	27 c0       	rjmp	.+78     	; 0x107c <main+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102e:	8e 01       	movw	r16, r28
    1030:	05 5f       	subi	r16, 0xF5	; 245
    1032:	1d 4f       	sbci	r17, 0xFD	; 253
    1034:	fe 01       	movw	r30, r28
    1036:	e3 5f       	subi	r30, 0xF3	; 243
    1038:	fd 4f       	sbci	r31, 0xFD	; 253
    103a:	60 81       	ld	r22, Z
    103c:	71 81       	ldd	r23, Z+1	; 0x01
    103e:	82 81       	ldd	r24, Z+2	; 0x02
    1040:	93 81       	ldd	r25, Z+3	; 0x03
    1042:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	f8 01       	movw	r30, r16
    104c:	91 83       	std	Z+1, r25	; 0x01
    104e:	80 83       	st	Z, r24
    1050:	de 01       	movw	r26, r28
    1052:	a9 5f       	subi	r26, 0xF9	; 249
    1054:	bd 4f       	sbci	r27, 0xFD	; 253
    1056:	fe 01       	movw	r30, r28
    1058:	e5 5f       	subi	r30, 0xF5	; 245
    105a:	fd 4f       	sbci	r31, 0xFD	; 253
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	8d 93       	st	X+, r24
    1062:	9c 93       	st	X, r25
    1064:	fe 01       	movw	r30, r28
    1066:	e9 5f       	subi	r30, 0xF9	; 249
    1068:	fd 4f       	sbci	r31, 0xFD	; 253
    106a:	80 81       	ld	r24, Z
    106c:	91 81       	ldd	r25, Z+1	; 0x01
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <main+0x286>
    1072:	fe 01       	movw	r30, r28
    1074:	e9 5f       	subi	r30, 0xF9	; 249
    1076:	fd 4f       	sbci	r31, 0xFD	; 253
    1078:	91 83       	std	Z+1, r25	; 0x01
    107a:	80 83       	st	Z, r24
    _delay_ms(DEFUALT_DELAY_TIME * 5);
    LCD_VidClearScreen();
    107c:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>

    // // Set Pass
    EEPROM_readByte(USER_PASS_STATUS_ADDRESS, &User_Status);
    1080:	9e 01       	movw	r18, r28
    1082:	28 5d       	subi	r18, 0xD8	; 216
    1084:	3d 4f       	sbci	r19, 0xFD	; 253
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	b9 01       	movw	r22, r18
    108c:	0e 94 f7 27 	call	0x4fee	; 0x4fee <EEPROM_readByte>
    if (User_Status != PASS_SET)
    1090:	fe 01       	movw	r30, r28
    1092:	e8 5d       	subi	r30, 0xD8	; 216
    1094:	fd 4f       	sbci	r31, 0xFD	; 253
    1096:	80 81       	ld	r24, Z
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	09 f4       	brne	.+2      	; 0x109e <main+0x2b6>
    109c:	a4 c2       	rjmp	.+1352   	; 0x15e6 <main+0x7fe>
    {
        LCD_VidSendString_XY("Login To System", 0, 0);
    109e:	86 e7       	ldi	r24, 0x76	; 118
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
        LCD_VidSendString_XY("For First Time", 1, 0);
    10aa:	86 e8       	ldi	r24, 0x86	; 134
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    10b6:	fe 01       	movw	r30, r28
    10b8:	ed 5f       	subi	r30, 0xFD	; 253
    10ba:	fd 4f       	sbci	r31, 0xFD	; 253
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a8 e4       	ldi	r26, 0x48	; 72
    10c2:	b4 e4       	ldi	r27, 0x44	; 68
    10c4:	80 83       	st	Z, r24
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	a2 83       	std	Z+2, r26	; 0x02
    10ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10cc:	8e 01       	movw	r16, r28
    10ce:	01 50       	subi	r16, 0x01	; 1
    10d0:	1e 4f       	sbci	r17, 0xFE	; 254
    10d2:	fe 01       	movw	r30, r28
    10d4:	ed 5f       	subi	r30, 0xFD	; 253
    10d6:	fd 4f       	sbci	r31, 0xFD	; 253
    10d8:	60 81       	ld	r22, Z
    10da:	71 81       	ldd	r23, Z+1	; 0x01
    10dc:	82 81       	ldd	r24, Z+2	; 0x02
    10de:	93 81       	ldd	r25, Z+3	; 0x03
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	4a ef       	ldi	r20, 0xFA	; 250
    10e6:	54 e4       	ldi	r21, 0x44	; 68
    10e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	f8 01       	movw	r30, r16
    10f2:	80 83       	st	Z, r24
    10f4:	91 83       	std	Z+1, r25	; 0x01
    10f6:	a2 83       	std	Z+2, r26	; 0x02
    10f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10fa:	fe 01       	movw	r30, r28
    10fc:	e1 50       	subi	r30, 0x01	; 1
    10fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1100:	60 81       	ld	r22, Z
    1102:	71 81       	ldd	r23, Z+1	; 0x01
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	93 81       	ldd	r25, Z+3	; 0x03
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e8       	ldi	r20, 0x80	; 128
    110e:	5f e3       	ldi	r21, 0x3F	; 63
    1110:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1114:	88 23       	and	r24, r24
    1116:	44 f4       	brge	.+16     	; 0x1128 <main+0x340>
		__ticks = 1;
    1118:	fe 01       	movw	r30, r28
    111a:	e3 50       	subi	r30, 0x03	; 3
    111c:	fe 4f       	sbci	r31, 0xFE	; 254
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	91 83       	std	Z+1, r25	; 0x01
    1124:	80 83       	st	Z, r24
    1126:	64 c0       	rjmp	.+200    	; 0x11f0 <main+0x408>
	else if (__tmp > 65535)
    1128:	fe 01       	movw	r30, r28
    112a:	e1 50       	subi	r30, 0x01	; 1
    112c:	fe 4f       	sbci	r31, 0xFE	; 254
    112e:	60 81       	ld	r22, Z
    1130:	71 81       	ldd	r23, Z+1	; 0x01
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	93 81       	ldd	r25, Z+3	; 0x03
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	3f ef       	ldi	r19, 0xFF	; 255
    113a:	4f e7       	ldi	r20, 0x7F	; 127
    113c:	57 e4       	ldi	r21, 0x47	; 71
    113e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1142:	18 16       	cp	r1, r24
    1144:	0c f0       	brlt	.+2      	; 0x1148 <main+0x360>
    1146:	43 c0       	rjmp	.+134    	; 0x11ce <main+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1148:	fe 01       	movw	r30, r28
    114a:	ed 5f       	subi	r30, 0xFD	; 253
    114c:	fd 4f       	sbci	r31, 0xFD	; 253
    114e:	60 81       	ld	r22, Z
    1150:	71 81       	ldd	r23, Z+1	; 0x01
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	93 81       	ldd	r25, Z+3	; 0x03
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e2       	ldi	r20, 0x20	; 32
    115c:	51 e4       	ldi	r21, 0x41	; 65
    115e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	8e 01       	movw	r16, r28
    1168:	03 50       	subi	r16, 0x03	; 3
    116a:	1e 4f       	sbci	r17, 0xFE	; 254
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	f8 01       	movw	r30, r16
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	80 83       	st	Z, r24
    117e:	1f c0       	rjmp	.+62     	; 0x11be <main+0x3d6>
    1180:	fe 01       	movw	r30, r28
    1182:	e5 50       	subi	r30, 0x05	; 5
    1184:	fe 4f       	sbci	r31, 0xFE	; 254
    1186:	88 ec       	ldi	r24, 0xC8	; 200
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	80 83       	st	Z, r24
    118e:	fe 01       	movw	r30, r28
    1190:	e5 50       	subi	r30, 0x05	; 5
    1192:	fe 4f       	sbci	r31, 0xFE	; 254
    1194:	80 81       	ld	r24, Z
    1196:	91 81       	ldd	r25, Z+1	; 0x01
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <main+0x3b0>
    119c:	fe 01       	movw	r30, r28
    119e:	e5 50       	subi	r30, 0x05	; 5
    11a0:	fe 4f       	sbci	r31, 0xFE	; 254
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a6:	de 01       	movw	r26, r28
    11a8:	a3 50       	subi	r26, 0x03	; 3
    11aa:	be 4f       	sbci	r27, 0xFE	; 254
    11ac:	fe 01       	movw	r30, r28
    11ae:	e3 50       	subi	r30, 0x03	; 3
    11b0:	fe 4f       	sbci	r31, 0xFE	; 254
    11b2:	80 81       	ld	r24, Z
    11b4:	91 81       	ldd	r25, Z+1	; 0x01
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	11 96       	adiw	r26, 0x01	; 1
    11ba:	9c 93       	st	X, r25
    11bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11be:	fe 01       	movw	r30, r28
    11c0:	e3 50       	subi	r30, 0x03	; 3
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	80 81       	ld	r24, Z
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	d1 f6       	brne	.-76     	; 0x1180 <main+0x398>
    11cc:	27 c0       	rjmp	.+78     	; 0x121c <main+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ce:	8e 01       	movw	r16, r28
    11d0:	03 50       	subi	r16, 0x03	; 3
    11d2:	1e 4f       	sbci	r17, 0xFE	; 254
    11d4:	fe 01       	movw	r30, r28
    11d6:	e1 50       	subi	r30, 0x01	; 1
    11d8:	fe 4f       	sbci	r31, 0xFE	; 254
    11da:	60 81       	ld	r22, Z
    11dc:	71 81       	ldd	r23, Z+1	; 0x01
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	f8 01       	movw	r30, r16
    11ec:	91 83       	std	Z+1, r25	; 0x01
    11ee:	80 83       	st	Z, r24
    11f0:	de 01       	movw	r26, r28
    11f2:	a7 50       	subi	r26, 0x07	; 7
    11f4:	be 4f       	sbci	r27, 0xFE	; 254
    11f6:	fe 01       	movw	r30, r28
    11f8:	e3 50       	subi	r30, 0x03	; 3
    11fa:	fe 4f       	sbci	r31, 0xFE	; 254
    11fc:	80 81       	ld	r24, Z
    11fe:	91 81       	ldd	r25, Z+1	; 0x01
    1200:	8d 93       	st	X+, r24
    1202:	9c 93       	st	X, r25
    1204:	fe 01       	movw	r30, r28
    1206:	e7 50       	subi	r30, 0x07	; 7
    1208:	fe 4f       	sbci	r31, 0xFE	; 254
    120a:	80 81       	ld	r24, Z
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <main+0x426>
    1212:	fe 01       	movw	r30, r28
    1214:	e7 50       	subi	r30, 0x07	; 7
    1216:	fe 4f       	sbci	r31, 0xFE	; 254
    1218:	91 83       	std	Z+1, r25	; 0x01
    121a:	80 83       	st	Z, r24
        _delay_ms(DEFUALT_DELAY_TIME * 4);
        LCD_VidClearScreen();
    121c:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
        LCD_VidSendString_XY("Set Admin Pass", 0, 0);
    1220:	85 e9       	ldi	r24, 0x95	; 149
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
        LCD_VidSendString_XY("Admin Pass:", 1, 0);
    122c:	84 ea       	ldi	r24, 0xA4	; 164
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>

        Pass_Counter = 0;
    1238:	fe 01       	movw	r30, r28
    123a:	ea 5e       	subi	r30, 0xEA	; 234
    123c:	fd 4f       	sbci	r31, 0xFD	; 253
    123e:	10 82       	st	Z, r1
    1240:	fa c0       	rjmp	.+500    	; 0x1436 <main+0x64e>
        while (Pass_Counter < 4)
        {
            WaitForKey(&Local_u8KeyPressed);
    1242:	ce 01       	movw	r24, r28
    1244:	82 5e       	subi	r24, 0xE2	; 226
    1246:	9d 4f       	sbci	r25, 0xFD	; 253
    1248:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <WaitForKey>
            if (Local_u8KeyPressed >= '0' && Local_u8KeyPressed <= '9')
    124c:	fe 01       	movw	r30, r28
    124e:	e2 5e       	subi	r30, 0xE2	; 226
    1250:	fd 4f       	sbci	r31, 0xFD	; 253
    1252:	80 81       	ld	r24, Z
    1254:	80 33       	cpi	r24, 0x30	; 48
    1256:	08 f4       	brcc	.+2      	; 0x125a <main+0x472>
    1258:	ee c0       	rjmp	.+476    	; 0x1436 <main+0x64e>
    125a:	fe 01       	movw	r30, r28
    125c:	e2 5e       	subi	r30, 0xE2	; 226
    125e:	fd 4f       	sbci	r31, 0xFD	; 253
    1260:	80 81       	ld	r24, Z
    1262:	8a 33       	cpi	r24, 0x3A	; 58
    1264:	08 f0       	brcs	.+2      	; 0x1268 <main+0x480>
    1266:	e7 c0       	rjmp	.+462    	; 0x1436 <main+0x64e>
            {
                Pass[Pass_Counter] = Local_u8KeyPressed;
    1268:	fe 01       	movw	r30, r28
    126a:	ea 5e       	subi	r30, 0xEA	; 234
    126c:	fd 4f       	sbci	r31, 0xFD	; 253
    126e:	80 81       	ld	r24, Z
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	fe 01       	movw	r30, r28
    1276:	e2 5e       	subi	r30, 0xE2	; 226
    1278:	fd 4f       	sbci	r31, 0xFD	; 253
    127a:	40 81       	ld	r20, Z
    127c:	ce 01       	movw	r24, r28
    127e:	81 5e       	subi	r24, 0xE1	; 225
    1280:	9d 4f       	sbci	r25, 0xFD	; 253
    1282:	fc 01       	movw	r30, r24
    1284:	e2 0f       	add	r30, r18
    1286:	f3 1f       	adc	r31, r19
    1288:	40 83       	st	Z, r20
                LCD_VidSendChar_XY(Local_u8KeyPressed, 1, 11 + Pass_Counter);
    128a:	fe 01       	movw	r30, r28
    128c:	e2 5e       	subi	r30, 0xE2	; 226
    128e:	fd 4f       	sbci	r31, 0xFD	; 253
    1290:	20 81       	ld	r18, Z
    1292:	fe 01       	movw	r30, r28
    1294:	ea 5e       	subi	r30, 0xEA	; 234
    1296:	fd 4f       	sbci	r31, 0xFD	; 253
    1298:	80 81       	ld	r24, Z
    129a:	98 2f       	mov	r25, r24
    129c:	95 5f       	subi	r25, 0xF5	; 245
    129e:	82 2f       	mov	r24, r18
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	49 2f       	mov	r20, r25
    12a4:	0e 94 b2 3a 	call	0x7564	; 0x7564 <LCD_VidSendChar_XY>
    12a8:	fe 01       	movw	r30, r28
    12aa:	eb 50       	subi	r30, 0x0B	; 11
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a6 e9       	ldi	r26, 0x96	; 150
    12b4:	b2 e4       	ldi	r27, 0x42	; 66
    12b6:	80 83       	st	Z, r24
    12b8:	91 83       	std	Z+1, r25	; 0x01
    12ba:	a2 83       	std	Z+2, r26	; 0x02
    12bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12be:	8e 01       	movw	r16, r28
    12c0:	0f 50       	subi	r16, 0x0F	; 15
    12c2:	1e 4f       	sbci	r17, 0xFE	; 254
    12c4:	fe 01       	movw	r30, r28
    12c6:	eb 50       	subi	r30, 0x0B	; 11
    12c8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	4a ef       	ldi	r20, 0xFA	; 250
    12d8:	54 e4       	ldi	r21, 0x44	; 68
    12da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	f8 01       	movw	r30, r16
    12e4:	80 83       	st	Z, r24
    12e6:	91 83       	std	Z+1, r25	; 0x01
    12e8:	a2 83       	std	Z+2, r26	; 0x02
    12ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12ec:	fe 01       	movw	r30, r28
    12ee:	ef 50       	subi	r30, 0x0F	; 15
    12f0:	fe 4f       	sbci	r31, 0xFE	; 254
    12f2:	60 81       	ld	r22, Z
    12f4:	71 81       	ldd	r23, Z+1	; 0x01
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e8       	ldi	r20, 0x80	; 128
    1300:	5f e3       	ldi	r21, 0x3F	; 63
    1302:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1306:	88 23       	and	r24, r24
    1308:	44 f4       	brge	.+16     	; 0x131a <main+0x532>
		__ticks = 1;
    130a:	fe 01       	movw	r30, r28
    130c:	e1 51       	subi	r30, 0x11	; 17
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
    1318:	64 c0       	rjmp	.+200    	; 0x13e2 <main+0x5fa>
	else if (__tmp > 65535)
    131a:	fe 01       	movw	r30, r28
    131c:	ef 50       	subi	r30, 0x0F	; 15
    131e:	fe 4f       	sbci	r31, 0xFE	; 254
    1320:	60 81       	ld	r22, Z
    1322:	71 81       	ldd	r23, Z+1	; 0x01
    1324:	82 81       	ldd	r24, Z+2	; 0x02
    1326:	93 81       	ldd	r25, Z+3	; 0x03
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	57 e4       	ldi	r21, 0x47	; 71
    1330:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1334:	18 16       	cp	r1, r24
    1336:	0c f0       	brlt	.+2      	; 0x133a <main+0x552>
    1338:	43 c0       	rjmp	.+134    	; 0x13c0 <main+0x5d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133a:	fe 01       	movw	r30, r28
    133c:	eb 50       	subi	r30, 0x0B	; 11
    133e:	fe 4f       	sbci	r31, 0xFE	; 254
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e2       	ldi	r20, 0x20	; 32
    134e:	51 e4       	ldi	r21, 0x41	; 65
    1350:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	8e 01       	movw	r16, r28
    135a:	01 51       	subi	r16, 0x11	; 17
    135c:	1e 4f       	sbci	r17, 0xFE	; 254
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	f8 01       	movw	r30, r16
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
    1370:	1f c0       	rjmp	.+62     	; 0x13b0 <main+0x5c8>
    1372:	fe 01       	movw	r30, r28
    1374:	e3 51       	subi	r30, 0x13	; 19
    1376:	fe 4f       	sbci	r31, 0xFE	; 254
    1378:	88 ec       	ldi	r24, 0xC8	; 200
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	91 83       	std	Z+1, r25	; 0x01
    137e:	80 83       	st	Z, r24
    1380:	fe 01       	movw	r30, r28
    1382:	e3 51       	subi	r30, 0x13	; 19
    1384:	fe 4f       	sbci	r31, 0xFE	; 254
    1386:	80 81       	ld	r24, Z
    1388:	91 81       	ldd	r25, Z+1	; 0x01
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <main+0x5a2>
    138e:	fe 01       	movw	r30, r28
    1390:	e3 51       	subi	r30, 0x13	; 19
    1392:	fe 4f       	sbci	r31, 0xFE	; 254
    1394:	91 83       	std	Z+1, r25	; 0x01
    1396:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1398:	de 01       	movw	r26, r28
    139a:	a1 51       	subi	r26, 0x11	; 17
    139c:	be 4f       	sbci	r27, 0xFE	; 254
    139e:	fe 01       	movw	r30, r28
    13a0:	e1 51       	subi	r30, 0x11	; 17
    13a2:	fe 4f       	sbci	r31, 0xFE	; 254
    13a4:	80 81       	ld	r24, Z
    13a6:	91 81       	ldd	r25, Z+1	; 0x01
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	11 96       	adiw	r26, 0x01	; 1
    13ac:	9c 93       	st	X, r25
    13ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b0:	fe 01       	movw	r30, r28
    13b2:	e1 51       	subi	r30, 0x11	; 17
    13b4:	fe 4f       	sbci	r31, 0xFE	; 254
    13b6:	80 81       	ld	r24, Z
    13b8:	91 81       	ldd	r25, Z+1	; 0x01
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	d1 f6       	brne	.-76     	; 0x1372 <main+0x58a>
    13be:	27 c0       	rjmp	.+78     	; 0x140e <main+0x626>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c0:	8e 01       	movw	r16, r28
    13c2:	01 51       	subi	r16, 0x11	; 17
    13c4:	1e 4f       	sbci	r17, 0xFE	; 254
    13c6:	fe 01       	movw	r30, r28
    13c8:	ef 50       	subi	r30, 0x0F	; 15
    13ca:	fe 4f       	sbci	r31, 0xFE	; 254
    13cc:	60 81       	ld	r22, Z
    13ce:	71 81       	ldd	r23, Z+1	; 0x01
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	93 81       	ldd	r25, Z+3	; 0x03
    13d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	f8 01       	movw	r30, r16
    13de:	91 83       	std	Z+1, r25	; 0x01
    13e0:	80 83       	st	Z, r24
    13e2:	de 01       	movw	r26, r28
    13e4:	a5 51       	subi	r26, 0x15	; 21
    13e6:	be 4f       	sbci	r27, 0xFE	; 254
    13e8:	fe 01       	movw	r30, r28
    13ea:	e1 51       	subi	r30, 0x11	; 17
    13ec:	fe 4f       	sbci	r31, 0xFE	; 254
    13ee:	80 81       	ld	r24, Z
    13f0:	91 81       	ldd	r25, Z+1	; 0x01
    13f2:	8d 93       	st	X+, r24
    13f4:	9c 93       	st	X, r25
    13f6:	fe 01       	movw	r30, r28
    13f8:	e5 51       	subi	r30, 0x15	; 21
    13fa:	fe 4f       	sbci	r31, 0xFE	; 254
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <main+0x618>
    1404:	fe 01       	movw	r30, r28
    1406:	e5 51       	subi	r30, 0x15	; 21
    1408:	fe 4f       	sbci	r31, 0xFE	; 254
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
                _delay_ms(CHARACTER_PREVIEW_TIME);
                LCD_VidSendChar_XY(PASSWORD_SYMBOL, 1, 11 + Pass_Counter);
    140e:	fe 01       	movw	r30, r28
    1410:	ea 5e       	subi	r30, 0xEA	; 234
    1412:	fd 4f       	sbci	r31, 0xFD	; 253
    1414:	80 81       	ld	r24, Z
    1416:	98 2f       	mov	r25, r24
    1418:	95 5f       	subi	r25, 0xF5	; 245
    141a:	8a e2       	ldi	r24, 0x2A	; 42
    141c:	61 e0       	ldi	r22, 0x01	; 1
    141e:	49 2f       	mov	r20, r25
    1420:	0e 94 b2 3a 	call	0x7564	; 0x7564 <LCD_VidSendChar_XY>
                Pass_Counter++;
    1424:	de 01       	movw	r26, r28
    1426:	aa 5e       	subi	r26, 0xEA	; 234
    1428:	bd 4f       	sbci	r27, 0xFD	; 253
    142a:	fe 01       	movw	r30, r28
    142c:	ea 5e       	subi	r30, 0xEA	; 234
    142e:	fd 4f       	sbci	r31, 0xFD	; 253
    1430:	80 81       	ld	r24, Z
    1432:	8f 5f       	subi	r24, 0xFF	; 255
    1434:	8c 93       	st	X, r24
        LCD_VidClearScreen();
        LCD_VidSendString_XY("Set Admin Pass", 0, 0);
        LCD_VidSendString_XY("Admin Pass:", 1, 0);

        Pass_Counter = 0;
        while (Pass_Counter < 4)
    1436:	fe 01       	movw	r30, r28
    1438:	ea 5e       	subi	r30, 0xEA	; 234
    143a:	fd 4f       	sbci	r31, 0xFD	; 253
    143c:	80 81       	ld	r24, Z
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	08 f4       	brcc	.+2      	; 0x1444 <main+0x65c>
    1442:	ff ce       	rjmp	.-514    	; 0x1242 <main+0x45a>
                LCD_VidSendChar_XY(PASSWORD_SYMBOL, 1, 11 + Pass_Counter);
                Pass_Counter++;
            }
        }

        EEPROM_WriteBlock(EEPROM_USER_ADDRESS, Pass, 4);
    1444:	9e 01       	movw	r18, r28
    1446:	21 5e       	subi	r18, 0xE1	; 225
    1448:	3d 4f       	sbci	r19, 0xFD	; 253
    144a:	82 e0       	ldi	r24, 0x02	; 2
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	b9 01       	movw	r22, r18
    1450:	44 e0       	ldi	r20, 0x04	; 4
    1452:	0e 94 57 28 	call	0x50ae	; 0x50ae <EEPROM_WriteBlock>
        EEPROM_writeByte(USER_PASS_STATUS_ADDRESS, PASS_SET);
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <EEPROM_writeByte>
        LCD_VidClearScreen();
    1460:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
        LCD_VidSendString_XY("Pass Saved", 0, 3);
    1464:	80 eb       	ldi	r24, 0xB0	; 176
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	43 e0       	ldi	r20, 0x03	; 3
    146c:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    1470:	fe 01       	movw	r30, r28
    1472:	e9 51       	subi	r30, 0x19	; 25
    1474:	fe 4f       	sbci	r31, 0xFE	; 254
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a8 e4       	ldi	r26, 0x48	; 72
    147c:	b4 e4       	ldi	r27, 0x44	; 68
    147e:	80 83       	st	Z, r24
    1480:	91 83       	std	Z+1, r25	; 0x01
    1482:	a2 83       	std	Z+2, r26	; 0x02
    1484:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1486:	8e 01       	movw	r16, r28
    1488:	0d 51       	subi	r16, 0x1D	; 29
    148a:	1e 4f       	sbci	r17, 0xFE	; 254
    148c:	fe 01       	movw	r30, r28
    148e:	e9 51       	subi	r30, 0x19	; 25
    1490:	fe 4f       	sbci	r31, 0xFE	; 254
    1492:	60 81       	ld	r22, Z
    1494:	71 81       	ldd	r23, Z+1	; 0x01
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	4a ef       	ldi	r20, 0xFA	; 250
    14a0:	54 e4       	ldi	r21, 0x44	; 68
    14a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	f8 01       	movw	r30, r16
    14ac:	80 83       	st	Z, r24
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	a2 83       	std	Z+2, r26	; 0x02
    14b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14b4:	fe 01       	movw	r30, r28
    14b6:	ed 51       	subi	r30, 0x1D	; 29
    14b8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ba:	60 81       	ld	r22, Z
    14bc:	71 81       	ldd	r23, Z+1	; 0x01
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	93 81       	ldd	r25, Z+3	; 0x03
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e8       	ldi	r20, 0x80	; 128
    14c8:	5f e3       	ldi	r21, 0x3F	; 63
    14ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14ce:	88 23       	and	r24, r24
    14d0:	44 f4       	brge	.+16     	; 0x14e2 <main+0x6fa>
		__ticks = 1;
    14d2:	fe 01       	movw	r30, r28
    14d4:	ef 51       	subi	r30, 0x1F	; 31
    14d6:	fe 4f       	sbci	r31, 0xFE	; 254
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
    14e0:	64 c0       	rjmp	.+200    	; 0x15aa <main+0x7c2>
	else if (__tmp > 65535)
    14e2:	fe 01       	movw	r30, r28
    14e4:	ed 51       	subi	r30, 0x1D	; 29
    14e6:	fe 4f       	sbci	r31, 0xFE	; 254
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	3f ef       	ldi	r19, 0xFF	; 255
    14f4:	4f e7       	ldi	r20, 0x7F	; 127
    14f6:	57 e4       	ldi	r21, 0x47	; 71
    14f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14fc:	18 16       	cp	r1, r24
    14fe:	0c f0       	brlt	.+2      	; 0x1502 <main+0x71a>
    1500:	43 c0       	rjmp	.+134    	; 0x1588 <main+0x7a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1502:	fe 01       	movw	r30, r28
    1504:	e9 51       	subi	r30, 0x19	; 25
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	60 81       	ld	r22, Z
    150a:	71 81       	ldd	r23, Z+1	; 0x01
    150c:	82 81       	ldd	r24, Z+2	; 0x02
    150e:	93 81       	ldd	r25, Z+3	; 0x03
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e2       	ldi	r20, 0x20	; 32
    1516:	51 e4       	ldi	r21, 0x41	; 65
    1518:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	8e 01       	movw	r16, r28
    1522:	0f 51       	subi	r16, 0x1F	; 31
    1524:	1e 4f       	sbci	r17, 0xFE	; 254
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	f8 01       	movw	r30, r16
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
    1538:	1f c0       	rjmp	.+62     	; 0x1578 <main+0x790>
    153a:	fe 01       	movw	r30, r28
    153c:	e1 52       	subi	r30, 0x21	; 33
    153e:	fe 4f       	sbci	r31, 0xFE	; 254
    1540:	88 ec       	ldi	r24, 0xC8	; 200
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
    1548:	fe 01       	movw	r30, r28
    154a:	e1 52       	subi	r30, 0x21	; 33
    154c:	fe 4f       	sbci	r31, 0xFE	; 254
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <main+0x76a>
    1556:	fe 01       	movw	r30, r28
    1558:	e1 52       	subi	r30, 0x21	; 33
    155a:	fe 4f       	sbci	r31, 0xFE	; 254
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1560:	de 01       	movw	r26, r28
    1562:	af 51       	subi	r26, 0x1F	; 31
    1564:	be 4f       	sbci	r27, 0xFE	; 254
    1566:	fe 01       	movw	r30, r28
    1568:	ef 51       	subi	r30, 0x1F	; 31
    156a:	fe 4f       	sbci	r31, 0xFE	; 254
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	11 96       	adiw	r26, 0x01	; 1
    1574:	9c 93       	st	X, r25
    1576:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1578:	fe 01       	movw	r30, r28
    157a:	ef 51       	subi	r30, 0x1F	; 31
    157c:	fe 4f       	sbci	r31, 0xFE	; 254
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	d1 f6       	brne	.-76     	; 0x153a <main+0x752>
    1586:	27 c0       	rjmp	.+78     	; 0x15d6 <main+0x7ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1588:	8e 01       	movw	r16, r28
    158a:	0f 51       	subi	r16, 0x1F	; 31
    158c:	1e 4f       	sbci	r17, 0xFE	; 254
    158e:	fe 01       	movw	r30, r28
    1590:	ed 51       	subi	r30, 0x1D	; 29
    1592:	fe 4f       	sbci	r31, 0xFE	; 254
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	f8 01       	movw	r30, r16
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	80 83       	st	Z, r24
    15aa:	de 01       	movw	r26, r28
    15ac:	a3 52       	subi	r26, 0x23	; 35
    15ae:	be 4f       	sbci	r27, 0xFE	; 254
    15b0:	fe 01       	movw	r30, r28
    15b2:	ef 51       	subi	r30, 0x1F	; 31
    15b4:	fe 4f       	sbci	r31, 0xFE	; 254
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	8d 93       	st	X+, r24
    15bc:	9c 93       	st	X, r25
    15be:	fe 01       	movw	r30, r28
    15c0:	e3 52       	subi	r30, 0x23	; 35
    15c2:	fe 4f       	sbci	r31, 0xFE	; 254
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <main+0x7e0>
    15cc:	fe 01       	movw	r30, r28
    15ce:	e3 52       	subi	r30, 0x23	; 35
    15d0:	fe 4f       	sbci	r31, 0xFE	; 254
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
        _delay_ms(DEFUALT_DELAY_TIME * 4);
        LCD_VidClearScreen();
    15d6:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
        EEPROM_writeByte(LOGIN_BLOCKED_ADDRESS, FALSE);
    15da:	8a e0       	ldi	r24, 0x0A	; 10
    15dc:	91 e0       	ldi	r25, 0x01	; 1
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <EEPROM_writeByte>
    15e4:	08 c0       	rjmp	.+16     	; 0x15f6 <main+0x80e>
    }
    else
    {
        EEPROM_readByte(LOGIN_BLOCKED_ADDRESS, &Block_Mode_Flag);
    15e6:	9e 01       	movw	r18, r28
    15e8:	29 5d       	subi	r18, 0xD9	; 217
    15ea:	3d 4f       	sbci	r19, 0xFD	; 253
    15ec:	8a e0       	ldi	r24, 0x0A	; 10
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	b9 01       	movw	r22, r18
    15f2:	0e 94 f7 27 	call	0x4fee	; 0x4fee <EEPROM_readByte>
    }
    /////////////////////////////////////////////////////////////////////////////
    // Login
    while (1)
    {
        if (Block_Mode_Flag == TRUE)
    15f6:	fe 01       	movw	r30, r28
    15f8:	e9 5d       	subi	r30, 0xD9	; 217
    15fa:	fd 4f       	sbci	r31, 0xFD	; 253
    15fc:	80 81       	ld	r24, Z
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	09 f0       	breq	.+2      	; 0x1604 <main+0x81c>
    1602:	d8 c0       	rjmp	.+432    	; 0x17b4 <main+0x9cc>
        {
            LCD_VidSendString_XY("Login Blocked", 0, 0);
    1604:	8b eb       	ldi	r24, 0xBB	; 187
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	60 e0       	ldi	r22, 0x00	; 0
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            LCD_VidSendString_XY("Wait 5 Seconds", 1, 0);
    1610:	89 ec       	ldi	r24, 0xC9	; 201
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	61 e0       	ldi	r22, 0x01	; 1
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            DIO_VidSetPinValue(Port_B, Pin0, PinHigh);
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	41 e0       	ldi	r20, 0x01	; 1
    1622:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    1626:	fe 01       	movw	r30, r28
    1628:	e7 52       	subi	r30, 0x27	; 39
    162a:	fe 4f       	sbci	r31, 0xFE	; 254
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e4       	ldi	r25, 0x40	; 64
    1630:	ac e9       	ldi	r26, 0x9C	; 156
    1632:	b5 e4       	ldi	r27, 0x45	; 69
    1634:	80 83       	st	Z, r24
    1636:	91 83       	std	Z+1, r25	; 0x01
    1638:	a2 83       	std	Z+2, r26	; 0x02
    163a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163c:	8e 01       	movw	r16, r28
    163e:	0b 52       	subi	r16, 0x2B	; 43
    1640:	1e 4f       	sbci	r17, 0xFE	; 254
    1642:	fe 01       	movw	r30, r28
    1644:	e7 52       	subi	r30, 0x27	; 39
    1646:	fe 4f       	sbci	r31, 0xFE	; 254
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	4a ef       	ldi	r20, 0xFA	; 250
    1656:	54 e4       	ldi	r21, 0x44	; 68
    1658:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	f8 01       	movw	r30, r16
    1662:	80 83       	st	Z, r24
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	a2 83       	std	Z+2, r26	; 0x02
    1668:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    166a:	fe 01       	movw	r30, r28
    166c:	eb 52       	subi	r30, 0x2B	; 43
    166e:	fe 4f       	sbci	r31, 0xFE	; 254
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1684:	88 23       	and	r24, r24
    1686:	44 f4       	brge	.+16     	; 0x1698 <main+0x8b0>
		__ticks = 1;
    1688:	fe 01       	movw	r30, r28
    168a:	ed 52       	subi	r30, 0x2D	; 45
    168c:	fe 4f       	sbci	r31, 0xFE	; 254
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	91 83       	std	Z+1, r25	; 0x01
    1694:	80 83       	st	Z, r24
    1696:	64 c0       	rjmp	.+200    	; 0x1760 <main+0x978>
	else if (__tmp > 65535)
    1698:	fe 01       	movw	r30, r28
    169a:	eb 52       	subi	r30, 0x2B	; 43
    169c:	fe 4f       	sbci	r31, 0xFE	; 254
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	3f ef       	ldi	r19, 0xFF	; 255
    16aa:	4f e7       	ldi	r20, 0x7F	; 127
    16ac:	57 e4       	ldi	r21, 0x47	; 71
    16ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16b2:	18 16       	cp	r1, r24
    16b4:	0c f0       	brlt	.+2      	; 0x16b8 <main+0x8d0>
    16b6:	43 c0       	rjmp	.+134    	; 0x173e <main+0x956>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b8:	fe 01       	movw	r30, r28
    16ba:	e7 52       	subi	r30, 0x27	; 39
    16bc:	fe 4f       	sbci	r31, 0xFE	; 254
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e2       	ldi	r20, 0x20	; 32
    16cc:	51 e4       	ldi	r21, 0x41	; 65
    16ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	8e 01       	movw	r16, r28
    16d8:	0d 52       	subi	r16, 0x2D	; 45
    16da:	1e 4f       	sbci	r17, 0xFE	; 254
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	f8 01       	movw	r30, r16
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
    16ee:	1f c0       	rjmp	.+62     	; 0x172e <main+0x946>
    16f0:	fe 01       	movw	r30, r28
    16f2:	ef 52       	subi	r30, 0x2F	; 47
    16f4:	fe 4f       	sbci	r31, 0xFE	; 254
    16f6:	88 ec       	ldi	r24, 0xC8	; 200
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
    16fe:	fe 01       	movw	r30, r28
    1700:	ef 52       	subi	r30, 0x2F	; 47
    1702:	fe 4f       	sbci	r31, 0xFE	; 254
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <main+0x920>
    170c:	fe 01       	movw	r30, r28
    170e:	ef 52       	subi	r30, 0x2F	; 47
    1710:	fe 4f       	sbci	r31, 0xFE	; 254
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1716:	de 01       	movw	r26, r28
    1718:	ad 52       	subi	r26, 0x2D	; 45
    171a:	be 4f       	sbci	r27, 0xFE	; 254
    171c:	fe 01       	movw	r30, r28
    171e:	ed 52       	subi	r30, 0x2D	; 45
    1720:	fe 4f       	sbci	r31, 0xFE	; 254
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	11 96       	adiw	r26, 0x01	; 1
    172a:	9c 93       	st	X, r25
    172c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172e:	fe 01       	movw	r30, r28
    1730:	ed 52       	subi	r30, 0x2D	; 45
    1732:	fe 4f       	sbci	r31, 0xFE	; 254
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	d1 f6       	brne	.-76     	; 0x16f0 <main+0x908>
    173c:	27 c0       	rjmp	.+78     	; 0x178c <main+0x9a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173e:	8e 01       	movw	r16, r28
    1740:	0d 52       	subi	r16, 0x2D	; 45
    1742:	1e 4f       	sbci	r17, 0xFE	; 254
    1744:	fe 01       	movw	r30, r28
    1746:	eb 52       	subi	r30, 0x2B	; 43
    1748:	fe 4f       	sbci	r31, 0xFE	; 254
    174a:	60 81       	ld	r22, Z
    174c:	71 81       	ldd	r23, Z+1	; 0x01
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	f8 01       	movw	r30, r16
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	80 83       	st	Z, r24
    1760:	de 01       	movw	r26, r28
    1762:	a1 53       	subi	r26, 0x31	; 49
    1764:	be 4f       	sbci	r27, 0xFE	; 254
    1766:	fe 01       	movw	r30, r28
    1768:	ed 52       	subi	r30, 0x2D	; 45
    176a:	fe 4f       	sbci	r31, 0xFE	; 254
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	8d 93       	st	X+, r24
    1772:	9c 93       	st	X, r25
    1774:	fe 01       	movw	r30, r28
    1776:	e1 53       	subi	r30, 0x31	; 49
    1778:	fe 4f       	sbci	r31, 0xFE	; 254
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <main+0x996>
    1782:	fe 01       	movw	r30, r28
    1784:	e1 53       	subi	r30, 0x31	; 49
    1786:	fe 4f       	sbci	r31, 0xFE	; 254
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	80 83       	st	Z, r24
            _delay_ms(BLOCK_MODE_TIME);
            DIO_VidSetPinValue(Port_B, Pin0, PinLow);
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
            pass_tries_count = 0;
    1796:	fe 01       	movw	r30, r28
    1798:	eb 5e       	subi	r30, 0xEB	; 235
    179a:	fd 4f       	sbci	r31, 0xFD	; 253
    179c:	10 82       	st	Z, r1
            Block_Mode_Flag = FALSE;
    179e:	fe 01       	movw	r30, r28
    17a0:	e9 5d       	subi	r30, 0xD9	; 217
    17a2:	fd 4f       	sbci	r31, 0xFD	; 253
    17a4:	10 82       	st	Z, r1
            EEPROM_writeByte(LOGIN_BLOCKED_ADDRESS, FALSE);
    17a6:	8a e0       	ldi	r24, 0x0A	; 10
    17a8:	91 e0       	ldi	r25, 0x01	; 1
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <EEPROM_writeByte>
            LCD_VidClearScreen();
    17b0:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
        }
        // Get Pass
        Pass_Counter = 0;
    17b4:	fe 01       	movw	r30, r28
    17b6:	ea 5e       	subi	r30, 0xEA	; 234
    17b8:	fd 4f       	sbci	r31, 0xFD	; 253
    17ba:	10 82       	st	Z, r1
        LCD_VidSendString_XY("Enter Password ", 0, 0);
    17bc:	88 ed       	ldi	r24, 0xD8	; 216
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
        LCD_VidSendString_XY("____", 1, 0);
    17c8:	88 ee       	ldi	r24, 0xE8	; 232
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	61 e0       	ldi	r22, 0x01	; 1
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
        LCD_VidMoveCursor(1, 0);
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	0e 94 56 3a 	call	0x74ac	; 0x74ac <LCD_VidMoveCursor>
    17dc:	f3 c0       	rjmp	.+486    	; 0x19c4 <main+0xbdc>
        while (Pass_Counter < 4)
        {
            WaitForKey(&Local_u8KeyPressed);
    17de:	ce 01       	movw	r24, r28
    17e0:	82 5e       	subi	r24, 0xE2	; 226
    17e2:	9d 4f       	sbci	r25, 0xFD	; 253
    17e4:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <WaitForKey>
            if (Local_u8KeyPressed >= '0' && Local_u8KeyPressed <= '9')
    17e8:	fe 01       	movw	r30, r28
    17ea:	e2 5e       	subi	r30, 0xE2	; 226
    17ec:	fd 4f       	sbci	r31, 0xFD	; 253
    17ee:	80 81       	ld	r24, Z
    17f0:	80 33       	cpi	r24, 0x30	; 48
    17f2:	08 f4       	brcc	.+2      	; 0x17f6 <main+0xa0e>
    17f4:	e7 c0       	rjmp	.+462    	; 0x19c4 <main+0xbdc>
    17f6:	fe 01       	movw	r30, r28
    17f8:	e2 5e       	subi	r30, 0xE2	; 226
    17fa:	fd 4f       	sbci	r31, 0xFD	; 253
    17fc:	80 81       	ld	r24, Z
    17fe:	8a 33       	cpi	r24, 0x3A	; 58
    1800:	08 f0       	brcs	.+2      	; 0x1804 <main+0xa1c>
    1802:	e0 c0       	rjmp	.+448    	; 0x19c4 <main+0xbdc>
            {
                Entered_Pass[Pass_Counter] = Local_u8KeyPressed;
    1804:	fe 01       	movw	r30, r28
    1806:	ea 5e       	subi	r30, 0xEA	; 234
    1808:	fd 4f       	sbci	r31, 0xFD	; 253
    180a:	80 81       	ld	r24, Z
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	fe 01       	movw	r30, r28
    1812:	e2 5e       	subi	r30, 0xE2	; 226
    1814:	fd 4f       	sbci	r31, 0xFD	; 253
    1816:	40 81       	ld	r20, Z
    1818:	ce 01       	movw	r24, r28
    181a:	8d 5d       	subi	r24, 0xDD	; 221
    181c:	9d 4f       	sbci	r25, 0xFD	; 253
    181e:	fc 01       	movw	r30, r24
    1820:	e2 0f       	add	r30, r18
    1822:	f3 1f       	adc	r31, r19
    1824:	40 83       	st	Z, r20
                LCD_VidSendChar_XY(Local_u8KeyPressed, 1, Pass_Counter);
    1826:	fe 01       	movw	r30, r28
    1828:	e2 5e       	subi	r30, 0xE2	; 226
    182a:	fd 4f       	sbci	r31, 0xFD	; 253
    182c:	80 81       	ld	r24, Z
    182e:	fe 01       	movw	r30, r28
    1830:	ea 5e       	subi	r30, 0xEA	; 234
    1832:	fd 4f       	sbci	r31, 0xFD	; 253
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	40 81       	ld	r20, Z
    1838:	0e 94 b2 3a 	call	0x7564	; 0x7564 <LCD_VidSendChar_XY>
    183c:	fe 01       	movw	r30, r28
    183e:	e5 53       	subi	r30, 0x35	; 53
    1840:	fe 4f       	sbci	r31, 0xFE	; 254
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	a6 e9       	ldi	r26, 0x96	; 150
    1848:	b2 e4       	ldi	r27, 0x42	; 66
    184a:	80 83       	st	Z, r24
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	a2 83       	std	Z+2, r26	; 0x02
    1850:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1852:	8e 01       	movw	r16, r28
    1854:	09 53       	subi	r16, 0x39	; 57
    1856:	1e 4f       	sbci	r17, 0xFE	; 254
    1858:	fe 01       	movw	r30, r28
    185a:	e5 53       	subi	r30, 0x35	; 53
    185c:	fe 4f       	sbci	r31, 0xFE	; 254
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	4a ef       	ldi	r20, 0xFA	; 250
    186c:	54 e4       	ldi	r21, 0x44	; 68
    186e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	f8 01       	movw	r30, r16
    1878:	80 83       	st	Z, r24
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	a2 83       	std	Z+2, r26	; 0x02
    187e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1880:	fe 01       	movw	r30, r28
    1882:	e9 53       	subi	r30, 0x39	; 57
    1884:	fe 4f       	sbci	r31, 0xFE	; 254
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e8       	ldi	r20, 0x80	; 128
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    189a:	88 23       	and	r24, r24
    189c:	44 f4       	brge	.+16     	; 0x18ae <main+0xac6>
		__ticks = 1;
    189e:	fe 01       	movw	r30, r28
    18a0:	eb 53       	subi	r30, 0x3B	; 59
    18a2:	fe 4f       	sbci	r31, 0xFE	; 254
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24
    18ac:	64 c0       	rjmp	.+200    	; 0x1976 <main+0xb8e>
	else if (__tmp > 65535)
    18ae:	fe 01       	movw	r30, r28
    18b0:	e9 53       	subi	r30, 0x39	; 57
    18b2:	fe 4f       	sbci	r31, 0xFE	; 254
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	3f ef       	ldi	r19, 0xFF	; 255
    18c0:	4f e7       	ldi	r20, 0x7F	; 127
    18c2:	57 e4       	ldi	r21, 0x47	; 71
    18c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18c8:	18 16       	cp	r1, r24
    18ca:	0c f0       	brlt	.+2      	; 0x18ce <main+0xae6>
    18cc:	43 c0       	rjmp	.+134    	; 0x1954 <main+0xb6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ce:	fe 01       	movw	r30, r28
    18d0:	e5 53       	subi	r30, 0x35	; 53
    18d2:	fe 4f       	sbci	r31, 0xFE	; 254
    18d4:	60 81       	ld	r22, Z
    18d6:	71 81       	ldd	r23, Z+1	; 0x01
    18d8:	82 81       	ldd	r24, Z+2	; 0x02
    18da:	93 81       	ldd	r25, Z+3	; 0x03
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e2       	ldi	r20, 0x20	; 32
    18e2:	51 e4       	ldi	r21, 0x41	; 65
    18e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	8e 01       	movw	r16, r28
    18ee:	0b 53       	subi	r16, 0x3B	; 59
    18f0:	1e 4f       	sbci	r17, 0xFE	; 254
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	f8 01       	movw	r30, r16
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	80 83       	st	Z, r24
    1904:	1f c0       	rjmp	.+62     	; 0x1944 <main+0xb5c>
    1906:	fe 01       	movw	r30, r28
    1908:	ed 53       	subi	r30, 0x3D	; 61
    190a:	fe 4f       	sbci	r31, 0xFE	; 254
    190c:	88 ec       	ldi	r24, 0xC8	; 200
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	80 83       	st	Z, r24
    1914:	fe 01       	movw	r30, r28
    1916:	ed 53       	subi	r30, 0x3D	; 61
    1918:	fe 4f       	sbci	r31, 0xFE	; 254
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <main+0xb36>
    1922:	fe 01       	movw	r30, r28
    1924:	ed 53       	subi	r30, 0x3D	; 61
    1926:	fe 4f       	sbci	r31, 0xFE	; 254
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192c:	de 01       	movw	r26, r28
    192e:	ab 53       	subi	r26, 0x3B	; 59
    1930:	be 4f       	sbci	r27, 0xFE	; 254
    1932:	fe 01       	movw	r30, r28
    1934:	eb 53       	subi	r30, 0x3B	; 59
    1936:	fe 4f       	sbci	r31, 0xFE	; 254
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	11 96       	adiw	r26, 0x01	; 1
    1940:	9c 93       	st	X, r25
    1942:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1944:	fe 01       	movw	r30, r28
    1946:	eb 53       	subi	r30, 0x3B	; 59
    1948:	fe 4f       	sbci	r31, 0xFE	; 254
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	d1 f6       	brne	.-76     	; 0x1906 <main+0xb1e>
    1952:	27 c0       	rjmp	.+78     	; 0x19a2 <main+0xbba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	8e 01       	movw	r16, r28
    1956:	0b 53       	subi	r16, 0x3B	; 59
    1958:	1e 4f       	sbci	r17, 0xFE	; 254
    195a:	fe 01       	movw	r30, r28
    195c:	e9 53       	subi	r30, 0x39	; 57
    195e:	fe 4f       	sbci	r31, 0xFE	; 254
    1960:	60 81       	ld	r22, Z
    1962:	71 81       	ldd	r23, Z+1	; 0x01
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	f8 01       	movw	r30, r16
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
    1976:	de 01       	movw	r26, r28
    1978:	af 53       	subi	r26, 0x3F	; 63
    197a:	be 4f       	sbci	r27, 0xFE	; 254
    197c:	fe 01       	movw	r30, r28
    197e:	eb 53       	subi	r30, 0x3B	; 59
    1980:	fe 4f       	sbci	r31, 0xFE	; 254
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	8d 93       	st	X+, r24
    1988:	9c 93       	st	X, r25
    198a:	fe 01       	movw	r30, r28
    198c:	ef 53       	subi	r30, 0x3F	; 63
    198e:	fe 4f       	sbci	r31, 0xFE	; 254
    1990:	80 81       	ld	r24, Z
    1992:	91 81       	ldd	r25, Z+1	; 0x01
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <main+0xbac>
    1998:	fe 01       	movw	r30, r28
    199a:	ef 53       	subi	r30, 0x3F	; 63
    199c:	fe 4f       	sbci	r31, 0xFE	; 254
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
                _delay_ms(CHARACTER_PREVIEW_TIME);
                LCD_VidSendChar_XY(PASSWORD_SYMBOL, 1, Pass_Counter);
    19a2:	fe 01       	movw	r30, r28
    19a4:	ea 5e       	subi	r30, 0xEA	; 234
    19a6:	fd 4f       	sbci	r31, 0xFD	; 253
    19a8:	8a e2       	ldi	r24, 0x2A	; 42
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	40 81       	ld	r20, Z
    19ae:	0e 94 b2 3a 	call	0x7564	; 0x7564 <LCD_VidSendChar_XY>
                Pass_Counter++;
    19b2:	de 01       	movw	r26, r28
    19b4:	aa 5e       	subi	r26, 0xEA	; 234
    19b6:	bd 4f       	sbci	r27, 0xFD	; 253
    19b8:	fe 01       	movw	r30, r28
    19ba:	ea 5e       	subi	r30, 0xEA	; 234
    19bc:	fd 4f       	sbci	r31, 0xFD	; 253
    19be:	80 81       	ld	r24, Z
    19c0:	8f 5f       	subi	r24, 0xFF	; 255
    19c2:	8c 93       	st	X, r24
        // Get Pass
        Pass_Counter = 0;
        LCD_VidSendString_XY("Enter Password ", 0, 0);
        LCD_VidSendString_XY("____", 1, 0);
        LCD_VidMoveCursor(1, 0);
        while (Pass_Counter < 4)
    19c4:	fe 01       	movw	r30, r28
    19c6:	ea 5e       	subi	r30, 0xEA	; 234
    19c8:	fd 4f       	sbci	r31, 0xFD	; 253
    19ca:	80 81       	ld	r24, Z
    19cc:	84 30       	cpi	r24, 0x04	; 4
    19ce:	08 f4       	brcc	.+2      	; 0x19d2 <main+0xbea>
    19d0:	06 cf       	rjmp	.-500    	; 0x17de <main+0x9f6>
                _delay_ms(CHARACTER_PREVIEW_TIME);
                LCD_VidSendChar_XY(PASSWORD_SYMBOL, 1, Pass_Counter);
                Pass_Counter++;
            }
        }
        LCD_VidClearScreen();
    19d2:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>

        // check Pass
        Pass_Match = TRUE;
    19d6:	fe 01       	movw	r30, r28
    19d8:	e9 5e       	subi	r30, 0xE9	; 233
    19da:	fd 4f       	sbci	r31, 0xFD	; 253
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	80 83       	st	Z, r24
        for (Pass_Counter = 0; Pass_Counter < PASS_SIZE; Pass_Counter++)
    19e0:	fe 01       	movw	r30, r28
    19e2:	ea 5e       	subi	r30, 0xEA	; 234
    19e4:	fd 4f       	sbci	r31, 0xFD	; 253
    19e6:	10 82       	st	Z, r1
    19e8:	33 c0       	rjmp	.+102    	; 0x1a50 <main+0xc68>
        {
            u8 temp = 0;
    19ea:	fe 01       	movw	r30, r28
    19ec:	e7 5d       	subi	r30, 0xD7	; 215
    19ee:	fd 4f       	sbci	r31, 0xFD	; 253
    19f0:	10 82       	st	Z, r1
            EEPROM_readByte(EEPROM_USER_ADDRESS + Pass_Counter, &temp); // Stored Pass
    19f2:	fe 01       	movw	r30, r28
    19f4:	ea 5e       	subi	r30, 0xEA	; 234
    19f6:	fd 4f       	sbci	r31, 0xFD	; 253
    19f8:	80 81       	ld	r24, Z
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	8e 5f       	subi	r24, 0xFE	; 254
    1a00:	9e 4f       	sbci	r25, 0xFE	; 254
    1a02:	9e 01       	movw	r18, r28
    1a04:	27 5d       	subi	r18, 0xD7	; 215
    1a06:	3d 4f       	sbci	r19, 0xFD	; 253
    1a08:	b9 01       	movw	r22, r18
    1a0a:	0e 94 f7 27 	call	0x4fee	; 0x4fee <EEPROM_readByte>
            if (Entered_Pass[Pass_Counter] != temp)
    1a0e:	fe 01       	movw	r30, r28
    1a10:	ea 5e       	subi	r30, 0xEA	; 234
    1a12:	fd 4f       	sbci	r31, 0xFD	; 253
    1a14:	80 81       	ld	r24, Z
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	8d 5d       	subi	r24, 0xDD	; 221
    1a1e:	9d 4f       	sbci	r25, 0xFD	; 253
    1a20:	fc 01       	movw	r30, r24
    1a22:	e2 0f       	add	r30, r18
    1a24:	f3 1f       	adc	r31, r19
    1a26:	90 81       	ld	r25, Z
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e7 5d       	subi	r30, 0xD7	; 215
    1a2c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a2e:	80 81       	ld	r24, Z
    1a30:	98 17       	cp	r25, r24
    1a32:	29 f0       	breq	.+10     	; 0x1a3e <main+0xc56>
            {
                Pass_Match = FALSE;
    1a34:	fe 01       	movw	r30, r28
    1a36:	e9 5e       	subi	r30, 0xE9	; 233
    1a38:	fd 4f       	sbci	r31, 0xFD	; 253
    1a3a:	10 82       	st	Z, r1
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <main+0xc74>
        }
        LCD_VidClearScreen();

        // check Pass
        Pass_Match = TRUE;
        for (Pass_Counter = 0; Pass_Counter < PASS_SIZE; Pass_Counter++)
    1a3e:	de 01       	movw	r26, r28
    1a40:	aa 5e       	subi	r26, 0xEA	; 234
    1a42:	bd 4f       	sbci	r27, 0xFD	; 253
    1a44:	fe 01       	movw	r30, r28
    1a46:	ea 5e       	subi	r30, 0xEA	; 234
    1a48:	fd 4f       	sbci	r31, 0xFD	; 253
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8f 5f       	subi	r24, 0xFF	; 255
    1a4e:	8c 93       	st	X, r24
    1a50:	fe 01       	movw	r30, r28
    1a52:	ea 5e       	subi	r30, 0xEA	; 234
    1a54:	fd 4f       	sbci	r31, 0xFD	; 253
    1a56:	80 81       	ld	r24, Z
    1a58:	84 30       	cpi	r24, 0x04	; 4
    1a5a:	38 f2       	brcs	.-114    	; 0x19ea <main+0xc02>
                break;
            }
            else
                continue;
        }
        if (Pass_Match == TRUE)
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e9 5e       	subi	r30, 0xE9	; 233
    1a60:	fd 4f       	sbci	r31, 0xFD	; 253
    1a62:	80 81       	ld	r24, Z
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <main+0xc82>
    1a68:	4c c2       	rjmp	.+1176   	; 0x1f02 <main+0x111a>
        {
            LCD_VidSendString_XY("Right Pass!!", 0, 3);
    1a6a:	8d ee       	ldi	r24, 0xED	; 237
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	43 e0       	ldi	r20, 0x03	; 3
    1a72:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    1a76:	fe 01       	movw	r30, r28
    1a78:	e3 54       	subi	r30, 0x43	; 67
    1a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a8 e4       	ldi	r26, 0x48	; 72
    1a82:	b4 e4       	ldi	r27, 0x44	; 68
    1a84:	80 83       	st	Z, r24
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	a2 83       	std	Z+2, r26	; 0x02
    1a8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8c:	8e 01       	movw	r16, r28
    1a8e:	07 54       	subi	r16, 0x47	; 71
    1a90:	1e 4f       	sbci	r17, 0xFE	; 254
    1a92:	fe 01       	movw	r30, r28
    1a94:	e3 54       	subi	r30, 0x43	; 67
    1a96:	fe 4f       	sbci	r31, 0xFE	; 254
    1a98:	60 81       	ld	r22, Z
    1a9a:	71 81       	ldd	r23, Z+1	; 0x01
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	93 81       	ldd	r25, Z+3	; 0x03
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	4a ef       	ldi	r20, 0xFA	; 250
    1aa6:	54 e4       	ldi	r21, 0x44	; 68
    1aa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	80 83       	st	Z, r24
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	a2 83       	std	Z+2, r26	; 0x02
    1ab8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aba:	fe 01       	movw	r30, r28
    1abc:	e7 54       	subi	r30, 0x47	; 71
    1abe:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	44 f4       	brge	.+16     	; 0x1ae8 <main+0xd00>
		__ticks = 1;
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e9 54       	subi	r30, 0x49	; 73
    1adc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
    1ae6:	64 c0       	rjmp	.+200    	; 0x1bb0 <main+0xdc8>
	else if (__tmp > 65535)
    1ae8:	fe 01       	movw	r30, r28
    1aea:	e7 54       	subi	r30, 0x47	; 71
    1aec:	fe 4f       	sbci	r31, 0xFE	; 254
    1aee:	60 81       	ld	r22, Z
    1af0:	71 81       	ldd	r23, Z+1	; 0x01
    1af2:	82 81       	ldd	r24, Z+2	; 0x02
    1af4:	93 81       	ldd	r25, Z+3	; 0x03
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	57 e4       	ldi	r21, 0x47	; 71
    1afe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b02:	18 16       	cp	r1, r24
    1b04:	0c f0       	brlt	.+2      	; 0x1b08 <main+0xd20>
    1b06:	43 c0       	rjmp	.+134    	; 0x1b8e <main+0xda6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e3 54       	subi	r30, 0x43	; 67
    1b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8e 01       	movw	r16, r28
    1b28:	09 54       	subi	r16, 0x49	; 73
    1b2a:	1e 4f       	sbci	r17, 0xFE	; 254
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	f8 01       	movw	r30, r16
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	80 83       	st	Z, r24
    1b3e:	1f c0       	rjmp	.+62     	; 0x1b7e <main+0xd96>
    1b40:	fe 01       	movw	r30, r28
    1b42:	eb 54       	subi	r30, 0x4B	; 75
    1b44:	fe 4f       	sbci	r31, 0xFE	; 254
    1b46:	88 ec       	ldi	r24, 0xC8	; 200
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	80 83       	st	Z, r24
    1b4e:	fe 01       	movw	r30, r28
    1b50:	eb 54       	subi	r30, 0x4B	; 75
    1b52:	fe 4f       	sbci	r31, 0xFE	; 254
    1b54:	80 81       	ld	r24, Z
    1b56:	91 81       	ldd	r25, Z+1	; 0x01
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <main+0xd70>
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	eb 54       	subi	r30, 0x4B	; 75
    1b60:	fe 4f       	sbci	r31, 0xFE	; 254
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b66:	de 01       	movw	r26, r28
    1b68:	a9 54       	subi	r26, 0x49	; 73
    1b6a:	be 4f       	sbci	r27, 0xFE	; 254
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e9 54       	subi	r30, 0x49	; 73
    1b70:	fe 4f       	sbci	r31, 0xFE	; 254
    1b72:	80 81       	ld	r24, Z
    1b74:	91 81       	ldd	r25, Z+1	; 0x01
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	11 96       	adiw	r26, 0x01	; 1
    1b7a:	9c 93       	st	X, r25
    1b7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e9 54       	subi	r30, 0x49	; 73
    1b82:	fe 4f       	sbci	r31, 0xFE	; 254
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	d1 f6       	brne	.-76     	; 0x1b40 <main+0xd58>
    1b8c:	27 c0       	rjmp	.+78     	; 0x1bdc <main+0xdf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8e:	8e 01       	movw	r16, r28
    1b90:	09 54       	subi	r16, 0x49	; 73
    1b92:	1e 4f       	sbci	r17, 0xFE	; 254
    1b94:	fe 01       	movw	r30, r28
    1b96:	e7 54       	subi	r30, 0x47	; 71
    1b98:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	f8 01       	movw	r30, r16
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	80 83       	st	Z, r24
    1bb0:	de 01       	movw	r26, r28
    1bb2:	ad 54       	subi	r26, 0x4D	; 77
    1bb4:	be 4f       	sbci	r27, 0xFE	; 254
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e9 54       	subi	r30, 0x49	; 73
    1bba:	fe 4f       	sbci	r31, 0xFE	; 254
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	8d 93       	st	X+, r24
    1bc2:	9c 93       	st	X, r25
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ed 54       	subi	r30, 0x4D	; 77
    1bc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bca:	80 81       	ld	r24, Z
    1bcc:	91 81       	ldd	r25, Z+1	; 0x01
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <main+0xde6>
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ed 54       	subi	r30, 0x4D	; 77
    1bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
            _delay_ms(DEFUALT_DELAY_TIME * 4);
            LCD_VidClearScreen();
    1bdc:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
            // Send Order to open door
            LCD_VidSendString_XY("DOOR is OPENING", 0, 0);
    1be0:	8a ef       	ldi	r24, 0xFA	; 250
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            DIO_VidSetPinValue(Port_B, LED_CLOSE_DOOR, PinLow);
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	62 e0       	ldi	r22, 0x02	; 2
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
            DIO_VidSetPinValue(Port_B, LED_OPEN_DOOR, PinHigh);
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	41 e0       	ldi	r20, 0x01	; 1
    1bfc:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
            UART_VidSendByte(DOOR_OPEN);
    1c00:	8a e1       	ldi	r24, 0x1A	; 26
    1c02:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>
    1c06:	fe 01       	movw	r30, r28
    1c08:	e1 55       	subi	r30, 0x51	; 81
    1c0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a6 e9       	ldi	r26, 0x96	; 150
    1c12:	b4 e4       	ldi	r27, 0x44	; 68
    1c14:	80 83       	st	Z, r24
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	a2 83       	std	Z+2, r26	; 0x02
    1c1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	8e 01       	movw	r16, r28
    1c1e:	05 55       	subi	r16, 0x55	; 85
    1c20:	1e 4f       	sbci	r17, 0xFE	; 254
    1c22:	fe 01       	movw	r30, r28
    1c24:	e1 55       	subi	r30, 0x51	; 81
    1c26:	fe 4f       	sbci	r31, 0xFE	; 254
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a ef       	ldi	r20, 0xFA	; 250
    1c36:	54 e4       	ldi	r21, 0x44	; 68
    1c38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	f8 01       	movw	r30, r16
    1c42:	80 83       	st	Z, r24
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	a2 83       	std	Z+2, r26	; 0x02
    1c48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e5 55       	subi	r30, 0x55	; 85
    1c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e8       	ldi	r20, 0x80	; 128
    1c5e:	5f e3       	ldi	r21, 0x3F	; 63
    1c60:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c64:	88 23       	and	r24, r24
    1c66:	44 f4       	brge	.+16     	; 0x1c78 <main+0xe90>
		__ticks = 1;
    1c68:	fe 01       	movw	r30, r28
    1c6a:	e7 55       	subi	r30, 0x57	; 87
    1c6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	80 83       	st	Z, r24
    1c76:	64 c0       	rjmp	.+200    	; 0x1d40 <main+0xf58>
	else if (__tmp > 65535)
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e5 55       	subi	r30, 0x55	; 85
    1c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c7e:	60 81       	ld	r22, Z
    1c80:	71 81       	ldd	r23, Z+1	; 0x01
    1c82:	82 81       	ldd	r24, Z+2	; 0x02
    1c84:	93 81       	ldd	r25, Z+3	; 0x03
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	57 e4       	ldi	r21, 0x47	; 71
    1c8e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c92:	18 16       	cp	r1, r24
    1c94:	0c f0       	brlt	.+2      	; 0x1c98 <main+0xeb0>
    1c96:	43 c0       	rjmp	.+134    	; 0x1d1e <main+0xf36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e1 55       	subi	r30, 0x51	; 81
    1c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e2       	ldi	r20, 0x20	; 32
    1cac:	51 e4       	ldi	r21, 0x41	; 65
    1cae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	07 55       	subi	r16, 0x57	; 87
    1cba:	1e 4f       	sbci	r17, 0xFE	; 254
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	f8 01       	movw	r30, r16
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	80 83       	st	Z, r24
    1cce:	1f c0       	rjmp	.+62     	; 0x1d0e <main+0xf26>
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e9 55       	subi	r30, 0x59	; 89
    1cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd6:	88 ec       	ldi	r24, 0xC8	; 200
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	80 83       	st	Z, r24
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e9 55       	subi	r30, 0x59	; 89
    1ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <main+0xf00>
    1cec:	fe 01       	movw	r30, r28
    1cee:	e9 55       	subi	r30, 0x59	; 89
    1cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf6:	de 01       	movw	r26, r28
    1cf8:	a7 55       	subi	r26, 0x57	; 87
    1cfa:	be 4f       	sbci	r27, 0xFE	; 254
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e7 55       	subi	r30, 0x57	; 87
    1d00:	fe 4f       	sbci	r31, 0xFE	; 254
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	11 96       	adiw	r26, 0x01	; 1
    1d0a:	9c 93       	st	X, r25
    1d0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e7 55       	subi	r30, 0x57	; 87
    1d12:	fe 4f       	sbci	r31, 0xFE	; 254
    1d14:	80 81       	ld	r24, Z
    1d16:	91 81       	ldd	r25, Z+1	; 0x01
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	d1 f6       	brne	.-76     	; 0x1cd0 <main+0xee8>
    1d1c:	27 c0       	rjmp	.+78     	; 0x1d6c <main+0xf84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1e:	8e 01       	movw	r16, r28
    1d20:	07 55       	subi	r16, 0x57	; 87
    1d22:	1e 4f       	sbci	r17, 0xFE	; 254
    1d24:	fe 01       	movw	r30, r28
    1d26:	e5 55       	subi	r30, 0x55	; 85
    1d28:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2a:	60 81       	ld	r22, Z
    1d2c:	71 81       	ldd	r23, Z+1	; 0x01
    1d2e:	82 81       	ldd	r24, Z+2	; 0x02
    1d30:	93 81       	ldd	r25, Z+3	; 0x03
    1d32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	80 83       	st	Z, r24
    1d40:	de 01       	movw	r26, r28
    1d42:	ab 55       	subi	r26, 0x5B	; 91
    1d44:	be 4f       	sbci	r27, 0xFE	; 254
    1d46:	fe 01       	movw	r30, r28
    1d48:	e7 55       	subi	r30, 0x57	; 87
    1d4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d4c:	80 81       	ld	r24, Z
    1d4e:	91 81       	ldd	r25, Z+1	; 0x01
    1d50:	8d 93       	st	X+, r24
    1d52:	9c 93       	st	X, r25
    1d54:	fe 01       	movw	r30, r28
    1d56:	eb 55       	subi	r30, 0x5B	; 91
    1d58:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5a:	80 81       	ld	r24, Z
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <main+0xf76>
    1d62:	fe 01       	movw	r30, r28
    1d64:	eb 55       	subi	r30, 0x5B	; 91
    1d66:	fe 4f       	sbci	r31, 0xFE	; 254
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
            _delay_ms(DOOR_TIME);
            LCD_VidClearScreen();
    1d6c:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
            // Send Order to close door
            LCD_VidSendString_XY("DOOR is CLOSING", 0, 0);
    1d70:	8a e0       	ldi	r24, 0x0A	; 10
    1d72:	91 e0       	ldi	r25, 0x01	; 1
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            DIO_VidSetPinValue(Port_B, LED_OPEN_DOOR, PinLow);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	61 e0       	ldi	r22, 0x01	; 1
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
            DIO_VidSetPinValue(Port_B, LED_CLOSE_DOOR, PinHigh);
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	62 e0       	ldi	r22, 0x02	; 2
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
            UART_VidSendByte(DOOR_CLOSE);
    1d90:	84 e2       	ldi	r24, 0x24	; 36
    1d92:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>
    1d96:	fe 01       	movw	r30, r28
    1d98:	ef 55       	subi	r30, 0x5F	; 95
    1d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a6 e9       	ldi	r26, 0x96	; 150
    1da2:	b4 e4       	ldi	r27, 0x44	; 68
    1da4:	80 83       	st	Z, r24
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	a2 83       	std	Z+2, r26	; 0x02
    1daa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dac:	8e 01       	movw	r16, r28
    1dae:	03 56       	subi	r16, 0x63	; 99
    1db0:	1e 4f       	sbci	r17, 0xFE	; 254
    1db2:	fe 01       	movw	r30, r28
    1db4:	ef 55       	subi	r30, 0x5F	; 95
    1db6:	fe 4f       	sbci	r31, 0xFE	; 254
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a ef       	ldi	r20, 0xFA	; 250
    1dc6:	54 e4       	ldi	r21, 0x44	; 68
    1dc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	f8 01       	movw	r30, r16
    1dd2:	80 83       	st	Z, r24
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	a2 83       	std	Z+2, r26	; 0x02
    1dd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e3 56       	subi	r30, 0x63	; 99
    1dde:	fe 4f       	sbci	r31, 0xFE	; 254
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	44 f4       	brge	.+16     	; 0x1e08 <main+0x1020>
		__ticks = 1;
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e5 56       	subi	r30, 0x65	; 101
    1dfc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
    1e06:	64 c0       	rjmp	.+200    	; 0x1ed0 <main+0x10e8>
	else if (__tmp > 65535)
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e3 56       	subi	r30, 0x63	; 99
    1e0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	0c f0       	brlt	.+2      	; 0x1e28 <main+0x1040>
    1e26:	43 c0       	rjmp	.+134    	; 0x1eae <main+0x10c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	fe 01       	movw	r30, r28
    1e2a:	ef 55       	subi	r30, 0x5F	; 95
    1e2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2e:	60 81       	ld	r22, Z
    1e30:	71 81       	ldd	r23, Z+1	; 0x01
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	93 81       	ldd	r25, Z+3	; 0x03
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	8e 01       	movw	r16, r28
    1e48:	05 56       	subi	r16, 0x65	; 101
    1e4a:	1e 4f       	sbci	r17, 0xFE	; 254
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	f8 01       	movw	r30, r16
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	80 83       	st	Z, r24
    1e5e:	1f c0       	rjmp	.+62     	; 0x1e9e <main+0x10b6>
    1e60:	fe 01       	movw	r30, r28
    1e62:	e7 56       	subi	r30, 0x67	; 103
    1e64:	fe 4f       	sbci	r31, 0xFE	; 254
    1e66:	88 ec       	ldi	r24, 0xC8	; 200
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e7 56       	subi	r30, 0x67	; 103
    1e72:	fe 4f       	sbci	r31, 0xFE	; 254
    1e74:	80 81       	ld	r24, Z
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <main+0x1090>
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e7 56       	subi	r30, 0x67	; 103
    1e80:	fe 4f       	sbci	r31, 0xFE	; 254
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e86:	de 01       	movw	r26, r28
    1e88:	a5 56       	subi	r26, 0x65	; 101
    1e8a:	be 4f       	sbci	r27, 0xFE	; 254
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e5 56       	subi	r30, 0x65	; 101
    1e90:	fe 4f       	sbci	r31, 0xFE	; 254
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	9c 93       	st	X, r25
    1e9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e5 56       	subi	r30, 0x65	; 101
    1ea2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	d1 f6       	brne	.-76     	; 0x1e60 <main+0x1078>
    1eac:	27 c0       	rjmp	.+78     	; 0x1efc <main+0x1114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eae:	8e 01       	movw	r16, r28
    1eb0:	05 56       	subi	r16, 0x65	; 101
    1eb2:	1e 4f       	sbci	r17, 0xFE	; 254
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e3 56       	subi	r30, 0x63	; 99
    1eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	f8 01       	movw	r30, r16
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
    1ed0:	de 01       	movw	r26, r28
    1ed2:	a9 56       	subi	r26, 0x69	; 105
    1ed4:	be 4f       	sbci	r27, 0xFE	; 254
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e5 56       	subi	r30, 0x65	; 101
    1eda:	fe 4f       	sbci	r31, 0xFE	; 254
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	8d 93       	st	X+, r24
    1ee2:	9c 93       	st	X, r25
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e9 56       	subi	r30, 0x69	; 105
    1ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eea:	80 81       	ld	r24, Z
    1eec:	91 81       	ldd	r25, Z+1	; 0x01
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <main+0x1106>
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e9 56       	subi	r30, 0x69	; 105
    1ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	80 83       	st	Z, r24
            _delay_ms(DOOR_TIME);
            LCD_VidClearScreen();
    1efc:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
    1f00:	e8 c0       	rjmp	.+464    	; 0x20d2 <main+0x12ea>

            break;
        }
        else
        {
            pass_tries_count++;
    1f02:	de 01       	movw	r26, r28
    1f04:	ab 5e       	subi	r26, 0xEB	; 235
    1f06:	bd 4f       	sbci	r27, 0xFD	; 253
    1f08:	fe 01       	movw	r30, r28
    1f0a:	eb 5e       	subi	r30, 0xEB	; 235
    1f0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f0e:	80 81       	ld	r24, Z
    1f10:	8f 5f       	subi	r24, 0xFF	; 255
    1f12:	8c 93       	st	X, r24
            LCD_VidSendString_XY("Wrong Pass!!", 0, 2);
    1f14:	8a e1       	ldi	r24, 0x1A	; 26
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	42 e0       	ldi	r20, 0x02	; 2
    1f1c:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            LCD_VidSendString_XY("Tries Left:", 1, 0);
    1f20:	87 e2       	ldi	r24, 0x27	; 39
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	61 e0       	ldi	r22, 0x01	; 1
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            LCD_VidIntegerToString((TRIES_ALLOWED - pass_tries_count));
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	eb 5e       	subi	r30, 0xEB	; 235
    1f30:	fd 4f       	sbci	r31, 0xFD	; 253
    1f32:	80 81       	ld	r24, Z
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	83 e0       	ldi	r24, 0x03	; 3
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	82 1b       	sub	r24, r18
    1f3e:	93 0b       	sbc	r25, r19
    1f40:	0e 94 33 3a 	call	0x7466	; 0x7466 <LCD_VidIntegerToString>
    1f44:	fe 01       	movw	r30, r28
    1f46:	ed 56       	subi	r30, 0x6D	; 109
    1f48:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a8 e4       	ldi	r26, 0x48	; 72
    1f50:	b4 e4       	ldi	r27, 0x44	; 68
    1f52:	80 83       	st	Z, r24
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	a2 83       	std	Z+2, r26	; 0x02
    1f58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5a:	8e 01       	movw	r16, r28
    1f5c:	01 57       	subi	r16, 0x71	; 113
    1f5e:	1e 4f       	sbci	r17, 0xFE	; 254
    1f60:	fe 01       	movw	r30, r28
    1f62:	ed 56       	subi	r30, 0x6D	; 109
    1f64:	fe 4f       	sbci	r31, 0xFE	; 254
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	4a ef       	ldi	r20, 0xFA	; 250
    1f74:	54 e4       	ldi	r21, 0x44	; 68
    1f76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	f8 01       	movw	r30, r16
    1f80:	80 83       	st	Z, r24
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	a2 83       	std	Z+2, r26	; 0x02
    1f86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e1 57       	subi	r30, 0x71	; 113
    1f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8e:	60 81       	ld	r22, Z
    1f90:	71 81       	ldd	r23, Z+1	; 0x01
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	93 81       	ldd	r25, Z+3	; 0x03
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e8       	ldi	r20, 0x80	; 128
    1f9c:	5f e3       	ldi	r21, 0x3F	; 63
    1f9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fa2:	88 23       	and	r24, r24
    1fa4:	44 f4       	brge	.+16     	; 0x1fb6 <main+0x11ce>
		__ticks = 1;
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e3 57       	subi	r30, 0x73	; 115
    1faa:	fe 4f       	sbci	r31, 0xFE	; 254
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
    1fb4:	64 c0       	rjmp	.+200    	; 0x207e <main+0x1296>
	else if (__tmp > 65535)
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e1 57       	subi	r30, 0x71	; 113
    1fba:	fe 4f       	sbci	r31, 0xFE	; 254
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	3f ef       	ldi	r19, 0xFF	; 255
    1fc8:	4f e7       	ldi	r20, 0x7F	; 127
    1fca:	57 e4       	ldi	r21, 0x47	; 71
    1fcc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fd0:	18 16       	cp	r1, r24
    1fd2:	0c f0       	brlt	.+2      	; 0x1fd6 <main+0x11ee>
    1fd4:	43 c0       	rjmp	.+134    	; 0x205c <main+0x1274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	ed 56       	subi	r30, 0x6D	; 109
    1fda:	fe 4f       	sbci	r31, 0xFE	; 254
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e2       	ldi	r20, 0x20	; 32
    1fea:	51 e4       	ldi	r21, 0x41	; 65
    1fec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8e 01       	movw	r16, r28
    1ff6:	03 57       	subi	r16, 0x73	; 115
    1ff8:	1e 4f       	sbci	r17, 0xFE	; 254
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	f8 01       	movw	r30, r16
    2008:	91 83       	std	Z+1, r25	; 0x01
    200a:	80 83       	st	Z, r24
    200c:	1f c0       	rjmp	.+62     	; 0x204c <main+0x1264>
    200e:	fe 01       	movw	r30, r28
    2010:	e5 57       	subi	r30, 0x75	; 117
    2012:	fe 4f       	sbci	r31, 0xFE	; 254
    2014:	88 ec       	ldi	r24, 0xC8	; 200
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	91 83       	std	Z+1, r25	; 0x01
    201a:	80 83       	st	Z, r24
    201c:	fe 01       	movw	r30, r28
    201e:	e5 57       	subi	r30, 0x75	; 117
    2020:	fe 4f       	sbci	r31, 0xFE	; 254
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <main+0x123e>
    202a:	fe 01       	movw	r30, r28
    202c:	e5 57       	subi	r30, 0x75	; 117
    202e:	fe 4f       	sbci	r31, 0xFE	; 254
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2034:	de 01       	movw	r26, r28
    2036:	a3 57       	subi	r26, 0x73	; 115
    2038:	be 4f       	sbci	r27, 0xFE	; 254
    203a:	fe 01       	movw	r30, r28
    203c:	e3 57       	subi	r30, 0x73	; 115
    203e:	fe 4f       	sbci	r31, 0xFE	; 254
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	11 96       	adiw	r26, 0x01	; 1
    2048:	9c 93       	st	X, r25
    204a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204c:	fe 01       	movw	r30, r28
    204e:	e3 57       	subi	r30, 0x73	; 115
    2050:	fe 4f       	sbci	r31, 0xFE	; 254
    2052:	80 81       	ld	r24, Z
    2054:	91 81       	ldd	r25, Z+1	; 0x01
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	d1 f6       	brne	.-76     	; 0x200e <main+0x1226>
    205a:	27 c0       	rjmp	.+78     	; 0x20aa <main+0x12c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205c:	8e 01       	movw	r16, r28
    205e:	03 57       	subi	r16, 0x73	; 115
    2060:	1e 4f       	sbci	r17, 0xFE	; 254
    2062:	fe 01       	movw	r30, r28
    2064:	e1 57       	subi	r30, 0x71	; 113
    2066:	fe 4f       	sbci	r31, 0xFE	; 254
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	f8 01       	movw	r30, r16
    207a:	91 83       	std	Z+1, r25	; 0x01
    207c:	80 83       	st	Z, r24
    207e:	de 01       	movw	r26, r28
    2080:	a7 57       	subi	r26, 0x77	; 119
    2082:	be 4f       	sbci	r27, 0xFE	; 254
    2084:	fe 01       	movw	r30, r28
    2086:	e3 57       	subi	r30, 0x73	; 115
    2088:	fe 4f       	sbci	r31, 0xFE	; 254
    208a:	80 81       	ld	r24, Z
    208c:	91 81       	ldd	r25, Z+1	; 0x01
    208e:	8d 93       	st	X+, r24
    2090:	9c 93       	st	X, r25
    2092:	fe 01       	movw	r30, r28
    2094:	e7 57       	subi	r30, 0x77	; 119
    2096:	fe 4f       	sbci	r31, 0xFE	; 254
    2098:	80 81       	ld	r24, Z
    209a:	91 81       	ldd	r25, Z+1	; 0x01
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <main+0x12b4>
    20a0:	fe 01       	movw	r30, r28
    20a2:	e7 57       	subi	r30, 0x77	; 119
    20a4:	fe 4f       	sbci	r31, 0xFE	; 254
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
            _delay_ms(DEFUALT_DELAY_TIME * 4);
            LCD_VidClearScreen();
    20aa:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
            if (pass_tries_count >= TRIES_ALLOWED)
    20ae:	fe 01       	movw	r30, r28
    20b0:	eb 5e       	subi	r30, 0xEB	; 235
    20b2:	fd 4f       	sbci	r31, 0xFD	; 253
    20b4:	80 81       	ld	r24, Z
    20b6:	83 30       	cpi	r24, 0x03	; 3
    20b8:	08 f4       	brcc	.+2      	; 0x20bc <main+0x12d4>
    20ba:	9d ca       	rjmp	.-2758   	; 0x15f6 <main+0x80e>
            {
                EEPROM_writeByte(LOGIN_BLOCKED_ADDRESS, TRUE);
    20bc:	8a e0       	ldi	r24, 0x0A	; 10
    20be:	91 e0       	ldi	r25, 0x01	; 1
    20c0:	61 e0       	ldi	r22, 0x01	; 1
    20c2:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <EEPROM_writeByte>
                Block_Mode_Flag = TRUE;
    20c6:	fe 01       	movw	r30, r28
    20c8:	e9 5d       	subi	r30, 0xD9	; 217
    20ca:	fd 4f       	sbci	r31, 0xFD	; 253
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	80 83       	st	Z, r24
    20d0:	92 ca       	rjmp	.-2780   	; 0x15f6 <main+0x80e>
        }
    }

    while (1)
    {
        switch (Local_u8ShowMenu)
    20d2:	fe 01       	movw	r30, r28
    20d4:	e3 5e       	subi	r30, 0xE3	; 227
    20d6:	fd 4f       	sbci	r31, 0xFD	; 253
    20d8:	80 81       	ld	r24, Z
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	c6 5d       	subi	r28, 0xD6	; 214
    20e0:	dd 4f       	sbci	r29, 0xFD	; 253
    20e2:	39 83       	std	Y+1, r19	; 0x01
    20e4:	28 83       	st	Y, r18
    20e6:	ca 52       	subi	r28, 0x2A	; 42
    20e8:	d2 40       	sbci	r29, 0x02	; 2
    20ea:	c6 5d       	subi	r28, 0xD6	; 214
    20ec:	dd 4f       	sbci	r29, 0xFD	; 253
    20ee:	88 81       	ld	r24, Y
    20f0:	99 81       	ldd	r25, Y+1	; 0x01
    20f2:	ca 52       	subi	r28, 0x2A	; 42
    20f4:	d2 40       	sbci	r29, 0x02	; 2
    20f6:	84 30       	cpi	r24, 0x04	; 4
    20f8:	91 05       	cpc	r25, r1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <main+0x1316>
    20fc:	67 c7       	rjmp	.+3790   	; 0x2fcc <main+0x21e4>
    20fe:	c6 5d       	subi	r28, 0xD6	; 214
    2100:	dd 4f       	sbci	r29, 0xFD	; 253
    2102:	e8 81       	ld	r30, Y
    2104:	f9 81       	ldd	r31, Y+1	; 0x01
    2106:	ca 52       	subi	r28, 0x2A	; 42
    2108:	d2 40       	sbci	r29, 0x02	; 2
    210a:	e5 30       	cpi	r30, 0x05	; 5
    210c:	f1 05       	cpc	r31, r1
    210e:	04 f5       	brge	.+64     	; 0x2150 <main+0x1368>
    2110:	c6 5d       	subi	r28, 0xD6	; 214
    2112:	dd 4f       	sbci	r29, 0xFD	; 253
    2114:	28 81       	ld	r18, Y
    2116:	39 81       	ldd	r19, Y+1	; 0x01
    2118:	ca 52       	subi	r28, 0x2A	; 42
    211a:	d2 40       	sbci	r29, 0x02	; 2
    211c:	22 30       	cpi	r18, 0x02	; 2
    211e:	31 05       	cpc	r19, r1
    2120:	11 f4       	brne	.+4      	; 0x2126 <main+0x133e>
    2122:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <main+0x2dd2>
    2126:	c6 5d       	subi	r28, 0xD6	; 214
    2128:	dd 4f       	sbci	r29, 0xFD	; 253
    212a:	88 81       	ld	r24, Y
    212c:	99 81       	ldd	r25, Y+1	; 0x01
    212e:	ca 52       	subi	r28, 0x2A	; 42
    2130:	d2 40       	sbci	r29, 0x02	; 2
    2132:	83 30       	cpi	r24, 0x03	; 3
    2134:	91 05       	cpc	r25, r1
    2136:	0c f0       	brlt	.+2      	; 0x213a <main+0x1352>
    2138:	5c c3       	rjmp	.+1720   	; 0x27f2 <main+0x1a0a>
    213a:	c6 5d       	subi	r28, 0xD6	; 214
    213c:	dd 4f       	sbci	r29, 0xFD	; 253
    213e:	e8 81       	ld	r30, Y
    2140:	f9 81       	ldd	r31, Y+1	; 0x01
    2142:	ca 52       	subi	r28, 0x2A	; 42
    2144:	d2 40       	sbci	r29, 0x02	; 2
    2146:	e1 30       	cpi	r30, 0x01	; 1
    2148:	f1 05       	cpc	r31, r1
    214a:	29 f1       	breq	.+74     	; 0x2196 <main+0x13ae>
    214c:	0c 94 1f 26 	jmp	0x4c3e	; 0x4c3e <main+0x3e56>
    2150:	c6 5d       	subi	r28, 0xD6	; 214
    2152:	dd 4f       	sbci	r29, 0xFD	; 253
    2154:	28 81       	ld	r18, Y
    2156:	39 81       	ldd	r19, Y+1	; 0x01
    2158:	ca 52       	subi	r28, 0x2A	; 42
    215a:	d2 40       	sbci	r29, 0x02	; 2
    215c:	24 31       	cpi	r18, 0x14	; 20
    215e:	31 05       	cpc	r19, r1
    2160:	11 f4       	brne	.+4      	; 0x2166 <main+0x137e>
    2162:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <main+0x32ca>
    2166:	c6 5d       	subi	r28, 0xD6	; 214
    2168:	dd 4f       	sbci	r29, 0xFD	; 253
    216a:	88 81       	ld	r24, Y
    216c:	99 81       	ldd	r25, Y+1	; 0x01
    216e:	ca 52       	subi	r28, 0x2A	; 42
    2170:	d2 40       	sbci	r29, 0x02	; 2
    2172:	86 31       	cpi	r24, 0x16	; 22
    2174:	91 05       	cpc	r25, r1
    2176:	11 f4       	brne	.+4      	; 0x217c <main+0x1394>
    2178:	0c 94 a3 23 	jmp	0x4746	; 0x4746 <main+0x395e>
    217c:	c6 5d       	subi	r28, 0xD6	; 214
    217e:	dd 4f       	sbci	r29, 0xFD	; 253
    2180:	e8 81       	ld	r30, Y
    2182:	f9 81       	ldd	r31, Y+1	; 0x01
    2184:	ca 52       	subi	r28, 0x2A	; 42
    2186:	d2 40       	sbci	r29, 0x02	; 2
    2188:	ed 30       	cpi	r30, 0x0D	; 13
    218a:	f1 05       	cpc	r31, r1
    218c:	11 f4       	brne	.+4      	; 0x2192 <main+0x13aa>
    218e:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <main+0x2b8c>
    2192:	0c 94 1f 26 	jmp	0x4c3e	; 0x4c3e <main+0x3e56>
        {
        case MAIN_MENU:
            LCD_VidClearScreen();
    2196:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>

            LCD_VidSendString_XY("1.Door    2.Fan", 0, 0);
    219a:	83 e3       	ldi	r24, 0x33	; 51
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            LCD_VidSendString_XY("3.Rooms", 1, 4);
    21a6:	83 e4       	ldi	r24, 0x43	; 67
    21a8:	91 e0       	ldi	r25, 0x01	; 1
    21aa:	61 e0       	ldi	r22, 0x01	; 1
    21ac:	44 e0       	ldi	r20, 0x04	; 4
    21ae:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            WaitForKey(&Local_u8KeyPressed);
    21b2:	ce 01       	movw	r24, r28
    21b4:	82 5e       	subi	r24, 0xE2	; 226
    21b6:	9d 4f       	sbci	r25, 0xFD	; 253
    21b8:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <WaitForKey>

            if (SELECT_DOOR == Local_u8KeyPressed)
    21bc:	fe 01       	movw	r30, r28
    21be:	e2 5e       	subi	r30, 0xE2	; 226
    21c0:	fd 4f       	sbci	r31, 0xFD	; 253
    21c2:	80 81       	ld	r24, Z
    21c4:	81 33       	cpi	r24, 0x31	; 49
    21c6:	09 f0       	breq	.+2      	; 0x21ca <main+0x13e2>
    21c8:	c0 c0       	rjmp	.+384    	; 0x234a <main+0x1562>
            {
                LCD_VidClearScreen();
    21ca:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Door");
    21ce:	8b e4       	ldi	r24, 0x4B	; 75
    21d0:	91 e0       	ldi	r25, 0x01	; 1
    21d2:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    21d6:	fe 01       	movw	r30, r28
    21d8:	eb 57       	subi	r30, 0x7B	; 123
    21da:	fe 4f       	sbci	r31, 0xFE	; 254
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	a8 e4       	ldi	r26, 0x48	; 72
    21e2:	b3 e4       	ldi	r27, 0x43	; 67
    21e4:	80 83       	st	Z, r24
    21e6:	91 83       	std	Z+1, r25	; 0x01
    21e8:	a2 83       	std	Z+2, r26	; 0x02
    21ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ec:	8e 01       	movw	r16, r28
    21ee:	0f 57       	subi	r16, 0x7F	; 127
    21f0:	1e 4f       	sbci	r17, 0xFE	; 254
    21f2:	fe 01       	movw	r30, r28
    21f4:	eb 57       	subi	r30, 0x7B	; 123
    21f6:	fe 4f       	sbci	r31, 0xFE	; 254
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a ef       	ldi	r20, 0xFA	; 250
    2206:	54 e4       	ldi	r21, 0x44	; 68
    2208:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	f8 01       	movw	r30, r16
    2212:	80 83       	st	Z, r24
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	a2 83       	std	Z+2, r26	; 0x02
    2218:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    221a:	fe 01       	movw	r30, r28
    221c:	ef 57       	subi	r30, 0x7F	; 127
    221e:	fe 4f       	sbci	r31, 0xFE	; 254
    2220:	60 81       	ld	r22, Z
    2222:	71 81       	ldd	r23, Z+1	; 0x01
    2224:	82 81       	ldd	r24, Z+2	; 0x02
    2226:	93 81       	ldd	r25, Z+3	; 0x03
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e8       	ldi	r20, 0x80	; 128
    222e:	5f e3       	ldi	r21, 0x3F	; 63
    2230:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2234:	88 23       	and	r24, r24
    2236:	44 f4       	brge	.+16     	; 0x2248 <main+0x1460>
		__ticks = 1;
    2238:	fe 01       	movw	r30, r28
    223a:	e1 58       	subi	r30, 0x81	; 129
    223c:	fe 4f       	sbci	r31, 0xFE	; 254
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
    2246:	64 c0       	rjmp	.+200    	; 0x2310 <main+0x1528>
	else if (__tmp > 65535)
    2248:	fe 01       	movw	r30, r28
    224a:	ef 57       	subi	r30, 0x7F	; 127
    224c:	fe 4f       	sbci	r31, 0xFE	; 254
    224e:	60 81       	ld	r22, Z
    2250:	71 81       	ldd	r23, Z+1	; 0x01
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	93 81       	ldd	r25, Z+3	; 0x03
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	3f ef       	ldi	r19, 0xFF	; 255
    225a:	4f e7       	ldi	r20, 0x7F	; 127
    225c:	57 e4       	ldi	r21, 0x47	; 71
    225e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2262:	18 16       	cp	r1, r24
    2264:	0c f0       	brlt	.+2      	; 0x2268 <main+0x1480>
    2266:	43 c0       	rjmp	.+134    	; 0x22ee <main+0x1506>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	fe 01       	movw	r30, r28
    226a:	eb 57       	subi	r30, 0x7B	; 123
    226c:	fe 4f       	sbci	r31, 0xFE	; 254
    226e:	60 81       	ld	r22, Z
    2270:	71 81       	ldd	r23, Z+1	; 0x01
    2272:	82 81       	ldd	r24, Z+2	; 0x02
    2274:	93 81       	ldd	r25, Z+3	; 0x03
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e2       	ldi	r20, 0x20	; 32
    227c:	51 e4       	ldi	r21, 0x41	; 65
    227e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8e 01       	movw	r16, r28
    2288:	01 58       	subi	r16, 0x81	; 129
    228a:	1e 4f       	sbci	r17, 0xFE	; 254
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	f8 01       	movw	r30, r16
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
    229e:	1f c0       	rjmp	.+62     	; 0x22de <main+0x14f6>
    22a0:	fe 01       	movw	r30, r28
    22a2:	e3 58       	subi	r30, 0x83	; 131
    22a4:	fe 4f       	sbci	r31, 0xFE	; 254
    22a6:	88 ec       	ldi	r24, 0xC8	; 200
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	fe 01       	movw	r30, r28
    22b0:	e3 58       	subi	r30, 0x83	; 131
    22b2:	fe 4f       	sbci	r31, 0xFE	; 254
    22b4:	80 81       	ld	r24, Z
    22b6:	91 81       	ldd	r25, Z+1	; 0x01
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <main+0x14d0>
    22bc:	fe 01       	movw	r30, r28
    22be:	e3 58       	subi	r30, 0x83	; 131
    22c0:	fe 4f       	sbci	r31, 0xFE	; 254
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c6:	de 01       	movw	r26, r28
    22c8:	a1 58       	subi	r26, 0x81	; 129
    22ca:	be 4f       	sbci	r27, 0xFE	; 254
    22cc:	fe 01       	movw	r30, r28
    22ce:	e1 58       	subi	r30, 0x81	; 129
    22d0:	fe 4f       	sbci	r31, 0xFE	; 254
    22d2:	80 81       	ld	r24, Z
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	11 96       	adiw	r26, 0x01	; 1
    22da:	9c 93       	st	X, r25
    22dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22de:	fe 01       	movw	r30, r28
    22e0:	e1 58       	subi	r30, 0x81	; 129
    22e2:	fe 4f       	sbci	r31, 0xFE	; 254
    22e4:	80 81       	ld	r24, Z
    22e6:	91 81       	ldd	r25, Z+1	; 0x01
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	d1 f6       	brne	.-76     	; 0x22a0 <main+0x14b8>
    22ec:	28 c0       	rjmp	.+80     	; 0x233e <main+0x1556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ee:	8e 01       	movw	r16, r28
    22f0:	01 58       	subi	r16, 0x81	; 129
    22f2:	1e 4f       	sbci	r17, 0xFE	; 254
    22f4:	fe 01       	movw	r30, r28
    22f6:	ef 57       	subi	r30, 0x7F	; 127
    22f8:	fe 4f       	sbci	r31, 0xFE	; 254
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	f8 01       	movw	r30, r16
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	80 83       	st	Z, r24
    2310:	de 01       	movw	r26, r28
    2312:	a5 58       	subi	r26, 0x85	; 133
    2314:	be 4f       	sbci	r27, 0xFE	; 254
    2316:	fe 01       	movw	r30, r28
    2318:	e1 58       	subi	r30, 0x81	; 129
    231a:	fe 4f       	sbci	r31, 0xFE	; 254
    231c:	80 81       	ld	r24, Z
    231e:	91 81       	ldd	r25, Z+1	; 0x01
    2320:	11 96       	adiw	r26, 0x01	; 1
    2322:	9c 93       	st	X, r25
    2324:	8e 93       	st	-X, r24
    2326:	fe 01       	movw	r30, r28
    2328:	e5 58       	subi	r30, 0x85	; 133
    232a:	fe 4f       	sbci	r31, 0xFE	; 254
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <main+0x1548>
    2334:	fe 01       	movw	r30, r28
    2336:	e5 58       	subi	r30, 0x85	; 133
    2338:	fe 4f       	sbci	r31, 0xFE	; 254
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);

                Local_u8ShowMenu = DOOR_MAIN_MENU;
    233e:	fe 01       	movw	r30, r28
    2340:	e3 5e       	subi	r30, 0xE3	; 227
    2342:	fd 4f       	sbci	r31, 0xFD	; 253
    2344:	83 e0       	ldi	r24, 0x03	; 3
    2346:	80 83       	st	Z, r24
    2348:	c4 ce       	rjmp	.-632    	; 0x20d2 <main+0x12ea>
            }

            else if (Local_u8KeyPressed == SELECT_FAN)
    234a:	fe 01       	movw	r30, r28
    234c:	e2 5e       	subi	r30, 0xE2	; 226
    234e:	fd 4f       	sbci	r31, 0xFD	; 253
    2350:	80 81       	ld	r24, Z
    2352:	82 33       	cpi	r24, 0x32	; 50
    2354:	09 f0       	breq	.+2      	; 0x2358 <main+0x1570>
    2356:	c5 c0       	rjmp	.+394    	; 0x24e2 <main+0x16fa>
            {
                LCD_VidClearScreen();
    2358:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Fan");
    235c:	80 e5       	ldi	r24, 0x50	; 80
    235e:	91 e0       	ldi	r25, 0x01	; 1
    2360:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    2364:	fe 01       	movw	r30, r28
    2366:	e9 58       	subi	r30, 0x89	; 137
    2368:	fe 4f       	sbci	r31, 0xFE	; 254
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	a8 e4       	ldi	r26, 0x48	; 72
    2370:	b3 e4       	ldi	r27, 0x43	; 67
    2372:	80 83       	st	Z, r24
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	a2 83       	std	Z+2, r26	; 0x02
    2378:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237a:	8e 01       	movw	r16, r28
    237c:	0d 58       	subi	r16, 0x8D	; 141
    237e:	1e 4f       	sbci	r17, 0xFE	; 254
    2380:	fe 01       	movw	r30, r28
    2382:	e9 58       	subi	r30, 0x89	; 137
    2384:	fe 4f       	sbci	r31, 0xFE	; 254
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	4a ef       	ldi	r20, 0xFA	; 250
    2394:	54 e4       	ldi	r21, 0x44	; 68
    2396:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	f8 01       	movw	r30, r16
    23a0:	80 83       	st	Z, r24
    23a2:	91 83       	std	Z+1, r25	; 0x01
    23a4:	a2 83       	std	Z+2, r26	; 0x02
    23a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23a8:	fe 01       	movw	r30, r28
    23aa:	ed 58       	subi	r30, 0x8D	; 141
    23ac:	fe 4f       	sbci	r31, 0xFE	; 254
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	44 f4       	brge	.+16     	; 0x23d6 <main+0x15ee>
		__ticks = 1;
    23c6:	fe 01       	movw	r30, r28
    23c8:	ef 58       	subi	r30, 0x8F	; 143
    23ca:	fe 4f       	sbci	r31, 0xFE	; 254
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	91 83       	std	Z+1, r25	; 0x01
    23d2:	80 83       	st	Z, r24
    23d4:	64 c0       	rjmp	.+200    	; 0x249e <main+0x16b6>
	else if (__tmp > 65535)
    23d6:	fe 01       	movw	r30, r28
    23d8:	ed 58       	subi	r30, 0x8D	; 141
    23da:	fe 4f       	sbci	r31, 0xFE	; 254
    23dc:	60 81       	ld	r22, Z
    23de:	71 81       	ldd	r23, Z+1	; 0x01
    23e0:	82 81       	ldd	r24, Z+2	; 0x02
    23e2:	93 81       	ldd	r25, Z+3	; 0x03
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	3f ef       	ldi	r19, 0xFF	; 255
    23e8:	4f e7       	ldi	r20, 0x7F	; 127
    23ea:	57 e4       	ldi	r21, 0x47	; 71
    23ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23f0:	18 16       	cp	r1, r24
    23f2:	0c f0       	brlt	.+2      	; 0x23f6 <main+0x160e>
    23f4:	43 c0       	rjmp	.+134    	; 0x247c <main+0x1694>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	fe 01       	movw	r30, r28
    23f8:	e9 58       	subi	r30, 0x89	; 137
    23fa:	fe 4f       	sbci	r31, 0xFE	; 254
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	8e 01       	movw	r16, r28
    2416:	0f 58       	subi	r16, 0x8F	; 143
    2418:	1e 4f       	sbci	r17, 0xFE	; 254
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	f8 01       	movw	r30, r16
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
    242c:	1f c0       	rjmp	.+62     	; 0x246c <main+0x1684>
    242e:	fe 01       	movw	r30, r28
    2430:	e1 59       	subi	r30, 0x91	; 145
    2432:	fe 4f       	sbci	r31, 0xFE	; 254
    2434:	88 ec       	ldi	r24, 0xC8	; 200
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	80 83       	st	Z, r24
    243c:	fe 01       	movw	r30, r28
    243e:	e1 59       	subi	r30, 0x91	; 145
    2440:	fe 4f       	sbci	r31, 0xFE	; 254
    2442:	80 81       	ld	r24, Z
    2444:	91 81       	ldd	r25, Z+1	; 0x01
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <main+0x165e>
    244a:	fe 01       	movw	r30, r28
    244c:	e1 59       	subi	r30, 0x91	; 145
    244e:	fe 4f       	sbci	r31, 0xFE	; 254
    2450:	91 83       	std	Z+1, r25	; 0x01
    2452:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2454:	de 01       	movw	r26, r28
    2456:	af 58       	subi	r26, 0x8F	; 143
    2458:	be 4f       	sbci	r27, 0xFE	; 254
    245a:	fe 01       	movw	r30, r28
    245c:	ef 58       	subi	r30, 0x8F	; 143
    245e:	fe 4f       	sbci	r31, 0xFE	; 254
    2460:	80 81       	ld	r24, Z
    2462:	91 81       	ldd	r25, Z+1	; 0x01
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	11 96       	adiw	r26, 0x01	; 1
    2468:	9c 93       	st	X, r25
    246a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246c:	fe 01       	movw	r30, r28
    246e:	ef 58       	subi	r30, 0x8F	; 143
    2470:	fe 4f       	sbci	r31, 0xFE	; 254
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	d1 f6       	brne	.-76     	; 0x242e <main+0x1646>
    247a:	28 c0       	rjmp	.+80     	; 0x24cc <main+0x16e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247c:	8e 01       	movw	r16, r28
    247e:	0f 58       	subi	r16, 0x8F	; 143
    2480:	1e 4f       	sbci	r17, 0xFE	; 254
    2482:	fe 01       	movw	r30, r28
    2484:	ed 58       	subi	r30, 0x8D	; 141
    2486:	fe 4f       	sbci	r31, 0xFE	; 254
    2488:	60 81       	ld	r22, Z
    248a:	71 81       	ldd	r23, Z+1	; 0x01
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	93 81       	ldd	r25, Z+3	; 0x03
    2490:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	f8 01       	movw	r30, r16
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	80 83       	st	Z, r24
    249e:	de 01       	movw	r26, r28
    24a0:	a3 59       	subi	r26, 0x93	; 147
    24a2:	be 4f       	sbci	r27, 0xFE	; 254
    24a4:	fe 01       	movw	r30, r28
    24a6:	ef 58       	subi	r30, 0x8F	; 143
    24a8:	fe 4f       	sbci	r31, 0xFE	; 254
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	11 96       	adiw	r26, 0x01	; 1
    24b0:	9c 93       	st	X, r25
    24b2:	8e 93       	st	-X, r24
    24b4:	fe 01       	movw	r30, r28
    24b6:	e3 59       	subi	r30, 0x93	; 147
    24b8:	fe 4f       	sbci	r31, 0xFE	; 254
    24ba:	80 81       	ld	r24, Z
    24bc:	91 81       	ldd	r25, Z+1	; 0x01
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <main+0x16d6>
    24c2:	fe 01       	movw	r30, r28
    24c4:	e3 59       	subi	r30, 0x93	; 147
    24c6:	fe 4f       	sbci	r31, 0xFE	; 254
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);

                Local_u8ShowMenu = AUTO_MANUAL_MENU;
    24cc:	fe 01       	movw	r30, r28
    24ce:	e3 5e       	subi	r30, 0xE3	; 227
    24d0:	fd 4f       	sbci	r31, 0xFD	; 253
    24d2:	84 e1       	ldi	r24, 0x14	; 20
    24d4:	80 83       	st	Z, r24
                Local_u8Chooser = FAN;
    24d6:	fe 01       	movw	r30, r28
    24d8:	e5 5e       	subi	r30, 0xE5	; 229
    24da:	fd 4f       	sbci	r31, 0xFD	; 253
    24dc:	84 e0       	ldi	r24, 0x04	; 4
    24de:	80 83       	st	Z, r24
    24e0:	f8 cd       	rjmp	.-1040   	; 0x20d2 <main+0x12ea>
            }

            else if (Local_u8KeyPressed == SELECT_ROOMS)
    24e2:	fe 01       	movw	r30, r28
    24e4:	e2 5e       	subi	r30, 0xE2	; 226
    24e6:	fd 4f       	sbci	r31, 0xFD	; 253
    24e8:	80 81       	ld	r24, Z
    24ea:	83 33       	cpi	r24, 0x33	; 51
    24ec:	09 f0       	breq	.+2      	; 0x24f0 <main+0x1708>
    24ee:	c0 c0       	rjmp	.+384    	; 0x2670 <main+0x1888>
            {
                LCD_VidClearScreen();
    24f0:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Rooms");
    24f4:	84 e5       	ldi	r24, 0x54	; 84
    24f6:	91 e0       	ldi	r25, 0x01	; 1
    24f8:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    24fc:	fe 01       	movw	r30, r28
    24fe:	e7 59       	subi	r30, 0x97	; 151
    2500:	fe 4f       	sbci	r31, 0xFE	; 254
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a8 e4       	ldi	r26, 0x48	; 72
    2508:	b3 e4       	ldi	r27, 0x43	; 67
    250a:	80 83       	st	Z, r24
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	a2 83       	std	Z+2, r26	; 0x02
    2510:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2512:	8e 01       	movw	r16, r28
    2514:	0b 59       	subi	r16, 0x9B	; 155
    2516:	1e 4f       	sbci	r17, 0xFE	; 254
    2518:	fe 01       	movw	r30, r28
    251a:	e7 59       	subi	r30, 0x97	; 151
    251c:	fe 4f       	sbci	r31, 0xFE	; 254
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	93 81       	ldd	r25, Z+3	; 0x03
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a ef       	ldi	r20, 0xFA	; 250
    252c:	54 e4       	ldi	r21, 0x44	; 68
    252e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	f8 01       	movw	r30, r16
    2538:	80 83       	st	Z, r24
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	a2 83       	std	Z+2, r26	; 0x02
    253e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2540:	fe 01       	movw	r30, r28
    2542:	eb 59       	subi	r30, 0x9B	; 155
    2544:	fe 4f       	sbci	r31, 0xFE	; 254
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	44 f4       	brge	.+16     	; 0x256e <main+0x1786>
		__ticks = 1;
    255e:	fe 01       	movw	r30, r28
    2560:	ed 59       	subi	r30, 0x9D	; 157
    2562:	fe 4f       	sbci	r31, 0xFE	; 254
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	80 83       	st	Z, r24
    256c:	64 c0       	rjmp	.+200    	; 0x2636 <main+0x184e>
	else if (__tmp > 65535)
    256e:	fe 01       	movw	r30, r28
    2570:	eb 59       	subi	r30, 0x9B	; 155
    2572:	fe 4f       	sbci	r31, 0xFE	; 254
    2574:	60 81       	ld	r22, Z
    2576:	71 81       	ldd	r23, Z+1	; 0x01
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	3f ef       	ldi	r19, 0xFF	; 255
    2580:	4f e7       	ldi	r20, 0x7F	; 127
    2582:	57 e4       	ldi	r21, 0x47	; 71
    2584:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2588:	18 16       	cp	r1, r24
    258a:	0c f0       	brlt	.+2      	; 0x258e <main+0x17a6>
    258c:	43 c0       	rjmp	.+134    	; 0x2614 <main+0x182c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	fe 01       	movw	r30, r28
    2590:	e7 59       	subi	r30, 0x97	; 151
    2592:	fe 4f       	sbci	r31, 0xFE	; 254
    2594:	60 81       	ld	r22, Z
    2596:	71 81       	ldd	r23, Z+1	; 0x01
    2598:	82 81       	ldd	r24, Z+2	; 0x02
    259a:	93 81       	ldd	r25, Z+3	; 0x03
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e2       	ldi	r20, 0x20	; 32
    25a2:	51 e4       	ldi	r21, 0x41	; 65
    25a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	8e 01       	movw	r16, r28
    25ae:	0d 59       	subi	r16, 0x9D	; 157
    25b0:	1e 4f       	sbci	r17, 0xFE	; 254
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	f8 01       	movw	r30, r16
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
    25c4:	1f c0       	rjmp	.+62     	; 0x2604 <main+0x181c>
    25c6:	fe 01       	movw	r30, r28
    25c8:	ef 59       	subi	r30, 0x9F	; 159
    25ca:	fe 4f       	sbci	r31, 0xFE	; 254
    25cc:	88 ec       	ldi	r24, 0xC8	; 200
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	80 83       	st	Z, r24
    25d4:	fe 01       	movw	r30, r28
    25d6:	ef 59       	subi	r30, 0x9F	; 159
    25d8:	fe 4f       	sbci	r31, 0xFE	; 254
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <main+0x17f6>
    25e2:	fe 01       	movw	r30, r28
    25e4:	ef 59       	subi	r30, 0x9F	; 159
    25e6:	fe 4f       	sbci	r31, 0xFE	; 254
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ec:	de 01       	movw	r26, r28
    25ee:	ad 59       	subi	r26, 0x9D	; 157
    25f0:	be 4f       	sbci	r27, 0xFE	; 254
    25f2:	fe 01       	movw	r30, r28
    25f4:	ed 59       	subi	r30, 0x9D	; 157
    25f6:	fe 4f       	sbci	r31, 0xFE	; 254
    25f8:	80 81       	ld	r24, Z
    25fa:	91 81       	ldd	r25, Z+1	; 0x01
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	11 96       	adiw	r26, 0x01	; 1
    2600:	9c 93       	st	X, r25
    2602:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2604:	fe 01       	movw	r30, r28
    2606:	ed 59       	subi	r30, 0x9D	; 157
    2608:	fe 4f       	sbci	r31, 0xFE	; 254
    260a:	80 81       	ld	r24, Z
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	d1 f6       	brne	.-76     	; 0x25c6 <main+0x17de>
    2612:	28 c0       	rjmp	.+80     	; 0x2664 <main+0x187c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2614:	8e 01       	movw	r16, r28
    2616:	0d 59       	subi	r16, 0x9D	; 157
    2618:	1e 4f       	sbci	r17, 0xFE	; 254
    261a:	fe 01       	movw	r30, r28
    261c:	eb 59       	subi	r30, 0x9B	; 155
    261e:	fe 4f       	sbci	r31, 0xFE	; 254
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	f8 01       	movw	r30, r16
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
    2636:	de 01       	movw	r26, r28
    2638:	a1 5a       	subi	r26, 0xA1	; 161
    263a:	be 4f       	sbci	r27, 0xFE	; 254
    263c:	fe 01       	movw	r30, r28
    263e:	ed 59       	subi	r30, 0x9D	; 157
    2640:	fe 4f       	sbci	r31, 0xFE	; 254
    2642:	80 81       	ld	r24, Z
    2644:	91 81       	ldd	r25, Z+1	; 0x01
    2646:	11 96       	adiw	r26, 0x01	; 1
    2648:	9c 93       	st	X, r25
    264a:	8e 93       	st	-X, r24
    264c:	fe 01       	movw	r30, r28
    264e:	e1 5a       	subi	r30, 0xA1	; 161
    2650:	fe 4f       	sbci	r31, 0xFE	; 254
    2652:	80 81       	ld	r24, Z
    2654:	91 81       	ldd	r25, Z+1	; 0x01
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <main+0x186e>
    265a:	fe 01       	movw	r30, r28
    265c:	e1 5a       	subi	r30, 0xA1	; 161
    265e:	fe 4f       	sbci	r31, 0xFE	; 254
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);

                Local_u8ShowMenu = ROOM_CHOOSER_MENU;
    2664:	fe 01       	movw	r30, r28
    2666:	e3 5e       	subi	r30, 0xE3	; 227
    2668:	fd 4f       	sbci	r31, 0xFD	; 253
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	80 83       	st	Z, r24
    266e:	31 cd       	rjmp	.-1438   	; 0x20d2 <main+0x12ea>
            }
            else
            {
                LCD_VidClearScreen();
    2670:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Wrong Input");
    2674:	8a e5       	ldi	r24, 0x5A	; 90
    2676:	91 e0       	ldi	r25, 0x01	; 1
    2678:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
                LCD_VidSendString_XY("Try Again", 1, 0);
    267c:	86 e6       	ldi	r24, 0x66	; 102
    267e:	91 e0       	ldi	r25, 0x01	; 1
    2680:	61 e0       	ldi	r22, 0x01	; 1
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    2688:	fe 01       	movw	r30, r28
    268a:	e5 5a       	subi	r30, 0xA5	; 165
    268c:	fe 4f       	sbci	r31, 0xFE	; 254
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	a8 e4       	ldi	r26, 0x48	; 72
    2694:	b3 e4       	ldi	r27, 0x43	; 67
    2696:	80 83       	st	Z, r24
    2698:	91 83       	std	Z+1, r25	; 0x01
    269a:	a2 83       	std	Z+2, r26	; 0x02
    269c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269e:	8e 01       	movw	r16, r28
    26a0:	09 5a       	subi	r16, 0xA9	; 169
    26a2:	1e 4f       	sbci	r17, 0xFE	; 254
    26a4:	fe 01       	movw	r30, r28
    26a6:	e5 5a       	subi	r30, 0xA5	; 165
    26a8:	fe 4f       	sbci	r31, 0xFE	; 254
    26aa:	60 81       	ld	r22, Z
    26ac:	71 81       	ldd	r23, Z+1	; 0x01
    26ae:	82 81       	ldd	r24, Z+2	; 0x02
    26b0:	93 81       	ldd	r25, Z+3	; 0x03
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	4a ef       	ldi	r20, 0xFA	; 250
    26b8:	54 e4       	ldi	r21, 0x44	; 68
    26ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	f8 01       	movw	r30, r16
    26c4:	80 83       	st	Z, r24
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	a2 83       	std	Z+2, r26	; 0x02
    26ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26cc:	fe 01       	movw	r30, r28
    26ce:	e9 5a       	subi	r30, 0xA9	; 169
    26d0:	fe 4f       	sbci	r31, 0xFE	; 254
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e8       	ldi	r20, 0x80	; 128
    26e0:	5f e3       	ldi	r21, 0x3F	; 63
    26e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26e6:	88 23       	and	r24, r24
    26e8:	44 f4       	brge	.+16     	; 0x26fa <main+0x1912>
		__ticks = 1;
    26ea:	fe 01       	movw	r30, r28
    26ec:	eb 5a       	subi	r30, 0xAB	; 171
    26ee:	fe 4f       	sbci	r31, 0xFE	; 254
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
    26f8:	64 c0       	rjmp	.+200    	; 0x27c2 <main+0x19da>
	else if (__tmp > 65535)
    26fa:	fe 01       	movw	r30, r28
    26fc:	e9 5a       	subi	r30, 0xA9	; 169
    26fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2700:	60 81       	ld	r22, Z
    2702:	71 81       	ldd	r23, Z+1	; 0x01
    2704:	82 81       	ldd	r24, Z+2	; 0x02
    2706:	93 81       	ldd	r25, Z+3	; 0x03
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	3f ef       	ldi	r19, 0xFF	; 255
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	57 e4       	ldi	r21, 0x47	; 71
    2710:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2714:	18 16       	cp	r1, r24
    2716:	0c f0       	brlt	.+2      	; 0x271a <main+0x1932>
    2718:	43 c0       	rjmp	.+134    	; 0x27a0 <main+0x19b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271a:	fe 01       	movw	r30, r28
    271c:	e5 5a       	subi	r30, 0xA5	; 165
    271e:	fe 4f       	sbci	r31, 0xFE	; 254
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e2       	ldi	r20, 0x20	; 32
    272e:	51 e4       	ldi	r21, 0x41	; 65
    2730:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8e 01       	movw	r16, r28
    273a:	0b 5a       	subi	r16, 0xAB	; 171
    273c:	1e 4f       	sbci	r17, 0xFE	; 254
    273e:	bc 01       	movw	r22, r24
    2740:	cd 01       	movw	r24, r26
    2742:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	f8 01       	movw	r30, r16
    274c:	91 83       	std	Z+1, r25	; 0x01
    274e:	80 83       	st	Z, r24
    2750:	1f c0       	rjmp	.+62     	; 0x2790 <main+0x19a8>
    2752:	fe 01       	movw	r30, r28
    2754:	ed 5a       	subi	r30, 0xAD	; 173
    2756:	fe 4f       	sbci	r31, 0xFE	; 254
    2758:	88 ec       	ldi	r24, 0xC8	; 200
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
    2760:	fe 01       	movw	r30, r28
    2762:	ed 5a       	subi	r30, 0xAD	; 173
    2764:	fe 4f       	sbci	r31, 0xFE	; 254
    2766:	80 81       	ld	r24, Z
    2768:	91 81       	ldd	r25, Z+1	; 0x01
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <main+0x1982>
    276e:	fe 01       	movw	r30, r28
    2770:	ed 5a       	subi	r30, 0xAD	; 173
    2772:	fe 4f       	sbci	r31, 0xFE	; 254
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2778:	de 01       	movw	r26, r28
    277a:	ab 5a       	subi	r26, 0xAB	; 171
    277c:	be 4f       	sbci	r27, 0xFE	; 254
    277e:	fe 01       	movw	r30, r28
    2780:	eb 5a       	subi	r30, 0xAB	; 171
    2782:	fe 4f       	sbci	r31, 0xFE	; 254
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	11 96       	adiw	r26, 0x01	; 1
    278c:	9c 93       	st	X, r25
    278e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2790:	fe 01       	movw	r30, r28
    2792:	eb 5a       	subi	r30, 0xAB	; 171
    2794:	fe 4f       	sbci	r31, 0xFE	; 254
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	d1 f6       	brne	.-76     	; 0x2752 <main+0x196a>
    279e:	99 cc       	rjmp	.-1742   	; 0x20d2 <main+0x12ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	8e 01       	movw	r16, r28
    27a2:	0b 5a       	subi	r16, 0xAB	; 171
    27a4:	1e 4f       	sbci	r17, 0xFE	; 254
    27a6:	fe 01       	movw	r30, r28
    27a8:	e9 5a       	subi	r30, 0xA9	; 169
    27aa:	fe 4f       	sbci	r31, 0xFE	; 254
    27ac:	60 81       	ld	r22, Z
    27ae:	71 81       	ldd	r23, Z+1	; 0x01
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	f8 01       	movw	r30, r16
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	80 83       	st	Z, r24
    27c2:	de 01       	movw	r26, r28
    27c4:	af 5a       	subi	r26, 0xAF	; 175
    27c6:	be 4f       	sbci	r27, 0xFE	; 254
    27c8:	fe 01       	movw	r30, r28
    27ca:	eb 5a       	subi	r30, 0xAB	; 171
    27cc:	fe 4f       	sbci	r31, 0xFE	; 254
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	11 96       	adiw	r26, 0x01	; 1
    27d4:	9c 93       	st	X, r25
    27d6:	8e 93       	st	-X, r24
    27d8:	fe 01       	movw	r30, r28
    27da:	ef 5a       	subi	r30, 0xAF	; 175
    27dc:	fe 4f       	sbci	r31, 0xFE	; 254
    27de:	80 81       	ld	r24, Z
    27e0:	91 81       	ldd	r25, Z+1	; 0x01
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <main+0x19fa>
    27e6:	fe 01       	movw	r30, r28
    27e8:	ef 5a       	subi	r30, 0xAF	; 175
    27ea:	fe 4f       	sbci	r31, 0xFE	; 254
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	80 83       	st	Z, r24
    27f0:	70 cc       	rjmp	.-1824   	; 0x20d2 <main+0x12ea>
            }

            break;

        case DOOR_MAIN_MENU:
            LCD_VidClearScreen();
    27f2:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>

            LCD_VidSendString_XY("1.AUTO  2.Manual", 0, 0);
    27f6:	80 e7       	ldi	r24, 0x70	; 112
    27f8:	91 e0       	ldi	r25, 0x01	; 1
    27fa:	60 e0       	ldi	r22, 0x00	; 0
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            LCD_VidSendString_XY("0.Return", 1, 3);
    2802:	81 e8       	ldi	r24, 0x81	; 129
    2804:	91 e0       	ldi	r25, 0x01	; 1
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	43 e0       	ldi	r20, 0x03	; 3
    280a:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            WaitForKey(&Local_u8KeyPressed);
    280e:	ce 01       	movw	r24, r28
    2810:	82 5e       	subi	r24, 0xE2	; 226
    2812:	9d 4f       	sbci	r25, 0xFD	; 253
    2814:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <WaitForKey>

            if (SELECT_AUTO == Local_u8KeyPressed)
    2818:	fe 01       	movw	r30, r28
    281a:	e2 5e       	subi	r30, 0xE2	; 226
    281c:	fd 4f       	sbci	r31, 0xFD	; 253
    281e:	80 81       	ld	r24, Z
    2820:	81 33       	cpi	r24, 0x31	; 49
    2822:	09 f0       	breq	.+2      	; 0x2826 <main+0x1a3e>
    2824:	84 c1       	rjmp	.+776    	; 0x2b2e <main+0x1d46>
            {
                LCD_VidClearScreen();
    2826:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("AUTO");
    282a:	8a e8       	ldi	r24, 0x8A	; 138
    282c:	91 e0       	ldi	r25, 0x01	; 1
    282e:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    2832:	fe 01       	movw	r30, r28
    2834:	e3 5b       	subi	r30, 0xB3	; 179
    2836:	fe 4f       	sbci	r31, 0xFE	; 254
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	a8 e4       	ldi	r26, 0x48	; 72
    283e:	b3 e4       	ldi	r27, 0x43	; 67
    2840:	80 83       	st	Z, r24
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	a2 83       	std	Z+2, r26	; 0x02
    2846:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2848:	8e 01       	movw	r16, r28
    284a:	07 5b       	subi	r16, 0xB7	; 183
    284c:	1e 4f       	sbci	r17, 0xFE	; 254
    284e:	fe 01       	movw	r30, r28
    2850:	e3 5b       	subi	r30, 0xB3	; 179
    2852:	fe 4f       	sbci	r31, 0xFE	; 254
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	4a ef       	ldi	r20, 0xFA	; 250
    2862:	54 e4       	ldi	r21, 0x44	; 68
    2864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	f8 01       	movw	r30, r16
    286e:	80 83       	st	Z, r24
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	a2 83       	std	Z+2, r26	; 0x02
    2874:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2876:	fe 01       	movw	r30, r28
    2878:	e7 5b       	subi	r30, 0xB7	; 183
    287a:	fe 4f       	sbci	r31, 0xFE	; 254
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	44 f4       	brge	.+16     	; 0x28a4 <main+0x1abc>
		__ticks = 1;
    2894:	fe 01       	movw	r30, r28
    2896:	e9 5b       	subi	r30, 0xB9	; 185
    2898:	fe 4f       	sbci	r31, 0xFE	; 254
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	80 83       	st	Z, r24
    28a2:	64 c0       	rjmp	.+200    	; 0x296c <main+0x1b84>
	else if (__tmp > 65535)
    28a4:	fe 01       	movw	r30, r28
    28a6:	e7 5b       	subi	r30, 0xB7	; 183
    28a8:	fe 4f       	sbci	r31, 0xFE	; 254
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	0c f0       	brlt	.+2      	; 0x28c4 <main+0x1adc>
    28c2:	43 c0       	rjmp	.+134    	; 0x294a <main+0x1b62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c4:	fe 01       	movw	r30, r28
    28c6:	e3 5b       	subi	r30, 0xB3	; 179
    28c8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e2       	ldi	r20, 0x20	; 32
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	8e 01       	movw	r16, r28
    28e4:	09 5b       	subi	r16, 0xB9	; 185
    28e6:	1e 4f       	sbci	r17, 0xFE	; 254
    28e8:	bc 01       	movw	r22, r24
    28ea:	cd 01       	movw	r24, r26
    28ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	f8 01       	movw	r30, r16
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
    28fa:	1f c0       	rjmp	.+62     	; 0x293a <main+0x1b52>
    28fc:	fe 01       	movw	r30, r28
    28fe:	eb 5b       	subi	r30, 0xBB	; 187
    2900:	fe 4f       	sbci	r31, 0xFE	; 254
    2902:	88 ec       	ldi	r24, 0xC8	; 200
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
    290a:	fe 01       	movw	r30, r28
    290c:	eb 5b       	subi	r30, 0xBB	; 187
    290e:	fe 4f       	sbci	r31, 0xFE	; 254
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <main+0x1b2c>
    2918:	fe 01       	movw	r30, r28
    291a:	eb 5b       	subi	r30, 0xBB	; 187
    291c:	fe 4f       	sbci	r31, 0xFE	; 254
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2922:	de 01       	movw	r26, r28
    2924:	a9 5b       	subi	r26, 0xB9	; 185
    2926:	be 4f       	sbci	r27, 0xFE	; 254
    2928:	fe 01       	movw	r30, r28
    292a:	e9 5b       	subi	r30, 0xB9	; 185
    292c:	fe 4f       	sbci	r31, 0xFE	; 254
    292e:	80 81       	ld	r24, Z
    2930:	91 81       	ldd	r25, Z+1	; 0x01
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	11 96       	adiw	r26, 0x01	; 1
    2936:	9c 93       	st	X, r25
    2938:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	fe 01       	movw	r30, r28
    293c:	e9 5b       	subi	r30, 0xB9	; 185
    293e:	fe 4f       	sbci	r31, 0xFE	; 254
    2940:	80 81       	ld	r24, Z
    2942:	91 81       	ldd	r25, Z+1	; 0x01
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	d1 f6       	brne	.-76     	; 0x28fc <main+0x1b14>
    2948:	27 c0       	rjmp	.+78     	; 0x2998 <main+0x1bb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	8e 01       	movw	r16, r28
    294c:	09 5b       	subi	r16, 0xB9	; 185
    294e:	1e 4f       	sbci	r17, 0xFE	; 254
    2950:	fe 01       	movw	r30, r28
    2952:	e7 5b       	subi	r30, 0xB7	; 183
    2954:	fe 4f       	sbci	r31, 0xFE	; 254
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	f8 01       	movw	r30, r16
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	80 83       	st	Z, r24
    296c:	de 01       	movw	r26, r28
    296e:	ad 5b       	subi	r26, 0xBD	; 189
    2970:	be 4f       	sbci	r27, 0xFE	; 254
    2972:	fe 01       	movw	r30, r28
    2974:	e9 5b       	subi	r30, 0xB9	; 185
    2976:	fe 4f       	sbci	r31, 0xFE	; 254
    2978:	80 81       	ld	r24, Z
    297a:	91 81       	ldd	r25, Z+1	; 0x01
    297c:	8d 93       	st	X+, r24
    297e:	9c 93       	st	X, r25
    2980:	fe 01       	movw	r30, r28
    2982:	ed 5b       	subi	r30, 0xBD	; 189
    2984:	fe 4f       	sbci	r31, 0xFE	; 254
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <main+0x1ba2>
    298e:	fe 01       	movw	r30, r28
    2990:	ed 5b       	subi	r30, 0xBD	; 189
    2992:	fe 4f       	sbci	r31, 0xFE	; 254
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);
                DIO_VidSetPinValue(Port_B, LED_CLOSE_DOOR, PinLow);
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	62 e0       	ldi	r22, 0x02	; 2
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
                DIO_VidSetPinValue(Port_B, LED_OPEN_DOOR, PinHigh);
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	61 e0       	ldi	r22, 0x01	; 1
    29a6:	41 e0       	ldi	r20, 0x01	; 1
    29a8:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
               // _delay_ms(DOOR_TIME);
                UART_VidSendByte(DOOR_SET_AUTO);
    29ac:	8e e2       	ldi	r24, 0x2E	; 46
    29ae:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>
    29b2:	fe 01       	movw	r30, r28
    29b4:	e1 5c       	subi	r30, 0xC1	; 193
    29b6:	fe 4f       	sbci	r31, 0xFE	; 254
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a6 e1       	ldi	r26, 0x16	; 22
    29be:	b5 e4       	ldi	r27, 0x45	; 69
    29c0:	80 83       	st	Z, r24
    29c2:	91 83       	std	Z+1, r25	; 0x01
    29c4:	a2 83       	std	Z+2, r26	; 0x02
    29c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c8:	8e 01       	movw	r16, r28
    29ca:	05 5c       	subi	r16, 0xC5	; 197
    29cc:	1e 4f       	sbci	r17, 0xFE	; 254
    29ce:	fe 01       	movw	r30, r28
    29d0:	e1 5c       	subi	r30, 0xC1	; 193
    29d2:	fe 4f       	sbci	r31, 0xFE	; 254
    29d4:	60 81       	ld	r22, Z
    29d6:	71 81       	ldd	r23, Z+1	; 0x01
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	4a ef       	ldi	r20, 0xFA	; 250
    29e2:	54 e4       	ldi	r21, 0x44	; 68
    29e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	f8 01       	movw	r30, r16
    29ee:	80 83       	st	Z, r24
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	a2 83       	std	Z+2, r26	; 0x02
    29f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29f6:	fe 01       	movw	r30, r28
    29f8:	e5 5c       	subi	r30, 0xC5	; 197
    29fa:	fe 4f       	sbci	r31, 0xFE	; 254
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e8       	ldi	r20, 0x80	; 128
    2a0a:	5f e3       	ldi	r21, 0x3F	; 63
    2a0c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a10:	88 23       	and	r24, r24
    2a12:	44 f4       	brge	.+16     	; 0x2a24 <main+0x1c3c>
		__ticks = 1;
    2a14:	fe 01       	movw	r30, r28
    2a16:	e7 5c       	subi	r30, 0xC7	; 199
    2a18:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	80 83       	st	Z, r24
    2a22:	64 c0       	rjmp	.+200    	; 0x2aec <main+0x1d04>
	else if (__tmp > 65535)
    2a24:	fe 01       	movw	r30, r28
    2a26:	e5 5c       	subi	r30, 0xC5	; 197
    2a28:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	3f ef       	ldi	r19, 0xFF	; 255
    2a36:	4f e7       	ldi	r20, 0x7F	; 127
    2a38:	57 e4       	ldi	r21, 0x47	; 71
    2a3a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a3e:	18 16       	cp	r1, r24
    2a40:	0c f0       	brlt	.+2      	; 0x2a44 <main+0x1c5c>
    2a42:	43 c0       	rjmp	.+134    	; 0x2aca <main+0x1ce2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a44:	fe 01       	movw	r30, r28
    2a46:	e1 5c       	subi	r30, 0xC1	; 193
    2a48:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4a:	60 81       	ld	r22, Z
    2a4c:	71 81       	ldd	r23, Z+1	; 0x01
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	93 81       	ldd	r25, Z+3	; 0x03
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	8e 01       	movw	r16, r28
    2a64:	07 5c       	subi	r16, 0xC7	; 199
    2a66:	1e 4f       	sbci	r17, 0xFE	; 254
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	f8 01       	movw	r30, r16
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
    2a7a:	1f c0       	rjmp	.+62     	; 0x2aba <main+0x1cd2>
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e9 5c       	subi	r30, 0xC9	; 201
    2a80:	fe 4f       	sbci	r31, 0xFE	; 254
    2a82:	88 ec       	ldi	r24, 0xC8	; 200
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	91 83       	std	Z+1, r25	; 0x01
    2a88:	80 83       	st	Z, r24
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e9 5c       	subi	r30, 0xC9	; 201
    2a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a90:	80 81       	ld	r24, Z
    2a92:	91 81       	ldd	r25, Z+1	; 0x01
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <main+0x1cac>
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e9 5c       	subi	r30, 0xC9	; 201
    2a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9e:	91 83       	std	Z+1, r25	; 0x01
    2aa0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa2:	de 01       	movw	r26, r28
    2aa4:	a7 5c       	subi	r26, 0xC7	; 199
    2aa6:	be 4f       	sbci	r27, 0xFE	; 254
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e7 5c       	subi	r30, 0xC7	; 199
    2aac:	fe 4f       	sbci	r31, 0xFE	; 254
    2aae:	80 81       	ld	r24, Z
    2ab0:	91 81       	ldd	r25, Z+1	; 0x01
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	11 96       	adiw	r26, 0x01	; 1
    2ab6:	9c 93       	st	X, r25
    2ab8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aba:	fe 01       	movw	r30, r28
    2abc:	e7 5c       	subi	r30, 0xC7	; 199
    2abe:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	d1 f6       	brne	.-76     	; 0x2a7c <main+0x1c94>
    2ac8:	27 c0       	rjmp	.+78     	; 0x2b18 <main+0x1d30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aca:	8e 01       	movw	r16, r28
    2acc:	07 5c       	subi	r16, 0xC7	; 199
    2ace:	1e 4f       	sbci	r17, 0xFE	; 254
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	e5 5c       	subi	r30, 0xC5	; 197
    2ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad6:	60 81       	ld	r22, Z
    2ad8:	71 81       	ldd	r23, Z+1	; 0x01
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	93 81       	ldd	r25, Z+3	; 0x03
    2ade:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	80 83       	st	Z, r24
    2aec:	de 01       	movw	r26, r28
    2aee:	ab 5c       	subi	r26, 0xCB	; 203
    2af0:	be 4f       	sbci	r27, 0xFE	; 254
    2af2:	fe 01       	movw	r30, r28
    2af4:	e7 5c       	subi	r30, 0xC7	; 199
    2af6:	fe 4f       	sbci	r31, 0xFE	; 254
    2af8:	80 81       	ld	r24, Z
    2afa:	91 81       	ldd	r25, Z+1	; 0x01
    2afc:	8d 93       	st	X+, r24
    2afe:	9c 93       	st	X, r25
    2b00:	fe 01       	movw	r30, r28
    2b02:	eb 5c       	subi	r30, 0xCB	; 203
    2b04:	fe 4f       	sbci	r31, 0xFE	; 254
    2b06:	80 81       	ld	r24, Z
    2b08:	91 81       	ldd	r25, Z+1	; 0x01
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <main+0x1d22>
    2b0e:	fe 01       	movw	r30, r28
    2b10:	eb 5c       	subi	r30, 0xCB	; 203
    2b12:	fe 4f       	sbci	r31, 0xFE	; 254
    2b14:	91 83       	std	Z+1, r25	; 0x01
    2b16:	80 83       	st	Z, r24
                _delay_ms(DOOR_TIME*2);
                DIO_VidSetPinValue(Port_B, LED_CLOSE_DOOR, PinHigh);
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	62 e0       	ldi	r22, 0x02	; 2
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
                DIO_VidSetPinValue(Port_B, LED_OPEN_DOOR, PinLow);
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	61 e0       	ldi	r22, 0x01	; 1
    2b26:	40 e0       	ldi	r20, 0x00	; 0
    2b28:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    2b2c:	d2 ca       	rjmp	.-2652   	; 0x20d2 <main+0x12ea>
            }
            else if (SELECT_MANUAL == Local_u8KeyPressed)
    2b2e:	fe 01       	movw	r30, r28
    2b30:	e2 5e       	subi	r30, 0xE2	; 226
    2b32:	fd 4f       	sbci	r31, 0xFD	; 253
    2b34:	80 81       	ld	r24, Z
    2b36:	82 33       	cpi	r24, 0x32	; 50
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <main+0x1d54>
    2b3a:	c0 c0       	rjmp	.+384    	; 0x2cbc <main+0x1ed4>
            {
                LCD_VidClearScreen();
    2b3c:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Manual");
    2b40:	8f e8       	ldi	r24, 0x8F	; 143
    2b42:	91 e0       	ldi	r25, 0x01	; 1
    2b44:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    2b48:	fe 01       	movw	r30, r28
    2b4a:	ef 5c       	subi	r30, 0xCF	; 207
    2b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	a8 e4       	ldi	r26, 0x48	; 72
    2b54:	b3 e4       	ldi	r27, 0x43	; 67
    2b56:	80 83       	st	Z, r24
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	a2 83       	std	Z+2, r26	; 0x02
    2b5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5e:	8e 01       	movw	r16, r28
    2b60:	03 5d       	subi	r16, 0xD3	; 211
    2b62:	1e 4f       	sbci	r17, 0xFE	; 254
    2b64:	fe 01       	movw	r30, r28
    2b66:	ef 5c       	subi	r30, 0xCF	; 207
    2b68:	fe 4f       	sbci	r31, 0xFE	; 254
    2b6a:	60 81       	ld	r22, Z
    2b6c:	71 81       	ldd	r23, Z+1	; 0x01
    2b6e:	82 81       	ldd	r24, Z+2	; 0x02
    2b70:	93 81       	ldd	r25, Z+3	; 0x03
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	4a ef       	ldi	r20, 0xFA	; 250
    2b78:	54 e4       	ldi	r21, 0x44	; 68
    2b7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	f8 01       	movw	r30, r16
    2b84:	80 83       	st	Z, r24
    2b86:	91 83       	std	Z+1, r25	; 0x01
    2b88:	a2 83       	std	Z+2, r26	; 0x02
    2b8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e3 5d       	subi	r30, 0xD3	; 211
    2b90:	fe 4f       	sbci	r31, 0xFE	; 254
    2b92:	60 81       	ld	r22, Z
    2b94:	71 81       	ldd	r23, Z+1	; 0x01
    2b96:	82 81       	ldd	r24, Z+2	; 0x02
    2b98:	93 81       	ldd	r25, Z+3	; 0x03
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e8       	ldi	r20, 0x80	; 128
    2ba0:	5f e3       	ldi	r21, 0x3F	; 63
    2ba2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ba6:	88 23       	and	r24, r24
    2ba8:	44 f4       	brge	.+16     	; 0x2bba <main+0x1dd2>
		__ticks = 1;
    2baa:	fe 01       	movw	r30, r28
    2bac:	e5 5d       	subi	r30, 0xD5	; 213
    2bae:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	91 83       	std	Z+1, r25	; 0x01
    2bb6:	80 83       	st	Z, r24
    2bb8:	64 c0       	rjmp	.+200    	; 0x2c82 <main+0x1e9a>
	else if (__tmp > 65535)
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e3 5d       	subi	r30, 0xD3	; 211
    2bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc0:	60 81       	ld	r22, Z
    2bc2:	71 81       	ldd	r23, Z+1	; 0x01
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	93 81       	ldd	r25, Z+3	; 0x03
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	3f ef       	ldi	r19, 0xFF	; 255
    2bcc:	4f e7       	ldi	r20, 0x7F	; 127
    2bce:	57 e4       	ldi	r21, 0x47	; 71
    2bd0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bd4:	18 16       	cp	r1, r24
    2bd6:	0c f0       	brlt	.+2      	; 0x2bda <main+0x1df2>
    2bd8:	43 c0       	rjmp	.+134    	; 0x2c60 <main+0x1e78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bda:	fe 01       	movw	r30, r28
    2bdc:	ef 5c       	subi	r30, 0xCF	; 207
    2bde:	fe 4f       	sbci	r31, 0xFE	; 254
    2be0:	60 81       	ld	r22, Z
    2be2:	71 81       	ldd	r23, Z+1	; 0x01
    2be4:	82 81       	ldd	r24, Z+2	; 0x02
    2be6:	93 81       	ldd	r25, Z+3	; 0x03
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e2       	ldi	r20, 0x20	; 32
    2bee:	51 e4       	ldi	r21, 0x41	; 65
    2bf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	8e 01       	movw	r16, r28
    2bfa:	05 5d       	subi	r16, 0xD5	; 213
    2bfc:	1e 4f       	sbci	r17, 0xFE	; 254
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	80 83       	st	Z, r24
    2c10:	1f c0       	rjmp	.+62     	; 0x2c50 <main+0x1e68>
    2c12:	fe 01       	movw	r30, r28
    2c14:	e7 5d       	subi	r30, 0xD7	; 215
    2c16:	fe 4f       	sbci	r31, 0xFE	; 254
    2c18:	88 ec       	ldi	r24, 0xC8	; 200
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	91 83       	std	Z+1, r25	; 0x01
    2c1e:	80 83       	st	Z, r24
    2c20:	fe 01       	movw	r30, r28
    2c22:	e7 5d       	subi	r30, 0xD7	; 215
    2c24:	fe 4f       	sbci	r31, 0xFE	; 254
    2c26:	80 81       	ld	r24, Z
    2c28:	91 81       	ldd	r25, Z+1	; 0x01
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <main+0x1e42>
    2c2e:	fe 01       	movw	r30, r28
    2c30:	e7 5d       	subi	r30, 0xD7	; 215
    2c32:	fe 4f       	sbci	r31, 0xFE	; 254
    2c34:	91 83       	std	Z+1, r25	; 0x01
    2c36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c38:	de 01       	movw	r26, r28
    2c3a:	a5 5d       	subi	r26, 0xD5	; 213
    2c3c:	be 4f       	sbci	r27, 0xFE	; 254
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e5 5d       	subi	r30, 0xD5	; 213
    2c42:	fe 4f       	sbci	r31, 0xFE	; 254
    2c44:	80 81       	ld	r24, Z
    2c46:	91 81       	ldd	r25, Z+1	; 0x01
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	11 96       	adiw	r26, 0x01	; 1
    2c4c:	9c 93       	st	X, r25
    2c4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c50:	fe 01       	movw	r30, r28
    2c52:	e5 5d       	subi	r30, 0xD5	; 213
    2c54:	fe 4f       	sbci	r31, 0xFE	; 254
    2c56:	80 81       	ld	r24, Z
    2c58:	91 81       	ldd	r25, Z+1	; 0x01
    2c5a:	00 97       	sbiw	r24, 0x00	; 0
    2c5c:	d1 f6       	brne	.-76     	; 0x2c12 <main+0x1e2a>
    2c5e:	28 c0       	rjmp	.+80     	; 0x2cb0 <main+0x1ec8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c60:	8e 01       	movw	r16, r28
    2c62:	05 5d       	subi	r16, 0xD5	; 213
    2c64:	1e 4f       	sbci	r17, 0xFE	; 254
    2c66:	fe 01       	movw	r30, r28
    2c68:	e3 5d       	subi	r30, 0xD3	; 211
    2c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c6c:	60 81       	ld	r22, Z
    2c6e:	71 81       	ldd	r23, Z+1	; 0x01
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	f8 01       	movw	r30, r16
    2c7e:	91 83       	std	Z+1, r25	; 0x01
    2c80:	80 83       	st	Z, r24
    2c82:	de 01       	movw	r26, r28
    2c84:	a9 5d       	subi	r26, 0xD9	; 217
    2c86:	be 4f       	sbci	r27, 0xFE	; 254
    2c88:	fe 01       	movw	r30, r28
    2c8a:	e5 5d       	subi	r30, 0xD5	; 213
    2c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c8e:	80 81       	ld	r24, Z
    2c90:	91 81       	ldd	r25, Z+1	; 0x01
    2c92:	11 96       	adiw	r26, 0x01	; 1
    2c94:	9c 93       	st	X, r25
    2c96:	8e 93       	st	-X, r24
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e9 5d       	subi	r30, 0xD9	; 217
    2c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c9e:	80 81       	ld	r24, Z
    2ca0:	91 81       	ldd	r25, Z+1	; 0x01
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <main+0x1eba>
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e9 5d       	subi	r30, 0xD9	; 217
    2caa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cac:	91 83       	std	Z+1, r25	; 0x01
    2cae:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);
                Local_u8ShowMenu = DOOR_MANUAL_MENU;
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e3 5e       	subi	r30, 0xE3	; 227
    2cb4:	fd 4f       	sbci	r31, 0xFD	; 253
    2cb6:	84 e0       	ldi	r24, 0x04	; 4
    2cb8:	80 83       	st	Z, r24
    2cba:	0b ca       	rjmp	.-3050   	; 0x20d2 <main+0x12ea>
            }
            else if (SELECT_RETURN == Local_u8KeyPressed)
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e2 5e       	subi	r30, 0xE2	; 226
    2cc0:	fd 4f       	sbci	r31, 0xFD	; 253
    2cc2:	80 81       	ld	r24, Z
    2cc4:	80 33       	cpi	r24, 0x30	; 48
    2cc6:	09 f0       	breq	.+2      	; 0x2cca <main+0x1ee2>
    2cc8:	c0 c0       	rjmp	.+384    	; 0x2e4a <main+0x2062>
            {
                LCD_VidClearScreen();
    2cca:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Return");
    2cce:	86 e9       	ldi	r24, 0x96	; 150
    2cd0:	91 e0       	ldi	r25, 0x01	; 1
    2cd2:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	ed 5d       	subi	r30, 0xDD	; 221
    2cda:	fe 4f       	sbci	r31, 0xFE	; 254
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	a8 e4       	ldi	r26, 0x48	; 72
    2ce2:	b3 e4       	ldi	r27, 0x43	; 67
    2ce4:	80 83       	st	Z, r24
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	a2 83       	std	Z+2, r26	; 0x02
    2cea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	8e 01       	movw	r16, r28
    2cee:	01 5e       	subi	r16, 0xE1	; 225
    2cf0:	1e 4f       	sbci	r17, 0xFE	; 254
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ed 5d       	subi	r30, 0xDD	; 221
    2cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf8:	60 81       	ld	r22, Z
    2cfa:	71 81       	ldd	r23, Z+1	; 0x01
    2cfc:	82 81       	ldd	r24, Z+2	; 0x02
    2cfe:	93 81       	ldd	r25, Z+3	; 0x03
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	4a ef       	ldi	r20, 0xFA	; 250
    2d06:	54 e4       	ldi	r21, 0x44	; 68
    2d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	f8 01       	movw	r30, r16
    2d12:	80 83       	st	Z, r24
    2d14:	91 83       	std	Z+1, r25	; 0x01
    2d16:	a2 83       	std	Z+2, r26	; 0x02
    2d18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	e1 5e       	subi	r30, 0xE1	; 225
    2d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d20:	60 81       	ld	r22, Z
    2d22:	71 81       	ldd	r23, Z+1	; 0x01
    2d24:	82 81       	ldd	r24, Z+2	; 0x02
    2d26:	93 81       	ldd	r25, Z+3	; 0x03
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	40 e8       	ldi	r20, 0x80	; 128
    2d2e:	5f e3       	ldi	r21, 0x3F	; 63
    2d30:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d34:	88 23       	and	r24, r24
    2d36:	44 f4       	brge	.+16     	; 0x2d48 <main+0x1f60>
		__ticks = 1;
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e3 5e       	subi	r30, 0xE3	; 227
    2d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	91 83       	std	Z+1, r25	; 0x01
    2d44:	80 83       	st	Z, r24
    2d46:	64 c0       	rjmp	.+200    	; 0x2e10 <main+0x2028>
	else if (__tmp > 65535)
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e1 5e       	subi	r30, 0xE1	; 225
    2d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d4e:	60 81       	ld	r22, Z
    2d50:	71 81       	ldd	r23, Z+1	; 0x01
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	93 81       	ldd	r25, Z+3	; 0x03
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	3f ef       	ldi	r19, 0xFF	; 255
    2d5a:	4f e7       	ldi	r20, 0x7F	; 127
    2d5c:	57 e4       	ldi	r21, 0x47	; 71
    2d5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d62:	18 16       	cp	r1, r24
    2d64:	0c f0       	brlt	.+2      	; 0x2d68 <main+0x1f80>
    2d66:	43 c0       	rjmp	.+134    	; 0x2dee <main+0x2006>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d68:	fe 01       	movw	r30, r28
    2d6a:	ed 5d       	subi	r30, 0xDD	; 221
    2d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d6e:	60 81       	ld	r22, Z
    2d70:	71 81       	ldd	r23, Z+1	; 0x01
    2d72:	82 81       	ldd	r24, Z+2	; 0x02
    2d74:	93 81       	ldd	r25, Z+3	; 0x03
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e2       	ldi	r20, 0x20	; 32
    2d7c:	51 e4       	ldi	r21, 0x41	; 65
    2d7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	8e 01       	movw	r16, r28
    2d88:	03 5e       	subi	r16, 0xE3	; 227
    2d8a:	1e 4f       	sbci	r17, 0xFE	; 254
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	f8 01       	movw	r30, r16
    2d9a:	91 83       	std	Z+1, r25	; 0x01
    2d9c:	80 83       	st	Z, r24
    2d9e:	1f c0       	rjmp	.+62     	; 0x2dde <main+0x1ff6>
    2da0:	fe 01       	movw	r30, r28
    2da2:	e5 5e       	subi	r30, 0xE5	; 229
    2da4:	fe 4f       	sbci	r31, 0xFE	; 254
    2da6:	88 ec       	ldi	r24, 0xC8	; 200
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	91 83       	std	Z+1, r25	; 0x01
    2dac:	80 83       	st	Z, r24
    2dae:	fe 01       	movw	r30, r28
    2db0:	e5 5e       	subi	r30, 0xE5	; 229
    2db2:	fe 4f       	sbci	r31, 0xFE	; 254
    2db4:	80 81       	ld	r24, Z
    2db6:	91 81       	ldd	r25, Z+1	; 0x01
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <main+0x1fd0>
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e5 5e       	subi	r30, 0xE5	; 229
    2dc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc2:	91 83       	std	Z+1, r25	; 0x01
    2dc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc6:	de 01       	movw	r26, r28
    2dc8:	a3 5e       	subi	r26, 0xE3	; 227
    2dca:	be 4f       	sbci	r27, 0xFE	; 254
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e3 5e       	subi	r30, 0xE3	; 227
    2dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	11 96       	adiw	r26, 0x01	; 1
    2dda:	9c 93       	st	X, r25
    2ddc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dde:	fe 01       	movw	r30, r28
    2de0:	e3 5e       	subi	r30, 0xE3	; 227
    2de2:	fe 4f       	sbci	r31, 0xFE	; 254
    2de4:	80 81       	ld	r24, Z
    2de6:	91 81       	ldd	r25, Z+1	; 0x01
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	d1 f6       	brne	.-76     	; 0x2da0 <main+0x1fb8>
    2dec:	28 c0       	rjmp	.+80     	; 0x2e3e <main+0x2056>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dee:	8e 01       	movw	r16, r28
    2df0:	03 5e       	subi	r16, 0xE3	; 227
    2df2:	1e 4f       	sbci	r17, 0xFE	; 254
    2df4:	fe 01       	movw	r30, r28
    2df6:	e1 5e       	subi	r30, 0xE1	; 225
    2df8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dfa:	60 81       	ld	r22, Z
    2dfc:	71 81       	ldd	r23, Z+1	; 0x01
    2dfe:	82 81       	ldd	r24, Z+2	; 0x02
    2e00:	93 81       	ldd	r25, Z+3	; 0x03
    2e02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	f8 01       	movw	r30, r16
    2e0c:	91 83       	std	Z+1, r25	; 0x01
    2e0e:	80 83       	st	Z, r24
    2e10:	de 01       	movw	r26, r28
    2e12:	a7 5e       	subi	r26, 0xE7	; 231
    2e14:	be 4f       	sbci	r27, 0xFE	; 254
    2e16:	fe 01       	movw	r30, r28
    2e18:	e3 5e       	subi	r30, 0xE3	; 227
    2e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1c:	80 81       	ld	r24, Z
    2e1e:	91 81       	ldd	r25, Z+1	; 0x01
    2e20:	11 96       	adiw	r26, 0x01	; 1
    2e22:	9c 93       	st	X, r25
    2e24:	8e 93       	st	-X, r24
    2e26:	fe 01       	movw	r30, r28
    2e28:	e7 5e       	subi	r30, 0xE7	; 231
    2e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2c:	80 81       	ld	r24, Z
    2e2e:	91 81       	ldd	r25, Z+1	; 0x01
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <main+0x2048>
    2e34:	fe 01       	movw	r30, r28
    2e36:	e7 5e       	subi	r30, 0xE7	; 231
    2e38:	fe 4f       	sbci	r31, 0xFE	; 254
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);

                Local_u8ShowMenu = MAIN_MENU;
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e3 5e       	subi	r30, 0xE3	; 227
    2e42:	fd 4f       	sbci	r31, 0xFD	; 253
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	80 83       	st	Z, r24
    2e48:	44 c9       	rjmp	.-3448   	; 0x20d2 <main+0x12ea>
            }
            else
            {
                LCD_VidClearScreen();
    2e4a:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Wrong Input");
    2e4e:	8a e5       	ldi	r24, 0x5A	; 90
    2e50:	91 e0       	ldi	r25, 0x01	; 1
    2e52:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
                LCD_VidSendString_XY("Try Again", 1, 0);
    2e56:	86 e6       	ldi	r24, 0x66	; 102
    2e58:	91 e0       	ldi	r25, 0x01	; 1
    2e5a:	61 e0       	ldi	r22, 0x01	; 1
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    2e62:	fe 01       	movw	r30, r28
    2e64:	eb 5e       	subi	r30, 0xEB	; 235
    2e66:	fe 4f       	sbci	r31, 0xFE	; 254
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	a8 e4       	ldi	r26, 0x48	; 72
    2e6e:	b3 e4       	ldi	r27, 0x43	; 67
    2e70:	80 83       	st	Z, r24
    2e72:	91 83       	std	Z+1, r25	; 0x01
    2e74:	a2 83       	std	Z+2, r26	; 0x02
    2e76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e78:	8e 01       	movw	r16, r28
    2e7a:	0f 5e       	subi	r16, 0xEF	; 239
    2e7c:	1e 4f       	sbci	r17, 0xFE	; 254
    2e7e:	fe 01       	movw	r30, r28
    2e80:	eb 5e       	subi	r30, 0xEB	; 235
    2e82:	fe 4f       	sbci	r31, 0xFE	; 254
    2e84:	60 81       	ld	r22, Z
    2e86:	71 81       	ldd	r23, Z+1	; 0x01
    2e88:	82 81       	ldd	r24, Z+2	; 0x02
    2e8a:	93 81       	ldd	r25, Z+3	; 0x03
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	4a ef       	ldi	r20, 0xFA	; 250
    2e92:	54 e4       	ldi	r21, 0x44	; 68
    2e94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	80 83       	st	Z, r24
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	a2 83       	std	Z+2, r26	; 0x02
    2ea4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ef 5e       	subi	r30, 0xEF	; 239
    2eaa:	fe 4f       	sbci	r31, 0xFE	; 254
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	40 e8       	ldi	r20, 0x80	; 128
    2eba:	5f e3       	ldi	r21, 0x3F	; 63
    2ebc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ec0:	88 23       	and	r24, r24
    2ec2:	44 f4       	brge	.+16     	; 0x2ed4 <main+0x20ec>
		__ticks = 1;
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	e1 5f       	subi	r30, 0xF1	; 241
    2ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	80 83       	st	Z, r24
    2ed2:	64 c0       	rjmp	.+200    	; 0x2f9c <main+0x21b4>
	else if (__tmp > 65535)
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	ef 5e       	subi	r30, 0xEF	; 239
    2ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eda:	60 81       	ld	r22, Z
    2edc:	71 81       	ldd	r23, Z+1	; 0x01
    2ede:	82 81       	ldd	r24, Z+2	; 0x02
    2ee0:	93 81       	ldd	r25, Z+3	; 0x03
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	3f ef       	ldi	r19, 0xFF	; 255
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	57 e4       	ldi	r21, 0x47	; 71
    2eea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	0c f0       	brlt	.+2      	; 0x2ef4 <main+0x210c>
    2ef2:	43 c0       	rjmp	.+134    	; 0x2f7a <main+0x2192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	eb 5e       	subi	r30, 0xEB	; 235
    2ef8:	fe 4f       	sbci	r31, 0xFE	; 254
    2efa:	60 81       	ld	r22, Z
    2efc:	71 81       	ldd	r23, Z+1	; 0x01
    2efe:	82 81       	ldd	r24, Z+2	; 0x02
    2f00:	93 81       	ldd	r25, Z+3	; 0x03
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	40 e2       	ldi	r20, 0x20	; 32
    2f08:	51 e4       	ldi	r21, 0x41	; 65
    2f0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	8e 01       	movw	r16, r28
    2f14:	01 5f       	subi	r16, 0xF1	; 241
    2f16:	1e 4f       	sbci	r17, 0xFE	; 254
    2f18:	bc 01       	movw	r22, r24
    2f1a:	cd 01       	movw	r24, r26
    2f1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	f8 01       	movw	r30, r16
    2f26:	91 83       	std	Z+1, r25	; 0x01
    2f28:	80 83       	st	Z, r24
    2f2a:	1f c0       	rjmp	.+62     	; 0x2f6a <main+0x2182>
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e3 5f       	subi	r30, 0xF3	; 243
    2f30:	fe 4f       	sbci	r31, 0xFE	; 254
    2f32:	88 ec       	ldi	r24, 0xC8	; 200
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	91 83       	std	Z+1, r25	; 0x01
    2f38:	80 83       	st	Z, r24
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e3 5f       	subi	r30, 0xF3	; 243
    2f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f40:	80 81       	ld	r24, Z
    2f42:	91 81       	ldd	r25, Z+1	; 0x01
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <main+0x215c>
    2f48:	fe 01       	movw	r30, r28
    2f4a:	e3 5f       	subi	r30, 0xF3	; 243
    2f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f52:	de 01       	movw	r26, r28
    2f54:	a1 5f       	subi	r26, 0xF1	; 241
    2f56:	be 4f       	sbci	r27, 0xFE	; 254
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e1 5f       	subi	r30, 0xF1	; 241
    2f5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f5e:	80 81       	ld	r24, Z
    2f60:	91 81       	ldd	r25, Z+1	; 0x01
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	11 96       	adiw	r26, 0x01	; 1
    2f66:	9c 93       	st	X, r25
    2f68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	e1 5f       	subi	r30, 0xF1	; 241
    2f6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f70:	80 81       	ld	r24, Z
    2f72:	91 81       	ldd	r25, Z+1	; 0x01
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	d1 f6       	brne	.-76     	; 0x2f2c <main+0x2144>
    2f78:	ac c8       	rjmp	.-3752   	; 0x20d2 <main+0x12ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7a:	8e 01       	movw	r16, r28
    2f7c:	01 5f       	subi	r16, 0xF1	; 241
    2f7e:	1e 4f       	sbci	r17, 0xFE	; 254
    2f80:	fe 01       	movw	r30, r28
    2f82:	ef 5e       	subi	r30, 0xEF	; 239
    2f84:	fe 4f       	sbci	r31, 0xFE	; 254
    2f86:	60 81       	ld	r22, Z
    2f88:	71 81       	ldd	r23, Z+1	; 0x01
    2f8a:	82 81       	ldd	r24, Z+2	; 0x02
    2f8c:	93 81       	ldd	r25, Z+3	; 0x03
    2f8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	f8 01       	movw	r30, r16
    2f98:	91 83       	std	Z+1, r25	; 0x01
    2f9a:	80 83       	st	Z, r24
    2f9c:	de 01       	movw	r26, r28
    2f9e:	a5 5f       	subi	r26, 0xF5	; 245
    2fa0:	be 4f       	sbci	r27, 0xFE	; 254
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e1 5f       	subi	r30, 0xF1	; 241
    2fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa8:	80 81       	ld	r24, Z
    2faa:	91 81       	ldd	r25, Z+1	; 0x01
    2fac:	11 96       	adiw	r26, 0x01	; 1
    2fae:	9c 93       	st	X, r25
    2fb0:	8e 93       	st	-X, r24
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	e5 5f       	subi	r30, 0xF5	; 245
    2fb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb8:	80 81       	ld	r24, Z
    2fba:	91 81       	ldd	r25, Z+1	; 0x01
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	f1 f7       	brne	.-4      	; 0x2fbc <main+0x21d4>
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e5 5f       	subi	r30, 0xF5	; 245
    2fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	80 83       	st	Z, r24
    2fca:	83 c8       	rjmp	.-3834   	; 0x20d2 <main+0x12ea>
            }

            break;

        case DOOR_MANUAL_MENU:
            LCD_VidClearScreen();
    2fcc:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>

            LCD_VidSendString("Door S: ");
    2fd0:	8d e9       	ldi	r24, 0x9D	; 157
    2fd2:	91 e0       	ldi	r25, 0x01	; 1
    2fd4:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>

            UART_VidSendByte(DOOR_STATUS);
    2fd8:	80 e1       	ldi	r24, 0x10	; 16
    2fda:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>
            Local_u8Response = UART_u8ReceiveData();
    2fde:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <UART_u8ReceiveData>
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	e4 5e       	subi	r30, 0xE4	; 228
    2fe6:	fd 4f       	sbci	r31, 0xFD	; 253
    2fe8:	80 83       	st	Z, r24

            if (OPEN_STATUS == Local_u8Response)
    2fea:	fe 01       	movw	r30, r28
    2fec:	e4 5e       	subi	r30, 0xE4	; 228
    2fee:	fd 4f       	sbci	r31, 0xFD	; 253
    2ff0:	80 81       	ld	r24, Z
    2ff2:	82 30       	cpi	r24, 0x02	; 2
    2ff4:	29 f4       	brne	.+10     	; 0x3000 <main+0x2218>
                LCD_VidSendString("Open");
    2ff6:	86 ea       	ldi	r24, 0xA6	; 166
    2ff8:	91 e0       	ldi	r25, 0x01	; 1
    2ffa:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    2ffe:	0f c0       	rjmp	.+30     	; 0x301e <main+0x2236>
            else if (CLOSED_STATUS == Local_u8Response)
    3000:	fe 01       	movw	r30, r28
    3002:	e4 5e       	subi	r30, 0xE4	; 228
    3004:	fd 4f       	sbci	r31, 0xFD	; 253
    3006:	80 81       	ld	r24, Z
    3008:	83 30       	cpi	r24, 0x03	; 3
    300a:	29 f4       	brne	.+10     	; 0x3016 <main+0x222e>
                LCD_VidSendString("Closed");
    300c:	8b ea       	ldi	r24, 0xAB	; 171
    300e:	91 e0       	ldi	r25, 0x01	; 1
    3010:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    3014:	04 c0       	rjmp	.+8      	; 0x301e <main+0x2236>
            else
                LCD_VidSendString("ERROR");
    3016:	82 eb       	ldi	r24, 0xB2	; 178
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>

            LCD_VidSendString_XY("1.Open   2.Close", 1, 0);
    301e:	88 eb       	ldi	r24, 0xB8	; 184
    3020:	91 e0       	ldi	r25, 0x01	; 1
    3022:	61 e0       	ldi	r22, 0x01	; 1
    3024:	40 e0       	ldi	r20, 0x00	; 0
    3026:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            WaitForKey(&Local_u8KeyPressed);
    302a:	ce 01       	movw	r24, r28
    302c:	82 5e       	subi	r24, 0xE2	; 226
    302e:	9d 4f       	sbci	r25, 0xFD	; 253
    3030:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <WaitForKey>

            if (SELECT_OPEN == Local_u8KeyPressed)
    3034:	fe 01       	movw	r30, r28
    3036:	e2 5e       	subi	r30, 0xE2	; 226
    3038:	fd 4f       	sbci	r31, 0xFD	; 253
    303a:	80 81       	ld	r24, Z
    303c:	81 33       	cpi	r24, 0x31	; 49
    303e:	09 f0       	breq	.+2      	; 0x3042 <main+0x225a>
    3040:	81 c1       	rjmp	.+770    	; 0x3344 <main+0x255c>
            {
                LCD_VidClearScreen();
    3042:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Open");
    3046:	86 ea       	ldi	r24, 0xA6	; 166
    3048:	91 e0       	ldi	r25, 0x01	; 1
    304a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    304e:	fe 01       	movw	r30, r28
    3050:	e9 5f       	subi	r30, 0xF9	; 249
    3052:	fe 4f       	sbci	r31, 0xFE	; 254
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	a8 e4       	ldi	r26, 0x48	; 72
    305a:	b3 e4       	ldi	r27, 0x43	; 67
    305c:	80 83       	st	Z, r24
    305e:	91 83       	std	Z+1, r25	; 0x01
    3060:	a2 83       	std	Z+2, r26	; 0x02
    3062:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3064:	8e 01       	movw	r16, r28
    3066:	0d 5f       	subi	r16, 0xFD	; 253
    3068:	1e 4f       	sbci	r17, 0xFE	; 254
    306a:	fe 01       	movw	r30, r28
    306c:	e9 5f       	subi	r30, 0xF9	; 249
    306e:	fe 4f       	sbci	r31, 0xFE	; 254
    3070:	60 81       	ld	r22, Z
    3072:	71 81       	ldd	r23, Z+1	; 0x01
    3074:	82 81       	ldd	r24, Z+2	; 0x02
    3076:	93 81       	ldd	r25, Z+3	; 0x03
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	4a ef       	ldi	r20, 0xFA	; 250
    307e:	54 e4       	ldi	r21, 0x44	; 68
    3080:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	f8 01       	movw	r30, r16
    308a:	80 83       	st	Z, r24
    308c:	91 83       	std	Z+1, r25	; 0x01
    308e:	a2 83       	std	Z+2, r26	; 0x02
    3090:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3092:	fe 01       	movw	r30, r28
    3094:	ed 5f       	subi	r30, 0xFD	; 253
    3096:	fe 4f       	sbci	r31, 0xFE	; 254
    3098:	60 81       	ld	r22, Z
    309a:	71 81       	ldd	r23, Z+1	; 0x01
    309c:	82 81       	ldd	r24, Z+2	; 0x02
    309e:	93 81       	ldd	r25, Z+3	; 0x03
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e8       	ldi	r20, 0x80	; 128
    30a6:	5f e3       	ldi	r21, 0x3F	; 63
    30a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30ac:	88 23       	and	r24, r24
    30ae:	44 f4       	brge	.+16     	; 0x30c0 <main+0x22d8>
		__ticks = 1;
    30b0:	fe 01       	movw	r30, r28
    30b2:	ef 5f       	subi	r30, 0xFF	; 255
    30b4:	fe 4f       	sbci	r31, 0xFE	; 254
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	91 83       	std	Z+1, r25	; 0x01
    30bc:	80 83       	st	Z, r24
    30be:	64 c0       	rjmp	.+200    	; 0x3188 <main+0x23a0>
	else if (__tmp > 65535)
    30c0:	fe 01       	movw	r30, r28
    30c2:	ed 5f       	subi	r30, 0xFD	; 253
    30c4:	fe 4f       	sbci	r31, 0xFE	; 254
    30c6:	60 81       	ld	r22, Z
    30c8:	71 81       	ldd	r23, Z+1	; 0x01
    30ca:	82 81       	ldd	r24, Z+2	; 0x02
    30cc:	93 81       	ldd	r25, Z+3	; 0x03
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	3f ef       	ldi	r19, 0xFF	; 255
    30d2:	4f e7       	ldi	r20, 0x7F	; 127
    30d4:	57 e4       	ldi	r21, 0x47	; 71
    30d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30da:	18 16       	cp	r1, r24
    30dc:	0c f0       	brlt	.+2      	; 0x30e0 <main+0x22f8>
    30de:	43 c0       	rjmp	.+134    	; 0x3166 <main+0x237e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e0:	fe 01       	movw	r30, r28
    30e2:	e9 5f       	subi	r30, 0xF9	; 249
    30e4:	fe 4f       	sbci	r31, 0xFE	; 254
    30e6:	60 81       	ld	r22, Z
    30e8:	71 81       	ldd	r23, Z+1	; 0x01
    30ea:	82 81       	ldd	r24, Z+2	; 0x02
    30ec:	93 81       	ldd	r25, Z+3	; 0x03
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	40 e2       	ldi	r20, 0x20	; 32
    30f4:	51 e4       	ldi	r21, 0x41	; 65
    30f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	8e 01       	movw	r16, r28
    3100:	0f 5f       	subi	r16, 0xFF	; 255
    3102:	1e 4f       	sbci	r17, 0xFE	; 254
    3104:	bc 01       	movw	r22, r24
    3106:	cd 01       	movw	r24, r26
    3108:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	f8 01       	movw	r30, r16
    3112:	91 83       	std	Z+1, r25	; 0x01
    3114:	80 83       	st	Z, r24
    3116:	1f c0       	rjmp	.+62     	; 0x3156 <main+0x236e>
    3118:	fe 01       	movw	r30, r28
    311a:	e1 50       	subi	r30, 0x01	; 1
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	88 ec       	ldi	r24, 0xC8	; 200
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	91 83       	std	Z+1, r25	; 0x01
    3124:	80 83       	st	Z, r24
    3126:	fe 01       	movw	r30, r28
    3128:	e1 50       	subi	r30, 0x01	; 1
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	80 81       	ld	r24, Z
    312e:	91 81       	ldd	r25, Z+1	; 0x01
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <main+0x2348>
    3134:	fe 01       	movw	r30, r28
    3136:	e1 50       	subi	r30, 0x01	; 1
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	91 83       	std	Z+1, r25	; 0x01
    313c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313e:	de 01       	movw	r26, r28
    3140:	af 5f       	subi	r26, 0xFF	; 255
    3142:	be 4f       	sbci	r27, 0xFE	; 254
    3144:	fe 01       	movw	r30, r28
    3146:	ef 5f       	subi	r30, 0xFF	; 255
    3148:	fe 4f       	sbci	r31, 0xFE	; 254
    314a:	80 81       	ld	r24, Z
    314c:	91 81       	ldd	r25, Z+1	; 0x01
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	11 96       	adiw	r26, 0x01	; 1
    3152:	9c 93       	st	X, r25
    3154:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3156:	fe 01       	movw	r30, r28
    3158:	ef 5f       	subi	r30, 0xFF	; 255
    315a:	fe 4f       	sbci	r31, 0xFE	; 254
    315c:	80 81       	ld	r24, Z
    315e:	91 81       	ldd	r25, Z+1	; 0x01
    3160:	00 97       	sbiw	r24, 0x00	; 0
    3162:	d1 f6       	brne	.-76     	; 0x3118 <main+0x2330>
    3164:	27 c0       	rjmp	.+78     	; 0x31b4 <main+0x23cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3166:	8e 01       	movw	r16, r28
    3168:	0f 5f       	subi	r16, 0xFF	; 255
    316a:	1e 4f       	sbci	r17, 0xFE	; 254
    316c:	fe 01       	movw	r30, r28
    316e:	ed 5f       	subi	r30, 0xFD	; 253
    3170:	fe 4f       	sbci	r31, 0xFE	; 254
    3172:	60 81       	ld	r22, Z
    3174:	71 81       	ldd	r23, Z+1	; 0x01
    3176:	82 81       	ldd	r24, Z+2	; 0x02
    3178:	93 81       	ldd	r25, Z+3	; 0x03
    317a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	f8 01       	movw	r30, r16
    3184:	91 83       	std	Z+1, r25	; 0x01
    3186:	80 83       	st	Z, r24
    3188:	de 01       	movw	r26, r28
    318a:	a3 50       	subi	r26, 0x03	; 3
    318c:	bf 4f       	sbci	r27, 0xFF	; 255
    318e:	fe 01       	movw	r30, r28
    3190:	ef 5f       	subi	r30, 0xFF	; 255
    3192:	fe 4f       	sbci	r31, 0xFE	; 254
    3194:	80 81       	ld	r24, Z
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	8d 93       	st	X+, r24
    319a:	9c 93       	st	X, r25
    319c:	fe 01       	movw	r30, r28
    319e:	e3 50       	subi	r30, 0x03	; 3
    31a0:	ff 4f       	sbci	r31, 0xFF	; 255
    31a2:	80 81       	ld	r24, Z
    31a4:	91 81       	ldd	r25, Z+1	; 0x01
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <main+0x23be>
    31aa:	fe 01       	movw	r30, r28
    31ac:	e3 50       	subi	r30, 0x03	; 3
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	91 83       	std	Z+1, r25	; 0x01
    31b2:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);

                
                UART_VidSendByte(DOOR_OPEN);
    31b4:	8a e1       	ldi	r24, 0x1A	; 26
    31b6:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>

                LCD_VidSendString_XY("DOOR is OPENING", 0, 0);
    31ba:	8a ef       	ldi	r24, 0xFA	; 250
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	60 e0       	ldi	r22, 0x00	; 0
    31c0:	40 e0       	ldi	r20, 0x00	; 0
    31c2:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    31c6:	fe 01       	movw	r30, r28
    31c8:	e7 50       	subi	r30, 0x07	; 7
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	a6 e9       	ldi	r26, 0x96	; 150
    31d2:	b4 e4       	ldi	r27, 0x44	; 68
    31d4:	80 83       	st	Z, r24
    31d6:	91 83       	std	Z+1, r25	; 0x01
    31d8:	a2 83       	std	Z+2, r26	; 0x02
    31da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31dc:	8e 01       	movw	r16, r28
    31de:	0b 50       	subi	r16, 0x0B	; 11
    31e0:	1f 4f       	sbci	r17, 0xFF	; 255
    31e2:	fe 01       	movw	r30, r28
    31e4:	e7 50       	subi	r30, 0x07	; 7
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	60 81       	ld	r22, Z
    31ea:	71 81       	ldd	r23, Z+1	; 0x01
    31ec:	82 81       	ldd	r24, Z+2	; 0x02
    31ee:	93 81       	ldd	r25, Z+3	; 0x03
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	4a ef       	ldi	r20, 0xFA	; 250
    31f6:	54 e4       	ldi	r21, 0x44	; 68
    31f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	f8 01       	movw	r30, r16
    3202:	80 83       	st	Z, r24
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	a2 83       	std	Z+2, r26	; 0x02
    3208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    320a:	fe 01       	movw	r30, r28
    320c:	eb 50       	subi	r30, 0x0B	; 11
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	60 81       	ld	r22, Z
    3212:	71 81       	ldd	r23, Z+1	; 0x01
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e8       	ldi	r20, 0x80	; 128
    321e:	5f e3       	ldi	r21, 0x3F	; 63
    3220:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3224:	88 23       	and	r24, r24
    3226:	44 f4       	brge	.+16     	; 0x3238 <main+0x2450>
		__ticks = 1;
    3228:	fe 01       	movw	r30, r28
    322a:	ed 50       	subi	r30, 0x0D	; 13
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	91 83       	std	Z+1, r25	; 0x01
    3234:	80 83       	st	Z, r24
    3236:	64 c0       	rjmp	.+200    	; 0x3300 <main+0x2518>
	else if (__tmp > 65535)
    3238:	fe 01       	movw	r30, r28
    323a:	eb 50       	subi	r30, 0x0B	; 11
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	60 81       	ld	r22, Z
    3240:	71 81       	ldd	r23, Z+1	; 0x01
    3242:	82 81       	ldd	r24, Z+2	; 0x02
    3244:	93 81       	ldd	r25, Z+3	; 0x03
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	3f ef       	ldi	r19, 0xFF	; 255
    324a:	4f e7       	ldi	r20, 0x7F	; 127
    324c:	57 e4       	ldi	r21, 0x47	; 71
    324e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3252:	18 16       	cp	r1, r24
    3254:	0c f0       	brlt	.+2      	; 0x3258 <main+0x2470>
    3256:	43 c0       	rjmp	.+134    	; 0x32de <main+0x24f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3258:	fe 01       	movw	r30, r28
    325a:	e7 50       	subi	r30, 0x07	; 7
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	60 81       	ld	r22, Z
    3260:	71 81       	ldd	r23, Z+1	; 0x01
    3262:	82 81       	ldd	r24, Z+2	; 0x02
    3264:	93 81       	ldd	r25, Z+3	; 0x03
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e2       	ldi	r20, 0x20	; 32
    326c:	51 e4       	ldi	r21, 0x41	; 65
    326e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	8e 01       	movw	r16, r28
    3278:	0d 50       	subi	r16, 0x0D	; 13
    327a:	1f 4f       	sbci	r17, 0xFF	; 255
    327c:	bc 01       	movw	r22, r24
    327e:	cd 01       	movw	r24, r26
    3280:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	f8 01       	movw	r30, r16
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
    328e:	1f c0       	rjmp	.+62     	; 0x32ce <main+0x24e6>
    3290:	fe 01       	movw	r30, r28
    3292:	ef 50       	subi	r30, 0x0F	; 15
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	88 ec       	ldi	r24, 0xC8	; 200
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	91 83       	std	Z+1, r25	; 0x01
    329c:	80 83       	st	Z, r24
    329e:	fe 01       	movw	r30, r28
    32a0:	ef 50       	subi	r30, 0x0F	; 15
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	80 81       	ld	r24, Z
    32a6:	91 81       	ldd	r25, Z+1	; 0x01
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <main+0x24c0>
    32ac:	fe 01       	movw	r30, r28
    32ae:	ef 50       	subi	r30, 0x0F	; 15
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	91 83       	std	Z+1, r25	; 0x01
    32b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b6:	de 01       	movw	r26, r28
    32b8:	ad 50       	subi	r26, 0x0D	; 13
    32ba:	bf 4f       	sbci	r27, 0xFF	; 255
    32bc:	fe 01       	movw	r30, r28
    32be:	ed 50       	subi	r30, 0x0D	; 13
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	80 81       	ld	r24, Z
    32c4:	91 81       	ldd	r25, Z+1	; 0x01
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	11 96       	adiw	r26, 0x01	; 1
    32ca:	9c 93       	st	X, r25
    32cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ce:	fe 01       	movw	r30, r28
    32d0:	ed 50       	subi	r30, 0x0D	; 13
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	80 81       	ld	r24, Z
    32d6:	91 81       	ldd	r25, Z+1	; 0x01
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	d1 f6       	brne	.-76     	; 0x3290 <main+0x24a8>
    32dc:	27 c0       	rjmp	.+78     	; 0x332c <main+0x2544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32de:	8e 01       	movw	r16, r28
    32e0:	0d 50       	subi	r16, 0x0D	; 13
    32e2:	1f 4f       	sbci	r17, 0xFF	; 255
    32e4:	fe 01       	movw	r30, r28
    32e6:	eb 50       	subi	r30, 0x0B	; 11
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	60 81       	ld	r22, Z
    32ec:	71 81       	ldd	r23, Z+1	; 0x01
    32ee:	82 81       	ldd	r24, Z+2	; 0x02
    32f0:	93 81       	ldd	r25, Z+3	; 0x03
    32f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	f8 01       	movw	r30, r16
    32fc:	91 83       	std	Z+1, r25	; 0x01
    32fe:	80 83       	st	Z, r24
    3300:	de 01       	movw	r26, r28
    3302:	a1 51       	subi	r26, 0x11	; 17
    3304:	bf 4f       	sbci	r27, 0xFF	; 255
    3306:	fe 01       	movw	r30, r28
    3308:	ed 50       	subi	r30, 0x0D	; 13
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	80 81       	ld	r24, Z
    330e:	91 81       	ldd	r25, Z+1	; 0x01
    3310:	8d 93       	st	X+, r24
    3312:	9c 93       	st	X, r25
    3314:	fe 01       	movw	r30, r28
    3316:	e1 51       	subi	r30, 0x11	; 17
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	80 81       	ld	r24, Z
    331c:	91 81       	ldd	r25, Z+1	; 0x01
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <main+0x2536>
    3322:	fe 01       	movw	r30, r28
    3324:	e1 51       	subi	r30, 0x11	; 17
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	91 83       	std	Z+1, r25	; 0x01
    332a:	80 83       	st	Z, r24
                _delay_ms(DOOR_TIME);
                DIO_VidSetPinValue(Port_B, LED_CLOSE_DOOR, PinLow);
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	62 e0       	ldi	r22, 0x02	; 2
    3330:	40 e0       	ldi	r20, 0x00	; 0
    3332:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
                DIO_VidSetPinValue(Port_B, LED_OPEN_DOOR, PinHigh);
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	61 e0       	ldi	r22, 0x01	; 1
    333a:	41 e0       	ldi	r20, 0x01	; 1
    333c:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    3340:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
            }
            else if (SELECT_CLOSE == Local_u8KeyPressed)
    3344:	fe 01       	movw	r30, r28
    3346:	e2 5e       	subi	r30, 0xE2	; 226
    3348:	fd 4f       	sbci	r31, 0xFD	; 253
    334a:	80 81       	ld	r24, Z
    334c:	82 33       	cpi	r24, 0x32	; 50
    334e:	09 f0       	breq	.+2      	; 0x3352 <main+0x256a>
    3350:	86 c1       	rjmp	.+780    	; 0x365e <main+0x2876>
            {
                LCD_VidClearScreen();
    3352:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Close");
    3356:	89 ec       	ldi	r24, 0xC9	; 201
    3358:	91 e0       	ldi	r25, 0x01	; 1
    335a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    335e:	fe 01       	movw	r30, r28
    3360:	e5 51       	subi	r30, 0x15	; 21
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	a8 e4       	ldi	r26, 0x48	; 72
    336a:	b3 e4       	ldi	r27, 0x43	; 67
    336c:	80 83       	st	Z, r24
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	a2 83       	std	Z+2, r26	; 0x02
    3372:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3374:	8e 01       	movw	r16, r28
    3376:	09 51       	subi	r16, 0x19	; 25
    3378:	1f 4f       	sbci	r17, 0xFF	; 255
    337a:	fe 01       	movw	r30, r28
    337c:	e5 51       	subi	r30, 0x15	; 21
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	60 81       	ld	r22, Z
    3382:	71 81       	ldd	r23, Z+1	; 0x01
    3384:	82 81       	ldd	r24, Z+2	; 0x02
    3386:	93 81       	ldd	r25, Z+3	; 0x03
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	4a ef       	ldi	r20, 0xFA	; 250
    338e:	54 e4       	ldi	r21, 0x44	; 68
    3390:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	f8 01       	movw	r30, r16
    339a:	80 83       	st	Z, r24
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	a2 83       	std	Z+2, r26	; 0x02
    33a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33a2:	fe 01       	movw	r30, r28
    33a4:	e9 51       	subi	r30, 0x19	; 25
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	60 81       	ld	r22, Z
    33aa:	71 81       	ldd	r23, Z+1	; 0x01
    33ac:	82 81       	ldd	r24, Z+2	; 0x02
    33ae:	93 81       	ldd	r25, Z+3	; 0x03
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e8       	ldi	r20, 0x80	; 128
    33b6:	5f e3       	ldi	r21, 0x3F	; 63
    33b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    33bc:	88 23       	and	r24, r24
    33be:	44 f4       	brge	.+16     	; 0x33d0 <main+0x25e8>
		__ticks = 1;
    33c0:	fe 01       	movw	r30, r28
    33c2:	eb 51       	subi	r30, 0x1B	; 27
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	91 83       	std	Z+1, r25	; 0x01
    33cc:	80 83       	st	Z, r24
    33ce:	64 c0       	rjmp	.+200    	; 0x3498 <main+0x26b0>
	else if (__tmp > 65535)
    33d0:	fe 01       	movw	r30, r28
    33d2:	e9 51       	subi	r30, 0x19	; 25
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	60 81       	ld	r22, Z
    33d8:	71 81       	ldd	r23, Z+1	; 0x01
    33da:	82 81       	ldd	r24, Z+2	; 0x02
    33dc:	93 81       	ldd	r25, Z+3	; 0x03
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	3f ef       	ldi	r19, 0xFF	; 255
    33e2:	4f e7       	ldi	r20, 0x7F	; 127
    33e4:	57 e4       	ldi	r21, 0x47	; 71
    33e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    33ea:	18 16       	cp	r1, r24
    33ec:	0c f0       	brlt	.+2      	; 0x33f0 <main+0x2608>
    33ee:	43 c0       	rjmp	.+134    	; 0x3476 <main+0x268e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f0:	fe 01       	movw	r30, r28
    33f2:	e5 51       	subi	r30, 0x15	; 21
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	60 81       	ld	r22, Z
    33f8:	71 81       	ldd	r23, Z+1	; 0x01
    33fa:	82 81       	ldd	r24, Z+2	; 0x02
    33fc:	93 81       	ldd	r25, Z+3	; 0x03
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	40 e2       	ldi	r20, 0x20	; 32
    3404:	51 e4       	ldi	r21, 0x41	; 65
    3406:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	8e 01       	movw	r16, r28
    3410:	0b 51       	subi	r16, 0x1B	; 27
    3412:	1f 4f       	sbci	r17, 0xFF	; 255
    3414:	bc 01       	movw	r22, r24
    3416:	cd 01       	movw	r24, r26
    3418:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	f8 01       	movw	r30, r16
    3422:	91 83       	std	Z+1, r25	; 0x01
    3424:	80 83       	st	Z, r24
    3426:	1f c0       	rjmp	.+62     	; 0x3466 <main+0x267e>
    3428:	fe 01       	movw	r30, r28
    342a:	ed 51       	subi	r30, 0x1D	; 29
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	88 ec       	ldi	r24, 0xC8	; 200
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	91 83       	std	Z+1, r25	; 0x01
    3434:	80 83       	st	Z, r24
    3436:	fe 01       	movw	r30, r28
    3438:	ed 51       	subi	r30, 0x1D	; 29
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	80 81       	ld	r24, Z
    343e:	91 81       	ldd	r25, Z+1	; 0x01
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	f1 f7       	brne	.-4      	; 0x3440 <main+0x2658>
    3444:	fe 01       	movw	r30, r28
    3446:	ed 51       	subi	r30, 0x1D	; 29
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	91 83       	std	Z+1, r25	; 0x01
    344c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344e:	de 01       	movw	r26, r28
    3450:	ab 51       	subi	r26, 0x1B	; 27
    3452:	bf 4f       	sbci	r27, 0xFF	; 255
    3454:	fe 01       	movw	r30, r28
    3456:	eb 51       	subi	r30, 0x1B	; 27
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	80 81       	ld	r24, Z
    345c:	91 81       	ldd	r25, Z+1	; 0x01
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	11 96       	adiw	r26, 0x01	; 1
    3462:	9c 93       	st	X, r25
    3464:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3466:	fe 01       	movw	r30, r28
    3468:	eb 51       	subi	r30, 0x1B	; 27
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	80 81       	ld	r24, Z
    346e:	91 81       	ldd	r25, Z+1	; 0x01
    3470:	00 97       	sbiw	r24, 0x00	; 0
    3472:	d1 f6       	brne	.-76     	; 0x3428 <main+0x2640>
    3474:	27 c0       	rjmp	.+78     	; 0x34c4 <main+0x26dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3476:	8e 01       	movw	r16, r28
    3478:	0b 51       	subi	r16, 0x1B	; 27
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	fe 01       	movw	r30, r28
    347e:	e9 51       	subi	r30, 0x19	; 25
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	60 81       	ld	r22, Z
    3484:	71 81       	ldd	r23, Z+1	; 0x01
    3486:	82 81       	ldd	r24, Z+2	; 0x02
    3488:	93 81       	ldd	r25, Z+3	; 0x03
    348a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	f8 01       	movw	r30, r16
    3494:	91 83       	std	Z+1, r25	; 0x01
    3496:	80 83       	st	Z, r24
    3498:	de 01       	movw	r26, r28
    349a:	af 51       	subi	r26, 0x1F	; 31
    349c:	bf 4f       	sbci	r27, 0xFF	; 255
    349e:	fe 01       	movw	r30, r28
    34a0:	eb 51       	subi	r30, 0x1B	; 27
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 81       	ld	r24, Z
    34a6:	91 81       	ldd	r25, Z+1	; 0x01
    34a8:	8d 93       	st	X+, r24
    34aa:	9c 93       	st	X, r25
    34ac:	fe 01       	movw	r30, r28
    34ae:	ef 51       	subi	r30, 0x1F	; 31
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	80 81       	ld	r24, Z
    34b4:	91 81       	ldd	r25, Z+1	; 0x01
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <main+0x26ce>
    34ba:	fe 01       	movw	r30, r28
    34bc:	ef 51       	subi	r30, 0x1F	; 31
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	91 83       	std	Z+1, r25	; 0x01
    34c2:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);

                Local_u8ShowMenu = DOOR_MANUAL_MENU;
    34c4:	fe 01       	movw	r30, r28
    34c6:	e3 5e       	subi	r30, 0xE3	; 227
    34c8:	fd 4f       	sbci	r31, 0xFD	; 253
    34ca:	84 e0       	ldi	r24, 0x04	; 4
    34cc:	80 83       	st	Z, r24

                UART_VidSendByte(DOOR_CLOSE);
    34ce:	84 e2       	ldi	r24, 0x24	; 36
    34d0:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>

                LCD_VidSendString_XY("DOOR is CLOSING", 0, 0);
    34d4:	8a e0       	ldi	r24, 0x0A	; 10
    34d6:	91 e0       	ldi	r25, 0x01	; 1
    34d8:	60 e0       	ldi	r22, 0x00	; 0
    34da:	40 e0       	ldi	r20, 0x00	; 0
    34dc:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    34e0:	fe 01       	movw	r30, r28
    34e2:	e3 52       	subi	r30, 0x23	; 35
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	a6 e9       	ldi	r26, 0x96	; 150
    34ec:	b4 e4       	ldi	r27, 0x44	; 68
    34ee:	80 83       	st	Z, r24
    34f0:	91 83       	std	Z+1, r25	; 0x01
    34f2:	a2 83       	std	Z+2, r26	; 0x02
    34f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f6:	8e 01       	movw	r16, r28
    34f8:	07 52       	subi	r16, 0x27	; 39
    34fa:	1f 4f       	sbci	r17, 0xFF	; 255
    34fc:	fe 01       	movw	r30, r28
    34fe:	e3 52       	subi	r30, 0x23	; 35
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	60 81       	ld	r22, Z
    3504:	71 81       	ldd	r23, Z+1	; 0x01
    3506:	82 81       	ldd	r24, Z+2	; 0x02
    3508:	93 81       	ldd	r25, Z+3	; 0x03
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	4a ef       	ldi	r20, 0xFA	; 250
    3510:	54 e4       	ldi	r21, 0x44	; 68
    3512:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	f8 01       	movw	r30, r16
    351c:	80 83       	st	Z, r24
    351e:	91 83       	std	Z+1, r25	; 0x01
    3520:	a2 83       	std	Z+2, r26	; 0x02
    3522:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3524:	fe 01       	movw	r30, r28
    3526:	e7 52       	subi	r30, 0x27	; 39
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	60 81       	ld	r22, Z
    352c:	71 81       	ldd	r23, Z+1	; 0x01
    352e:	82 81       	ldd	r24, Z+2	; 0x02
    3530:	93 81       	ldd	r25, Z+3	; 0x03
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	40 e8       	ldi	r20, 0x80	; 128
    3538:	5f e3       	ldi	r21, 0x3F	; 63
    353a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    353e:	88 23       	and	r24, r24
    3540:	44 f4       	brge	.+16     	; 0x3552 <main+0x276a>
		__ticks = 1;
    3542:	fe 01       	movw	r30, r28
    3544:	e9 52       	subi	r30, 0x29	; 41
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	91 83       	std	Z+1, r25	; 0x01
    354e:	80 83       	st	Z, r24
    3550:	64 c0       	rjmp	.+200    	; 0x361a <main+0x2832>
	else if (__tmp > 65535)
    3552:	fe 01       	movw	r30, r28
    3554:	e7 52       	subi	r30, 0x27	; 39
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	60 81       	ld	r22, Z
    355a:	71 81       	ldd	r23, Z+1	; 0x01
    355c:	82 81       	ldd	r24, Z+2	; 0x02
    355e:	93 81       	ldd	r25, Z+3	; 0x03
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	3f ef       	ldi	r19, 0xFF	; 255
    3564:	4f e7       	ldi	r20, 0x7F	; 127
    3566:	57 e4       	ldi	r21, 0x47	; 71
    3568:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    356c:	18 16       	cp	r1, r24
    356e:	0c f0       	brlt	.+2      	; 0x3572 <main+0x278a>
    3570:	43 c0       	rjmp	.+134    	; 0x35f8 <main+0x2810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3572:	fe 01       	movw	r30, r28
    3574:	e3 52       	subi	r30, 0x23	; 35
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	60 81       	ld	r22, Z
    357a:	71 81       	ldd	r23, Z+1	; 0x01
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	40 e2       	ldi	r20, 0x20	; 32
    3586:	51 e4       	ldi	r21, 0x41	; 65
    3588:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	8e 01       	movw	r16, r28
    3592:	09 52       	subi	r16, 0x29	; 41
    3594:	1f 4f       	sbci	r17, 0xFF	; 255
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	f8 01       	movw	r30, r16
    35a4:	91 83       	std	Z+1, r25	; 0x01
    35a6:	80 83       	st	Z, r24
    35a8:	1f c0       	rjmp	.+62     	; 0x35e8 <main+0x2800>
    35aa:	fe 01       	movw	r30, r28
    35ac:	eb 52       	subi	r30, 0x2B	; 43
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	88 ec       	ldi	r24, 0xC8	; 200
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	91 83       	std	Z+1, r25	; 0x01
    35b6:	80 83       	st	Z, r24
    35b8:	fe 01       	movw	r30, r28
    35ba:	eb 52       	subi	r30, 0x2B	; 43
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	80 81       	ld	r24, Z
    35c0:	91 81       	ldd	r25, Z+1	; 0x01
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	f1 f7       	brne	.-4      	; 0x35c2 <main+0x27da>
    35c6:	fe 01       	movw	r30, r28
    35c8:	eb 52       	subi	r30, 0x2B	; 43
    35ca:	ff 4f       	sbci	r31, 0xFF	; 255
    35cc:	91 83       	std	Z+1, r25	; 0x01
    35ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d0:	de 01       	movw	r26, r28
    35d2:	a9 52       	subi	r26, 0x29	; 41
    35d4:	bf 4f       	sbci	r27, 0xFF	; 255
    35d6:	fe 01       	movw	r30, r28
    35d8:	e9 52       	subi	r30, 0x29	; 41
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 81       	ld	r24, Z
    35de:	91 81       	ldd	r25, Z+1	; 0x01
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	11 96       	adiw	r26, 0x01	; 1
    35e4:	9c 93       	st	X, r25
    35e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e8:	fe 01       	movw	r30, r28
    35ea:	e9 52       	subi	r30, 0x29	; 41
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	80 81       	ld	r24, Z
    35f0:	91 81       	ldd	r25, Z+1	; 0x01
    35f2:	00 97       	sbiw	r24, 0x00	; 0
    35f4:	d1 f6       	brne	.-76     	; 0x35aa <main+0x27c2>
    35f6:	27 c0       	rjmp	.+78     	; 0x3646 <main+0x285e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f8:	8e 01       	movw	r16, r28
    35fa:	09 52       	subi	r16, 0x29	; 41
    35fc:	1f 4f       	sbci	r17, 0xFF	; 255
    35fe:	fe 01       	movw	r30, r28
    3600:	e7 52       	subi	r30, 0x27	; 39
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	60 81       	ld	r22, Z
    3606:	71 81       	ldd	r23, Z+1	; 0x01
    3608:	82 81       	ldd	r24, Z+2	; 0x02
    360a:	93 81       	ldd	r25, Z+3	; 0x03
    360c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	f8 01       	movw	r30, r16
    3616:	91 83       	std	Z+1, r25	; 0x01
    3618:	80 83       	st	Z, r24
    361a:	de 01       	movw	r26, r28
    361c:	ad 52       	subi	r26, 0x2D	; 45
    361e:	bf 4f       	sbci	r27, 0xFF	; 255
    3620:	fe 01       	movw	r30, r28
    3622:	e9 52       	subi	r30, 0x29	; 41
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	80 81       	ld	r24, Z
    3628:	91 81       	ldd	r25, Z+1	; 0x01
    362a:	8d 93       	st	X+, r24
    362c:	9c 93       	st	X, r25
    362e:	fe 01       	movw	r30, r28
    3630:	ed 52       	subi	r30, 0x2D	; 45
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	80 81       	ld	r24, Z
    3636:	91 81       	ldd	r25, Z+1	; 0x01
    3638:	01 97       	sbiw	r24, 0x01	; 1
    363a:	f1 f7       	brne	.-4      	; 0x3638 <main+0x2850>
    363c:	fe 01       	movw	r30, r28
    363e:	ed 52       	subi	r30, 0x2D	; 45
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	91 83       	std	Z+1, r25	; 0x01
    3644:	80 83       	st	Z, r24
                _delay_ms(DOOR_TIME);
                DIO_VidSetPinValue(Port_B, LED_OPEN_DOOR, PinLow);
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	61 e0       	ldi	r22, 0x01	; 1
    364a:	40 e0       	ldi	r20, 0x00	; 0
    364c:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
                DIO_VidSetPinValue(Port_B, LED_CLOSE_DOOR, PinHigh);
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	62 e0       	ldi	r22, 0x02	; 2
    3654:	41 e0       	ldi	r20, 0x01	; 1
    3656:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    365a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
            }
            else if (SELECT_RETURN == Local_u8KeyPressed)
    365e:	fe 01       	movw	r30, r28
    3660:	e2 5e       	subi	r30, 0xE2	; 226
    3662:	fd 4f       	sbci	r31, 0xFD	; 253
    3664:	80 81       	ld	r24, Z
    3666:	80 33       	cpi	r24, 0x30	; 48
    3668:	09 f0       	breq	.+2      	; 0x366c <main+0x2884>
    366a:	c1 c0       	rjmp	.+386    	; 0x37ee <main+0x2a06>
            {
                LCD_VidClearScreen();
    366c:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Return");
    3670:	86 e9       	ldi	r24, 0x96	; 150
    3672:	91 e0       	ldi	r25, 0x01	; 1
    3674:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    3678:	fe 01       	movw	r30, r28
    367a:	e1 53       	subi	r30, 0x31	; 49
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	a8 e4       	ldi	r26, 0x48	; 72
    3684:	b3 e4       	ldi	r27, 0x43	; 67
    3686:	80 83       	st	Z, r24
    3688:	91 83       	std	Z+1, r25	; 0x01
    368a:	a2 83       	std	Z+2, r26	; 0x02
    368c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    368e:	8e 01       	movw	r16, r28
    3690:	05 53       	subi	r16, 0x35	; 53
    3692:	1f 4f       	sbci	r17, 0xFF	; 255
    3694:	fe 01       	movw	r30, r28
    3696:	e1 53       	subi	r30, 0x31	; 49
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	60 81       	ld	r22, Z
    369c:	71 81       	ldd	r23, Z+1	; 0x01
    369e:	82 81       	ldd	r24, Z+2	; 0x02
    36a0:	93 81       	ldd	r25, Z+3	; 0x03
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	4a ef       	ldi	r20, 0xFA	; 250
    36a8:	54 e4       	ldi	r21, 0x44	; 68
    36aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	f8 01       	movw	r30, r16
    36b4:	80 83       	st	Z, r24
    36b6:	91 83       	std	Z+1, r25	; 0x01
    36b8:	a2 83       	std	Z+2, r26	; 0x02
    36ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36bc:	fe 01       	movw	r30, r28
    36be:	e5 53       	subi	r30, 0x35	; 53
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	60 81       	ld	r22, Z
    36c4:	71 81       	ldd	r23, Z+1	; 0x01
    36c6:	82 81       	ldd	r24, Z+2	; 0x02
    36c8:	93 81       	ldd	r25, Z+3	; 0x03
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	40 e8       	ldi	r20, 0x80	; 128
    36d0:	5f e3       	ldi	r21, 0x3F	; 63
    36d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    36d6:	88 23       	and	r24, r24
    36d8:	44 f4       	brge	.+16     	; 0x36ea <main+0x2902>
		__ticks = 1;
    36da:	fe 01       	movw	r30, r28
    36dc:	e7 53       	subi	r30, 0x37	; 55
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	91 83       	std	Z+1, r25	; 0x01
    36e6:	80 83       	st	Z, r24
    36e8:	64 c0       	rjmp	.+200    	; 0x37b2 <main+0x29ca>
	else if (__tmp > 65535)
    36ea:	fe 01       	movw	r30, r28
    36ec:	e5 53       	subi	r30, 0x35	; 53
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	60 81       	ld	r22, Z
    36f2:	71 81       	ldd	r23, Z+1	; 0x01
    36f4:	82 81       	ldd	r24, Z+2	; 0x02
    36f6:	93 81       	ldd	r25, Z+3	; 0x03
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	3f ef       	ldi	r19, 0xFF	; 255
    36fc:	4f e7       	ldi	r20, 0x7F	; 127
    36fe:	57 e4       	ldi	r21, 0x47	; 71
    3700:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3704:	18 16       	cp	r1, r24
    3706:	0c f0       	brlt	.+2      	; 0x370a <main+0x2922>
    3708:	43 c0       	rjmp	.+134    	; 0x3790 <main+0x29a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370a:	fe 01       	movw	r30, r28
    370c:	e1 53       	subi	r30, 0x31	; 49
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	60 81       	ld	r22, Z
    3712:	71 81       	ldd	r23, Z+1	; 0x01
    3714:	82 81       	ldd	r24, Z+2	; 0x02
    3716:	93 81       	ldd	r25, Z+3	; 0x03
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	40 e2       	ldi	r20, 0x20	; 32
    371e:	51 e4       	ldi	r21, 0x41	; 65
    3720:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	8e 01       	movw	r16, r28
    372a:	07 53       	subi	r16, 0x37	; 55
    372c:	1f 4f       	sbci	r17, 0xFF	; 255
    372e:	bc 01       	movw	r22, r24
    3730:	cd 01       	movw	r24, r26
    3732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3736:	dc 01       	movw	r26, r24
    3738:	cb 01       	movw	r24, r22
    373a:	f8 01       	movw	r30, r16
    373c:	91 83       	std	Z+1, r25	; 0x01
    373e:	80 83       	st	Z, r24
    3740:	1f c0       	rjmp	.+62     	; 0x3780 <main+0x2998>
    3742:	fe 01       	movw	r30, r28
    3744:	e9 53       	subi	r30, 0x39	; 57
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	88 ec       	ldi	r24, 0xC8	; 200
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	91 83       	std	Z+1, r25	; 0x01
    374e:	80 83       	st	Z, r24
    3750:	fe 01       	movw	r30, r28
    3752:	e9 53       	subi	r30, 0x39	; 57
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	80 81       	ld	r24, Z
    3758:	91 81       	ldd	r25, Z+1	; 0x01
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	f1 f7       	brne	.-4      	; 0x375a <main+0x2972>
    375e:	fe 01       	movw	r30, r28
    3760:	e9 53       	subi	r30, 0x39	; 57
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	91 83       	std	Z+1, r25	; 0x01
    3766:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3768:	de 01       	movw	r26, r28
    376a:	a7 53       	subi	r26, 0x37	; 55
    376c:	bf 4f       	sbci	r27, 0xFF	; 255
    376e:	fe 01       	movw	r30, r28
    3770:	e7 53       	subi	r30, 0x37	; 55
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	80 81       	ld	r24, Z
    3776:	91 81       	ldd	r25, Z+1	; 0x01
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	11 96       	adiw	r26, 0x01	; 1
    377c:	9c 93       	st	X, r25
    377e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3780:	fe 01       	movw	r30, r28
    3782:	e7 53       	subi	r30, 0x37	; 55
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	80 81       	ld	r24, Z
    3788:	91 81       	ldd	r25, Z+1	; 0x01
    378a:	00 97       	sbiw	r24, 0x00	; 0
    378c:	d1 f6       	brne	.-76     	; 0x3742 <main+0x295a>
    378e:	28 c0       	rjmp	.+80     	; 0x37e0 <main+0x29f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3790:	8e 01       	movw	r16, r28
    3792:	07 53       	subi	r16, 0x37	; 55
    3794:	1f 4f       	sbci	r17, 0xFF	; 255
    3796:	fe 01       	movw	r30, r28
    3798:	e5 53       	subi	r30, 0x35	; 53
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	60 81       	ld	r22, Z
    379e:	71 81       	ldd	r23, Z+1	; 0x01
    37a0:	82 81       	ldd	r24, Z+2	; 0x02
    37a2:	93 81       	ldd	r25, Z+3	; 0x03
    37a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	f8 01       	movw	r30, r16
    37ae:	91 83       	std	Z+1, r25	; 0x01
    37b0:	80 83       	st	Z, r24
    37b2:	de 01       	movw	r26, r28
    37b4:	ab 53       	subi	r26, 0x3B	; 59
    37b6:	bf 4f       	sbci	r27, 0xFF	; 255
    37b8:	fe 01       	movw	r30, r28
    37ba:	e7 53       	subi	r30, 0x37	; 55
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	80 81       	ld	r24, Z
    37c0:	91 81       	ldd	r25, Z+1	; 0x01
    37c2:	11 96       	adiw	r26, 0x01	; 1
    37c4:	9c 93       	st	X, r25
    37c6:	8e 93       	st	-X, r24
    37c8:	fe 01       	movw	r30, r28
    37ca:	eb 53       	subi	r30, 0x3B	; 59
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	80 81       	ld	r24, Z
    37d0:	91 81       	ldd	r25, Z+1	; 0x01
    37d2:	01 97       	sbiw	r24, 0x01	; 1
    37d4:	f1 f7       	brne	.-4      	; 0x37d2 <main+0x29ea>
    37d6:	fe 01       	movw	r30, r28
    37d8:	eb 53       	subi	r30, 0x3B	; 59
    37da:	ff 4f       	sbci	r31, 0xFF	; 255
    37dc:	91 83       	std	Z+1, r25	; 0x01
    37de:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);

                Local_u8ShowMenu = DOOR_MAIN_MENU;
    37e0:	fe 01       	movw	r30, r28
    37e2:	e3 5e       	subi	r30, 0xE3	; 227
    37e4:	fd 4f       	sbci	r31, 0xFD	; 253
    37e6:	83 e0       	ldi	r24, 0x03	; 3
    37e8:	80 83       	st	Z, r24
    37ea:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
            }
            else
            {
                LCD_VidClearScreen();
    37ee:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Wrong Input");
    37f2:	8a e5       	ldi	r24, 0x5A	; 90
    37f4:	91 e0       	ldi	r25, 0x01	; 1
    37f6:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
                LCD_VidSendString_XY("Try Again", 1, 0);
    37fa:	86 e6       	ldi	r24, 0x66	; 102
    37fc:	91 e0       	ldi	r25, 0x01	; 1
    37fe:	61 e0       	ldi	r22, 0x01	; 1
    3800:	40 e0       	ldi	r20, 0x00	; 0
    3802:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    3806:	fe 01       	movw	r30, r28
    3808:	ef 53       	subi	r30, 0x3F	; 63
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	80 e0       	ldi	r24, 0x00	; 0
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	a8 e4       	ldi	r26, 0x48	; 72
    3812:	b3 e4       	ldi	r27, 0x43	; 67
    3814:	80 83       	st	Z, r24
    3816:	91 83       	std	Z+1, r25	; 0x01
    3818:	a2 83       	std	Z+2, r26	; 0x02
    381a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381c:	8e 01       	movw	r16, r28
    381e:	03 54       	subi	r16, 0x43	; 67
    3820:	1f 4f       	sbci	r17, 0xFF	; 255
    3822:	fe 01       	movw	r30, r28
    3824:	ef 53       	subi	r30, 0x3F	; 63
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	60 81       	ld	r22, Z
    382a:	71 81       	ldd	r23, Z+1	; 0x01
    382c:	82 81       	ldd	r24, Z+2	; 0x02
    382e:	93 81       	ldd	r25, Z+3	; 0x03
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	4a ef       	ldi	r20, 0xFA	; 250
    3836:	54 e4       	ldi	r21, 0x44	; 68
    3838:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	f8 01       	movw	r30, r16
    3842:	80 83       	st	Z, r24
    3844:	91 83       	std	Z+1, r25	; 0x01
    3846:	a2 83       	std	Z+2, r26	; 0x02
    3848:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    384a:	fe 01       	movw	r30, r28
    384c:	e3 54       	subi	r30, 0x43	; 67
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	60 81       	ld	r22, Z
    3852:	71 81       	ldd	r23, Z+1	; 0x01
    3854:	82 81       	ldd	r24, Z+2	; 0x02
    3856:	93 81       	ldd	r25, Z+3	; 0x03
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e8       	ldi	r20, 0x80	; 128
    385e:	5f e3       	ldi	r21, 0x3F	; 63
    3860:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3864:	88 23       	and	r24, r24
    3866:	44 f4       	brge	.+16     	; 0x3878 <main+0x2a90>
		__ticks = 1;
    3868:	fe 01       	movw	r30, r28
    386a:	e5 54       	subi	r30, 0x45	; 69
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	91 83       	std	Z+1, r25	; 0x01
    3874:	80 83       	st	Z, r24
    3876:	65 c0       	rjmp	.+202    	; 0x3942 <main+0x2b5a>
	else if (__tmp > 65535)
    3878:	fe 01       	movw	r30, r28
    387a:	e3 54       	subi	r30, 0x43	; 67
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	60 81       	ld	r22, Z
    3880:	71 81       	ldd	r23, Z+1	; 0x01
    3882:	82 81       	ldd	r24, Z+2	; 0x02
    3884:	93 81       	ldd	r25, Z+3	; 0x03
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	3f ef       	ldi	r19, 0xFF	; 255
    388a:	4f e7       	ldi	r20, 0x7F	; 127
    388c:	57 e4       	ldi	r21, 0x47	; 71
    388e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3892:	18 16       	cp	r1, r24
    3894:	0c f0       	brlt	.+2      	; 0x3898 <main+0x2ab0>
    3896:	44 c0       	rjmp	.+136    	; 0x3920 <main+0x2b38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3898:	fe 01       	movw	r30, r28
    389a:	ef 53       	subi	r30, 0x3F	; 63
    389c:	ff 4f       	sbci	r31, 0xFF	; 255
    389e:	60 81       	ld	r22, Z
    38a0:	71 81       	ldd	r23, Z+1	; 0x01
    38a2:	82 81       	ldd	r24, Z+2	; 0x02
    38a4:	93 81       	ldd	r25, Z+3	; 0x03
    38a6:	20 e0       	ldi	r18, 0x00	; 0
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	40 e2       	ldi	r20, 0x20	; 32
    38ac:	51 e4       	ldi	r21, 0x41	; 65
    38ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	8e 01       	movw	r16, r28
    38b8:	05 54       	subi	r16, 0x45	; 69
    38ba:	1f 4f       	sbci	r17, 0xFF	; 255
    38bc:	bc 01       	movw	r22, r24
    38be:	cd 01       	movw	r24, r26
    38c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	f8 01       	movw	r30, r16
    38ca:	91 83       	std	Z+1, r25	; 0x01
    38cc:	80 83       	st	Z, r24
    38ce:	1f c0       	rjmp	.+62     	; 0x390e <main+0x2b26>
    38d0:	fe 01       	movw	r30, r28
    38d2:	e7 54       	subi	r30, 0x47	; 71
    38d4:	ff 4f       	sbci	r31, 0xFF	; 255
    38d6:	88 ec       	ldi	r24, 0xC8	; 200
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	91 83       	std	Z+1, r25	; 0x01
    38dc:	80 83       	st	Z, r24
    38de:	fe 01       	movw	r30, r28
    38e0:	e7 54       	subi	r30, 0x47	; 71
    38e2:	ff 4f       	sbci	r31, 0xFF	; 255
    38e4:	80 81       	ld	r24, Z
    38e6:	91 81       	ldd	r25, Z+1	; 0x01
    38e8:	01 97       	sbiw	r24, 0x01	; 1
    38ea:	f1 f7       	brne	.-4      	; 0x38e8 <main+0x2b00>
    38ec:	fe 01       	movw	r30, r28
    38ee:	e7 54       	subi	r30, 0x47	; 71
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	91 83       	std	Z+1, r25	; 0x01
    38f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f6:	de 01       	movw	r26, r28
    38f8:	a5 54       	subi	r26, 0x45	; 69
    38fa:	bf 4f       	sbci	r27, 0xFF	; 255
    38fc:	fe 01       	movw	r30, r28
    38fe:	e5 54       	subi	r30, 0x45	; 69
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	80 81       	ld	r24, Z
    3904:	91 81       	ldd	r25, Z+1	; 0x01
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	11 96       	adiw	r26, 0x01	; 1
    390a:	9c 93       	st	X, r25
    390c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390e:	fe 01       	movw	r30, r28
    3910:	e5 54       	subi	r30, 0x45	; 69
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	80 81       	ld	r24, Z
    3916:	91 81       	ldd	r25, Z+1	; 0x01
    3918:	00 97       	sbiw	r24, 0x00	; 0
    391a:	d1 f6       	brne	.-76     	; 0x38d0 <main+0x2ae8>
    391c:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3920:	8e 01       	movw	r16, r28
    3922:	05 54       	subi	r16, 0x45	; 69
    3924:	1f 4f       	sbci	r17, 0xFF	; 255
    3926:	fe 01       	movw	r30, r28
    3928:	e3 54       	subi	r30, 0x43	; 67
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	60 81       	ld	r22, Z
    392e:	71 81       	ldd	r23, Z+1	; 0x01
    3930:	82 81       	ldd	r24, Z+2	; 0x02
    3932:	93 81       	ldd	r25, Z+3	; 0x03
    3934:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	f8 01       	movw	r30, r16
    393e:	91 83       	std	Z+1, r25	; 0x01
    3940:	80 83       	st	Z, r24
    3942:	de 01       	movw	r26, r28
    3944:	a9 54       	subi	r26, 0x49	; 73
    3946:	bf 4f       	sbci	r27, 0xFF	; 255
    3948:	fe 01       	movw	r30, r28
    394a:	e5 54       	subi	r30, 0x45	; 69
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	80 81       	ld	r24, Z
    3950:	91 81       	ldd	r25, Z+1	; 0x01
    3952:	11 96       	adiw	r26, 0x01	; 1
    3954:	9c 93       	st	X, r25
    3956:	8e 93       	st	-X, r24
    3958:	fe 01       	movw	r30, r28
    395a:	e9 54       	subi	r30, 0x49	; 73
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	80 81       	ld	r24, Z
    3960:	91 81       	ldd	r25, Z+1	; 0x01
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	f1 f7       	brne	.-4      	; 0x3962 <main+0x2b7a>
    3966:	fe 01       	movw	r30, r28
    3968:	e9 54       	subi	r30, 0x49	; 73
    396a:	ff 4f       	sbci	r31, 0xFF	; 255
    396c:	91 83       	std	Z+1, r25	; 0x01
    396e:	80 83       	st	Z, r24
    3970:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
            }

            break;

        case FAN_AUTO_MENU:
            LCD_VidSendString_XY("Set Temperature", 0, 0);
    3974:	8f ec       	ldi	r24, 0xCF	; 207
    3976:	91 e0       	ldi	r25, 0x01	; 1
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	40 e0       	ldi	r20, 0x00	; 0
    397c:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            LCD_VidSendString_XY("__", 1, 0);
    3980:	8f ed       	ldi	r24, 0xDF	; 223
    3982:	91 e0       	ldi	r25, 0x01	; 1
    3984:	61 e0       	ldi	r22, 0x01	; 1
    3986:	40 e0       	ldi	r20, 0x00	; 0
    3988:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            LCD_VidMoveCursor(1, 0);
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	60 e0       	ldi	r22, 0x00	; 0
    3990:	0e 94 56 3a 	call	0x74ac	; 0x74ac <LCD_VidMoveCursor>

            WaitForKey(&Local_u8KeyPressed);
    3994:	ce 01       	movw	r24, r28
    3996:	82 5e       	subi	r24, 0xE2	; 226
    3998:	9d 4f       	sbci	r25, 0xFD	; 253
    399a:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <WaitForKey>
            LCD_VidSendChar(Local_u8KeyPressed);
    399e:	fe 01       	movw	r30, r28
    39a0:	e2 5e       	subi	r30, 0xE2	; 226
    39a2:	fd 4f       	sbci	r31, 0xFD	; 253
    39a4:	80 81       	ld	r24, Z
    39a6:	0e 94 58 33 	call	0x66b0	; 0x66b0 <LCD_VidSendChar>
            Local_u8Tens = Local_u8KeyPressed - ASCII_ZERO;
    39aa:	fe 01       	movw	r30, r28
    39ac:	e2 5e       	subi	r30, 0xE2	; 226
    39ae:	fd 4f       	sbci	r31, 0xFD	; 253
    39b0:	80 81       	ld	r24, Z
    39b2:	fe 01       	movw	r30, r28
    39b4:	e6 5e       	subi	r30, 0xE6	; 230
    39b6:	fd 4f       	sbci	r31, 0xFD	; 253
    39b8:	80 53       	subi	r24, 0x30	; 48
    39ba:	80 83       	st	Z, r24

            WaitForKey(&Local_u8KeyPressed);
    39bc:	ce 01       	movw	r24, r28
    39be:	82 5e       	subi	r24, 0xE2	; 226
    39c0:	9d 4f       	sbci	r25, 0xFD	; 253
    39c2:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <WaitForKey>
            LCD_VidSendChar(Local_u8KeyPressed);
    39c6:	fe 01       	movw	r30, r28
    39c8:	e2 5e       	subi	r30, 0xE2	; 226
    39ca:	fd 4f       	sbci	r31, 0xFD	; 253
    39cc:	80 81       	ld	r24, Z
    39ce:	0e 94 58 33 	call	0x66b0	; 0x66b0 <LCD_VidSendChar>
            Local_u8Ones = Local_u8KeyPressed - ASCII_ZERO;
    39d2:	fe 01       	movw	r30, r28
    39d4:	e2 5e       	subi	r30, 0xE2	; 226
    39d6:	fd 4f       	sbci	r31, 0xFD	; 253
    39d8:	80 81       	ld	r24, Z
    39da:	fe 01       	movw	r30, r28
    39dc:	e7 5e       	subi	r30, 0xE7	; 231
    39de:	fd 4f       	sbci	r31, 0xFD	; 253
    39e0:	80 53       	subi	r24, 0x30	; 48
    39e2:	80 83       	st	Z, r24

            Local_u8Temperature = Local_u8Tens * 10 + Local_u8Ones;
    39e4:	fe 01       	movw	r30, r28
    39e6:	e6 5e       	subi	r30, 0xE6	; 230
    39e8:	fd 4f       	sbci	r31, 0xFD	; 253
    39ea:	80 81       	ld	r24, Z
    39ec:	88 2f       	mov	r24, r24
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	9c 01       	movw	r18, r24
    39f2:	22 0f       	add	r18, r18
    39f4:	33 1f       	adc	r19, r19
    39f6:	c9 01       	movw	r24, r18
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	88 0f       	add	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	82 0f       	add	r24, r18
    3a02:	93 1f       	adc	r25, r19
    3a04:	98 2f       	mov	r25, r24
    3a06:	de 01       	movw	r26, r28
    3a08:	a8 5e       	subi	r26, 0xE8	; 232
    3a0a:	bd 4f       	sbci	r27, 0xFD	; 253
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	e7 5e       	subi	r30, 0xE7	; 231
    3a10:	fd 4f       	sbci	r31, 0xFD	; 253
    3a12:	80 81       	ld	r24, Z
    3a14:	89 0f       	add	r24, r25
    3a16:	8c 93       	st	X, r24

            LCD_VidClearScreen();
    3a18:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
            LCD_VidSendString("Temp Set to: ");
    3a1c:	82 ee       	ldi	r24, 0xE2	; 226
    3a1e:	91 e0       	ldi	r25, 0x01	; 1
    3a20:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
            LCD_VidIntegerToString(Local_u8Temperature);
    3a24:	fe 01       	movw	r30, r28
    3a26:	e8 5e       	subi	r30, 0xE8	; 232
    3a28:	fd 4f       	sbci	r31, 0xFD	; 253
    3a2a:	80 81       	ld	r24, Z
    3a2c:	88 2f       	mov	r24, r24
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	0e 94 33 3a 	call	0x7466	; 0x7466 <LCD_VidIntegerToString>
    3a34:	fe 01       	movw	r30, r28
    3a36:	ed 54       	subi	r30, 0x4D	; 77
    3a38:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	a8 e4       	ldi	r26, 0x48	; 72
    3a40:	b4 e4       	ldi	r27, 0x44	; 68
    3a42:	80 83       	st	Z, r24
    3a44:	91 83       	std	Z+1, r25	; 0x01
    3a46:	a2 83       	std	Z+2, r26	; 0x02
    3a48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a4a:	8e 01       	movw	r16, r28
    3a4c:	01 55       	subi	r16, 0x51	; 81
    3a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a50:	fe 01       	movw	r30, r28
    3a52:	ed 54       	subi	r30, 0x4D	; 77
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	60 81       	ld	r22, Z
    3a58:	71 81       	ldd	r23, Z+1	; 0x01
    3a5a:	82 81       	ldd	r24, Z+2	; 0x02
    3a5c:	93 81       	ldd	r25, Z+3	; 0x03
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	4a ef       	ldi	r20, 0xFA	; 250
    3a64:	54 e4       	ldi	r21, 0x44	; 68
    3a66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	f8 01       	movw	r30, r16
    3a70:	80 83       	st	Z, r24
    3a72:	91 83       	std	Z+1, r25	; 0x01
    3a74:	a2 83       	std	Z+2, r26	; 0x02
    3a76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e1 55       	subi	r30, 0x51	; 81
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	60 81       	ld	r22, Z
    3a80:	71 81       	ldd	r23, Z+1	; 0x01
    3a82:	82 81       	ldd	r24, Z+2	; 0x02
    3a84:	93 81       	ldd	r25, Z+3	; 0x03
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	40 e8       	ldi	r20, 0x80	; 128
    3a8c:	5f e3       	ldi	r21, 0x3F	; 63
    3a8e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a92:	88 23       	and	r24, r24
    3a94:	44 f4       	brge	.+16     	; 0x3aa6 <main+0x2cbe>
		__ticks = 1;
    3a96:	fe 01       	movw	r30, r28
    3a98:	e3 55       	subi	r30, 0x53	; 83
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	91 83       	std	Z+1, r25	; 0x01
    3aa2:	80 83       	st	Z, r24
    3aa4:	64 c0       	rjmp	.+200    	; 0x3b6e <main+0x2d86>
	else if (__tmp > 65535)
    3aa6:	fe 01       	movw	r30, r28
    3aa8:	e1 55       	subi	r30, 0x51	; 81
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	60 81       	ld	r22, Z
    3aae:	71 81       	ldd	r23, Z+1	; 0x01
    3ab0:	82 81       	ldd	r24, Z+2	; 0x02
    3ab2:	93 81       	ldd	r25, Z+3	; 0x03
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	3f ef       	ldi	r19, 0xFF	; 255
    3ab8:	4f e7       	ldi	r20, 0x7F	; 127
    3aba:	57 e4       	ldi	r21, 0x47	; 71
    3abc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3ac0:	18 16       	cp	r1, r24
    3ac2:	0c f0       	brlt	.+2      	; 0x3ac6 <main+0x2cde>
    3ac4:	43 c0       	rjmp	.+134    	; 0x3b4c <main+0x2d64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	ed 54       	subi	r30, 0x4D	; 77
    3aca:	ff 4f       	sbci	r31, 0xFF	; 255
    3acc:	60 81       	ld	r22, Z
    3ace:	71 81       	ldd	r23, Z+1	; 0x01
    3ad0:	82 81       	ldd	r24, Z+2	; 0x02
    3ad2:	93 81       	ldd	r25, Z+3	; 0x03
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	40 e2       	ldi	r20, 0x20	; 32
    3ada:	51 e4       	ldi	r21, 0x41	; 65
    3adc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	8e 01       	movw	r16, r28
    3ae6:	03 55       	subi	r16, 0x53	; 83
    3ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aea:	bc 01       	movw	r22, r24
    3aec:	cd 01       	movw	r24, r26
    3aee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	f8 01       	movw	r30, r16
    3af8:	91 83       	std	Z+1, r25	; 0x01
    3afa:	80 83       	st	Z, r24
    3afc:	1f c0       	rjmp	.+62     	; 0x3b3c <main+0x2d54>
    3afe:	fe 01       	movw	r30, r28
    3b00:	e5 55       	subi	r30, 0x55	; 85
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	88 ec       	ldi	r24, 0xC8	; 200
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	91 83       	std	Z+1, r25	; 0x01
    3b0a:	80 83       	st	Z, r24
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e5 55       	subi	r30, 0x55	; 85
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	80 81       	ld	r24, Z
    3b14:	91 81       	ldd	r25, Z+1	; 0x01
    3b16:	01 97       	sbiw	r24, 0x01	; 1
    3b18:	f1 f7       	brne	.-4      	; 0x3b16 <main+0x2d2e>
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	e5 55       	subi	r30, 0x55	; 85
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	91 83       	std	Z+1, r25	; 0x01
    3b22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b24:	de 01       	movw	r26, r28
    3b26:	a3 55       	subi	r26, 0x53	; 83
    3b28:	bf 4f       	sbci	r27, 0xFF	; 255
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	e3 55       	subi	r30, 0x53	; 83
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	80 81       	ld	r24, Z
    3b32:	91 81       	ldd	r25, Z+1	; 0x01
    3b34:	01 97       	sbiw	r24, 0x01	; 1
    3b36:	11 96       	adiw	r26, 0x01	; 1
    3b38:	9c 93       	st	X, r25
    3b3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e3 55       	subi	r30, 0x53	; 83
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	80 81       	ld	r24, Z
    3b44:	91 81       	ldd	r25, Z+1	; 0x01
    3b46:	00 97       	sbiw	r24, 0x00	; 0
    3b48:	d1 f6       	brne	.-76     	; 0x3afe <main+0x2d16>
    3b4a:	27 c0       	rjmp	.+78     	; 0x3b9a <main+0x2db2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b4c:	8e 01       	movw	r16, r28
    3b4e:	03 55       	subi	r16, 0x53	; 83
    3b50:	1f 4f       	sbci	r17, 0xFF	; 255
    3b52:	fe 01       	movw	r30, r28
    3b54:	e1 55       	subi	r30, 0x51	; 81
    3b56:	ff 4f       	sbci	r31, 0xFF	; 255
    3b58:	60 81       	ld	r22, Z
    3b5a:	71 81       	ldd	r23, Z+1	; 0x01
    3b5c:	82 81       	ldd	r24, Z+2	; 0x02
    3b5e:	93 81       	ldd	r25, Z+3	; 0x03
    3b60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	f8 01       	movw	r30, r16
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
    3b6e:	de 01       	movw	r26, r28
    3b70:	a7 55       	subi	r26, 0x57	; 87
    3b72:	bf 4f       	sbci	r27, 0xFF	; 255
    3b74:	fe 01       	movw	r30, r28
    3b76:	e3 55       	subi	r30, 0x53	; 83
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	80 81       	ld	r24, Z
    3b7c:	91 81       	ldd	r25, Z+1	; 0x01
    3b7e:	8d 93       	st	X+, r24
    3b80:	9c 93       	st	X, r25
    3b82:	fe 01       	movw	r30, r28
    3b84:	e7 55       	subi	r30, 0x57	; 87
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	80 81       	ld	r24, Z
    3b8a:	91 81       	ldd	r25, Z+1	; 0x01
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	f1 f7       	brne	.-4      	; 0x3b8c <main+0x2da4>
    3b90:	fe 01       	movw	r30, r28
    3b92:	e7 55       	subi	r30, 0x57	; 87
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	91 83       	std	Z+1, r25	; 0x01
    3b98:	80 83       	st	Z, r24
            _delay_ms(DEFUALT_DELAY_TIME * 4);

            UART_VidSendByte(SET_TEMPERATURE);
    3b9a:	87 e3       	ldi	r24, 0x37	; 55
    3b9c:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>
            UART_VidSendByte(Local_u8Temperature);
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	e8 5e       	subi	r30, 0xE8	; 232
    3ba4:	fd 4f       	sbci	r31, 0xFD	; 253
    3ba6:	80 81       	ld	r24, Z
    3ba8:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>

            Local_u8ShowMenu = AUTO_MANUAL_MENU;
    3bac:	fe 01       	movw	r30, r28
    3bae:	e3 5e       	subi	r30, 0xE3	; 227
    3bb0:	fd 4f       	sbci	r31, 0xFD	; 253
    3bb2:	84 e1       	ldi	r24, 0x14	; 20
    3bb4:	80 83       	st	Z, r24
    3bb6:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>

            break;

        case ROOM_CHOOSER_MENU:
            LCD_VidClearScreen();
    3bba:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>

            LCD_VidSendString_XY("1.Room1  2.Room2", 0, 0);
    3bbe:	80 ef       	ldi	r24, 0xF0	; 240
    3bc0:	91 e0       	ldi	r25, 0x01	; 1
    3bc2:	60 e0       	ldi	r22, 0x00	; 0
    3bc4:	40 e0       	ldi	r20, 0x00	; 0
    3bc6:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            LCD_VidSendString_XY("3.Room3  4.Room4", 1, 0);
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	92 e0       	ldi	r25, 0x02	; 2
    3bce:	61 e0       	ldi	r22, 0x01	; 1
    3bd0:	40 e0       	ldi	r20, 0x00	; 0
    3bd2:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            WaitForKey(&Local_u8KeyPressed);
    3bd6:	ce 01       	movw	r24, r28
    3bd8:	82 5e       	subi	r24, 0xE2	; 226
    3bda:	9d 4f       	sbci	r25, 0xFD	; 253
    3bdc:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <WaitForKey>

            if (SELECT_RETURN == Local_u8KeyPressed)
    3be0:	fe 01       	movw	r30, r28
    3be2:	e2 5e       	subi	r30, 0xE2	; 226
    3be4:	fd 4f       	sbci	r31, 0xFD	; 253
    3be6:	80 81       	ld	r24, Z
    3be8:	80 33       	cpi	r24, 0x30	; 48
    3bea:	09 f0       	breq	.+2      	; 0x3bee <main+0x2e06>
    3bec:	c1 c0       	rjmp	.+386    	; 0x3d70 <main+0x2f88>
            {
                LCD_VidClearScreen();
    3bee:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Return");
    3bf2:	86 e9       	ldi	r24, 0x96	; 150
    3bf4:	91 e0       	ldi	r25, 0x01	; 1
    3bf6:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	eb 55       	subi	r30, 0x5B	; 91
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	80 e0       	ldi	r24, 0x00	; 0
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	a8 e4       	ldi	r26, 0x48	; 72
    3c06:	b3 e4       	ldi	r27, 0x43	; 67
    3c08:	80 83       	st	Z, r24
    3c0a:	91 83       	std	Z+1, r25	; 0x01
    3c0c:	a2 83       	std	Z+2, r26	; 0x02
    3c0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c10:	8e 01       	movw	r16, r28
    3c12:	0f 55       	subi	r16, 0x5F	; 95
    3c14:	1f 4f       	sbci	r17, 0xFF	; 255
    3c16:	fe 01       	movw	r30, r28
    3c18:	eb 55       	subi	r30, 0x5B	; 91
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	60 81       	ld	r22, Z
    3c1e:	71 81       	ldd	r23, Z+1	; 0x01
    3c20:	82 81       	ldd	r24, Z+2	; 0x02
    3c22:	93 81       	ldd	r25, Z+3	; 0x03
    3c24:	20 e0       	ldi	r18, 0x00	; 0
    3c26:	30 e0       	ldi	r19, 0x00	; 0
    3c28:	4a ef       	ldi	r20, 0xFA	; 250
    3c2a:	54 e4       	ldi	r21, 0x44	; 68
    3c2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c30:	dc 01       	movw	r26, r24
    3c32:	cb 01       	movw	r24, r22
    3c34:	f8 01       	movw	r30, r16
    3c36:	80 83       	st	Z, r24
    3c38:	91 83       	std	Z+1, r25	; 0x01
    3c3a:	a2 83       	std	Z+2, r26	; 0x02
    3c3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c3e:	fe 01       	movw	r30, r28
    3c40:	ef 55       	subi	r30, 0x5F	; 95
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	60 81       	ld	r22, Z
    3c46:	71 81       	ldd	r23, Z+1	; 0x01
    3c48:	82 81       	ldd	r24, Z+2	; 0x02
    3c4a:	93 81       	ldd	r25, Z+3	; 0x03
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	40 e8       	ldi	r20, 0x80	; 128
    3c52:	5f e3       	ldi	r21, 0x3F	; 63
    3c54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3c58:	88 23       	and	r24, r24
    3c5a:	44 f4       	brge	.+16     	; 0x3c6c <main+0x2e84>
		__ticks = 1;
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	e1 56       	subi	r30, 0x61	; 97
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	91 83       	std	Z+1, r25	; 0x01
    3c68:	80 83       	st	Z, r24
    3c6a:	64 c0       	rjmp	.+200    	; 0x3d34 <main+0x2f4c>
	else if (__tmp > 65535)
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	ef 55       	subi	r30, 0x5F	; 95
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	60 81       	ld	r22, Z
    3c74:	71 81       	ldd	r23, Z+1	; 0x01
    3c76:	82 81       	ldd	r24, Z+2	; 0x02
    3c78:	93 81       	ldd	r25, Z+3	; 0x03
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	3f ef       	ldi	r19, 0xFF	; 255
    3c7e:	4f e7       	ldi	r20, 0x7F	; 127
    3c80:	57 e4       	ldi	r21, 0x47	; 71
    3c82:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3c86:	18 16       	cp	r1, r24
    3c88:	0c f0       	brlt	.+2      	; 0x3c8c <main+0x2ea4>
    3c8a:	43 c0       	rjmp	.+134    	; 0x3d12 <main+0x2f2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	eb 55       	subi	r30, 0x5B	; 91
    3c90:	ff 4f       	sbci	r31, 0xFF	; 255
    3c92:	60 81       	ld	r22, Z
    3c94:	71 81       	ldd	r23, Z+1	; 0x01
    3c96:	82 81       	ldd	r24, Z+2	; 0x02
    3c98:	93 81       	ldd	r25, Z+3	; 0x03
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	40 e2       	ldi	r20, 0x20	; 32
    3ca0:	51 e4       	ldi	r21, 0x41	; 65
    3ca2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	8e 01       	movw	r16, r28
    3cac:	01 56       	subi	r16, 0x61	; 97
    3cae:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb0:	bc 01       	movw	r22, r24
    3cb2:	cd 01       	movw	r24, r26
    3cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	f8 01       	movw	r30, r16
    3cbe:	91 83       	std	Z+1, r25	; 0x01
    3cc0:	80 83       	st	Z, r24
    3cc2:	1f c0       	rjmp	.+62     	; 0x3d02 <main+0x2f1a>
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	e3 56       	subi	r30, 0x63	; 99
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	88 ec       	ldi	r24, 0xC8	; 200
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	91 83       	std	Z+1, r25	; 0x01
    3cd0:	80 83       	st	Z, r24
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	e3 56       	subi	r30, 0x63	; 99
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	80 81       	ld	r24, Z
    3cda:	91 81       	ldd	r25, Z+1	; 0x01
    3cdc:	01 97       	sbiw	r24, 0x01	; 1
    3cde:	f1 f7       	brne	.-4      	; 0x3cdc <main+0x2ef4>
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	e3 56       	subi	r30, 0x63	; 99
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	91 83       	std	Z+1, r25	; 0x01
    3ce8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cea:	de 01       	movw	r26, r28
    3cec:	a1 56       	subi	r26, 0x61	; 97
    3cee:	bf 4f       	sbci	r27, 0xFF	; 255
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	e1 56       	subi	r30, 0x61	; 97
    3cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf6:	80 81       	ld	r24, Z
    3cf8:	91 81       	ldd	r25, Z+1	; 0x01
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	11 96       	adiw	r26, 0x01	; 1
    3cfe:	9c 93       	st	X, r25
    3d00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d02:	fe 01       	movw	r30, r28
    3d04:	e1 56       	subi	r30, 0x61	; 97
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	80 81       	ld	r24, Z
    3d0a:	91 81       	ldd	r25, Z+1	; 0x01
    3d0c:	00 97       	sbiw	r24, 0x00	; 0
    3d0e:	d1 f6       	brne	.-76     	; 0x3cc4 <main+0x2edc>
    3d10:	28 c0       	rjmp	.+80     	; 0x3d62 <main+0x2f7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d12:	8e 01       	movw	r16, r28
    3d14:	01 56       	subi	r16, 0x61	; 97
    3d16:	1f 4f       	sbci	r17, 0xFF	; 255
    3d18:	fe 01       	movw	r30, r28
    3d1a:	ef 55       	subi	r30, 0x5F	; 95
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	60 81       	ld	r22, Z
    3d20:	71 81       	ldd	r23, Z+1	; 0x01
    3d22:	82 81       	ldd	r24, Z+2	; 0x02
    3d24:	93 81       	ldd	r25, Z+3	; 0x03
    3d26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	f8 01       	movw	r30, r16
    3d30:	91 83       	std	Z+1, r25	; 0x01
    3d32:	80 83       	st	Z, r24
    3d34:	de 01       	movw	r26, r28
    3d36:	a5 56       	subi	r26, 0x65	; 101
    3d38:	bf 4f       	sbci	r27, 0xFF	; 255
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	e1 56       	subi	r30, 0x61	; 97
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	80 81       	ld	r24, Z
    3d42:	91 81       	ldd	r25, Z+1	; 0x01
    3d44:	11 96       	adiw	r26, 0x01	; 1
    3d46:	9c 93       	st	X, r25
    3d48:	8e 93       	st	-X, r24
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	e5 56       	subi	r30, 0x65	; 101
    3d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d50:	80 81       	ld	r24, Z
    3d52:	91 81       	ldd	r25, Z+1	; 0x01
    3d54:	01 97       	sbiw	r24, 0x01	; 1
    3d56:	f1 f7       	brne	.-4      	; 0x3d54 <main+0x2f6c>
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e5 56       	subi	r30, 0x65	; 101
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	91 83       	std	Z+1, r25	; 0x01
    3d60:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);

                Local_u8ShowMenu = MAIN_MENU;
    3d62:	fe 01       	movw	r30, r28
    3d64:	e3 5e       	subi	r30, 0xE3	; 227
    3d66:	fd 4f       	sbci	r31, 0xFD	; 253
    3d68:	81 e0       	ldi	r24, 0x01	; 1
    3d6a:	80 83       	st	Z, r24
    3d6c:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
            }
            else if (Local_u8KeyPressed >= SELECT_ROOM1 && Local_u8KeyPressed <= SELECT_ROOM4)
    3d70:	fe 01       	movw	r30, r28
    3d72:	e2 5e       	subi	r30, 0xE2	; 226
    3d74:	fd 4f       	sbci	r31, 0xFD	; 253
    3d76:	80 81       	ld	r24, Z
    3d78:	81 33       	cpi	r24, 0x31	; 49
    3d7a:	08 f4       	brcc	.+2      	; 0x3d7e <main+0x2f96>
    3d7c:	d7 c0       	rjmp	.+430    	; 0x3f2c <main+0x3144>
    3d7e:	fe 01       	movw	r30, r28
    3d80:	e2 5e       	subi	r30, 0xE2	; 226
    3d82:	fd 4f       	sbci	r31, 0xFD	; 253
    3d84:	80 81       	ld	r24, Z
    3d86:	85 33       	cpi	r24, 0x35	; 53
    3d88:	08 f0       	brcs	.+2      	; 0x3d8c <main+0x2fa4>
    3d8a:	d0 c0       	rjmp	.+416    	; 0x3f2c <main+0x3144>
            {
                LCD_VidClearScreen();
    3d8c:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Room");
    3d90:	82 e1       	ldi	r24, 0x12	; 18
    3d92:	92 e0       	ldi	r25, 0x02	; 2
    3d94:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
                LCD_VidSendChar(Local_u8KeyPressed);
    3d98:	fe 01       	movw	r30, r28
    3d9a:	e2 5e       	subi	r30, 0xE2	; 226
    3d9c:	fd 4f       	sbci	r31, 0xFD	; 253
    3d9e:	80 81       	ld	r24, Z
    3da0:	0e 94 58 33 	call	0x66b0	; 0x66b0 <LCD_VidSendChar>
    3da4:	fe 01       	movw	r30, r28
    3da6:	e9 56       	subi	r30, 0x69	; 105
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	80 e0       	ldi	r24, 0x00	; 0
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	a8 e4       	ldi	r26, 0x48	; 72
    3db0:	b3 e4       	ldi	r27, 0x43	; 67
    3db2:	80 83       	st	Z, r24
    3db4:	91 83       	std	Z+1, r25	; 0x01
    3db6:	a2 83       	std	Z+2, r26	; 0x02
    3db8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dba:	8e 01       	movw	r16, r28
    3dbc:	0d 56       	subi	r16, 0x6D	; 109
    3dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	e9 56       	subi	r30, 0x69	; 105
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	60 81       	ld	r22, Z
    3dc8:	71 81       	ldd	r23, Z+1	; 0x01
    3dca:	82 81       	ldd	r24, Z+2	; 0x02
    3dcc:	93 81       	ldd	r25, Z+3	; 0x03
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	4a ef       	ldi	r20, 0xFA	; 250
    3dd4:	54 e4       	ldi	r21, 0x44	; 68
    3dd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3dda:	dc 01       	movw	r26, r24
    3ddc:	cb 01       	movw	r24, r22
    3dde:	f8 01       	movw	r30, r16
    3de0:	80 83       	st	Z, r24
    3de2:	91 83       	std	Z+1, r25	; 0x01
    3de4:	a2 83       	std	Z+2, r26	; 0x02
    3de6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3de8:	fe 01       	movw	r30, r28
    3dea:	ed 56       	subi	r30, 0x6D	; 109
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	60 81       	ld	r22, Z
    3df0:	71 81       	ldd	r23, Z+1	; 0x01
    3df2:	82 81       	ldd	r24, Z+2	; 0x02
    3df4:	93 81       	ldd	r25, Z+3	; 0x03
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	40 e8       	ldi	r20, 0x80	; 128
    3dfc:	5f e3       	ldi	r21, 0x3F	; 63
    3dfe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3e02:	88 23       	and	r24, r24
    3e04:	44 f4       	brge	.+16     	; 0x3e16 <main+0x302e>
		__ticks = 1;
    3e06:	fe 01       	movw	r30, r28
    3e08:	ef 56       	subi	r30, 0x6F	; 111
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	91 83       	std	Z+1, r25	; 0x01
    3e12:	80 83       	st	Z, r24
    3e14:	64 c0       	rjmp	.+200    	; 0x3ede <main+0x30f6>
	else if (__tmp > 65535)
    3e16:	fe 01       	movw	r30, r28
    3e18:	ed 56       	subi	r30, 0x6D	; 109
    3e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1c:	60 81       	ld	r22, Z
    3e1e:	71 81       	ldd	r23, Z+1	; 0x01
    3e20:	82 81       	ldd	r24, Z+2	; 0x02
    3e22:	93 81       	ldd	r25, Z+3	; 0x03
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	3f ef       	ldi	r19, 0xFF	; 255
    3e28:	4f e7       	ldi	r20, 0x7F	; 127
    3e2a:	57 e4       	ldi	r21, 0x47	; 71
    3e2c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3e30:	18 16       	cp	r1, r24
    3e32:	0c f0       	brlt	.+2      	; 0x3e36 <main+0x304e>
    3e34:	43 c0       	rjmp	.+134    	; 0x3ebc <main+0x30d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e36:	fe 01       	movw	r30, r28
    3e38:	e9 56       	subi	r30, 0x69	; 105
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	60 81       	ld	r22, Z
    3e3e:	71 81       	ldd	r23, Z+1	; 0x01
    3e40:	82 81       	ldd	r24, Z+2	; 0x02
    3e42:	93 81       	ldd	r25, Z+3	; 0x03
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	40 e2       	ldi	r20, 0x20	; 32
    3e4a:	51 e4       	ldi	r21, 0x41	; 65
    3e4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e50:	dc 01       	movw	r26, r24
    3e52:	cb 01       	movw	r24, r22
    3e54:	8e 01       	movw	r16, r28
    3e56:	0f 56       	subi	r16, 0x6F	; 111
    3e58:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5a:	bc 01       	movw	r22, r24
    3e5c:	cd 01       	movw	r24, r26
    3e5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e62:	dc 01       	movw	r26, r24
    3e64:	cb 01       	movw	r24, r22
    3e66:	f8 01       	movw	r30, r16
    3e68:	91 83       	std	Z+1, r25	; 0x01
    3e6a:	80 83       	st	Z, r24
    3e6c:	1f c0       	rjmp	.+62     	; 0x3eac <main+0x30c4>
    3e6e:	fe 01       	movw	r30, r28
    3e70:	e1 57       	subi	r30, 0x71	; 113
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	88 ec       	ldi	r24, 0xC8	; 200
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	91 83       	std	Z+1, r25	; 0x01
    3e7a:	80 83       	st	Z, r24
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e1 57       	subi	r30, 0x71	; 113
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	80 81       	ld	r24, Z
    3e84:	91 81       	ldd	r25, Z+1	; 0x01
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	f1 f7       	brne	.-4      	; 0x3e86 <main+0x309e>
    3e8a:	fe 01       	movw	r30, r28
    3e8c:	e1 57       	subi	r30, 0x71	; 113
    3e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e90:	91 83       	std	Z+1, r25	; 0x01
    3e92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e94:	de 01       	movw	r26, r28
    3e96:	af 56       	subi	r26, 0x6F	; 111
    3e98:	bf 4f       	sbci	r27, 0xFF	; 255
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	ef 56       	subi	r30, 0x6F	; 111
    3e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea0:	80 81       	ld	r24, Z
    3ea2:	91 81       	ldd	r25, Z+1	; 0x01
    3ea4:	01 97       	sbiw	r24, 0x01	; 1
    3ea6:	11 96       	adiw	r26, 0x01	; 1
    3ea8:	9c 93       	st	X, r25
    3eaa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eac:	fe 01       	movw	r30, r28
    3eae:	ef 56       	subi	r30, 0x6F	; 111
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	80 81       	ld	r24, Z
    3eb4:	91 81       	ldd	r25, Z+1	; 0x01
    3eb6:	00 97       	sbiw	r24, 0x00	; 0
    3eb8:	d1 f6       	brne	.-76     	; 0x3e6e <main+0x3086>
    3eba:	28 c0       	rjmp	.+80     	; 0x3f0c <main+0x3124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ebc:	8e 01       	movw	r16, r28
    3ebe:	0f 56       	subi	r16, 0x6F	; 111
    3ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	ed 56       	subi	r30, 0x6D	; 109
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	60 81       	ld	r22, Z
    3eca:	71 81       	ldd	r23, Z+1	; 0x01
    3ecc:	82 81       	ldd	r24, Z+2	; 0x02
    3ece:	93 81       	ldd	r25, Z+3	; 0x03
    3ed0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	cb 01       	movw	r24, r22
    3ed8:	f8 01       	movw	r30, r16
    3eda:	91 83       	std	Z+1, r25	; 0x01
    3edc:	80 83       	st	Z, r24
    3ede:	de 01       	movw	r26, r28
    3ee0:	a3 57       	subi	r26, 0x73	; 115
    3ee2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ee4:	fe 01       	movw	r30, r28
    3ee6:	ef 56       	subi	r30, 0x6F	; 111
    3ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eea:	80 81       	ld	r24, Z
    3eec:	91 81       	ldd	r25, Z+1	; 0x01
    3eee:	11 96       	adiw	r26, 0x01	; 1
    3ef0:	9c 93       	st	X, r25
    3ef2:	8e 93       	st	-X, r24
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	e3 57       	subi	r30, 0x73	; 115
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	80 81       	ld	r24, Z
    3efc:	91 81       	ldd	r25, Z+1	; 0x01
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	f1 f7       	brne	.-4      	; 0x3efe <main+0x3116>
    3f02:	fe 01       	movw	r30, r28
    3f04:	e3 57       	subi	r30, 0x73	; 115
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	91 83       	std	Z+1, r25	; 0x01
    3f0a:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);

                Local_u8Chooser = Local_u8KeyPressed - SELECT_ROOM1;
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	e2 5e       	subi	r30, 0xE2	; 226
    3f10:	fd 4f       	sbci	r31, 0xFD	; 253
    3f12:	80 81       	ld	r24, Z
    3f14:	fe 01       	movw	r30, r28
    3f16:	e5 5e       	subi	r30, 0xE5	; 229
    3f18:	fd 4f       	sbci	r31, 0xFD	; 253
    3f1a:	81 53       	subi	r24, 0x31	; 49
    3f1c:	80 83       	st	Z, r24
                Local_u8ShowMenu = AUTO_MANUAL_MENU;
    3f1e:	fe 01       	movw	r30, r28
    3f20:	e3 5e       	subi	r30, 0xE3	; 227
    3f22:	fd 4f       	sbci	r31, 0xFD	; 253
    3f24:	84 e1       	ldi	r24, 0x14	; 20
    3f26:	80 83       	st	Z, r24
    3f28:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
            }
            else
            {
                LCD_VidClearScreen();
    3f2c:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Wrong Input");
    3f30:	8a e5       	ldi	r24, 0x5A	; 90
    3f32:	91 e0       	ldi	r25, 0x01	; 1
    3f34:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
                LCD_VidSendString_XY("Try Again", 1, 0);
    3f38:	86 e6       	ldi	r24, 0x66	; 102
    3f3a:	91 e0       	ldi	r25, 0x01	; 1
    3f3c:	61 e0       	ldi	r22, 0x01	; 1
    3f3e:	40 e0       	ldi	r20, 0x00	; 0
    3f40:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    3f44:	fe 01       	movw	r30, r28
    3f46:	e7 57       	subi	r30, 0x77	; 119
    3f48:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4a:	80 e0       	ldi	r24, 0x00	; 0
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	a8 e4       	ldi	r26, 0x48	; 72
    3f50:	b3 e4       	ldi	r27, 0x43	; 67
    3f52:	80 83       	st	Z, r24
    3f54:	91 83       	std	Z+1, r25	; 0x01
    3f56:	a2 83       	std	Z+2, r26	; 0x02
    3f58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f5a:	8e 01       	movw	r16, r28
    3f5c:	0b 57       	subi	r16, 0x7B	; 123
    3f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f60:	fe 01       	movw	r30, r28
    3f62:	e7 57       	subi	r30, 0x77	; 119
    3f64:	ff 4f       	sbci	r31, 0xFF	; 255
    3f66:	60 81       	ld	r22, Z
    3f68:	71 81       	ldd	r23, Z+1	; 0x01
    3f6a:	82 81       	ldd	r24, Z+2	; 0x02
    3f6c:	93 81       	ldd	r25, Z+3	; 0x03
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	4a ef       	ldi	r20, 0xFA	; 250
    3f74:	54 e4       	ldi	r21, 0x44	; 68
    3f76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	cb 01       	movw	r24, r22
    3f7e:	f8 01       	movw	r30, r16
    3f80:	80 83       	st	Z, r24
    3f82:	91 83       	std	Z+1, r25	; 0x01
    3f84:	a2 83       	std	Z+2, r26	; 0x02
    3f86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f88:	fe 01       	movw	r30, r28
    3f8a:	eb 57       	subi	r30, 0x7B	; 123
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	60 81       	ld	r22, Z
    3f90:	71 81       	ldd	r23, Z+1	; 0x01
    3f92:	82 81       	ldd	r24, Z+2	; 0x02
    3f94:	93 81       	ldd	r25, Z+3	; 0x03
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	40 e8       	ldi	r20, 0x80	; 128
    3f9c:	5f e3       	ldi	r21, 0x3F	; 63
    3f9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3fa2:	88 23       	and	r24, r24
    3fa4:	44 f4       	brge	.+16     	; 0x3fb6 <main+0x31ce>
		__ticks = 1;
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	ed 57       	subi	r30, 0x7D	; 125
    3faa:	ff 4f       	sbci	r31, 0xFF	; 255
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	91 83       	std	Z+1, r25	; 0x01
    3fb2:	80 83       	st	Z, r24
    3fb4:	65 c0       	rjmp	.+202    	; 0x4080 <main+0x3298>
	else if (__tmp > 65535)
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	eb 57       	subi	r30, 0x7B	; 123
    3fba:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbc:	60 81       	ld	r22, Z
    3fbe:	71 81       	ldd	r23, Z+1	; 0x01
    3fc0:	82 81       	ldd	r24, Z+2	; 0x02
    3fc2:	93 81       	ldd	r25, Z+3	; 0x03
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	3f ef       	ldi	r19, 0xFF	; 255
    3fc8:	4f e7       	ldi	r20, 0x7F	; 127
    3fca:	57 e4       	ldi	r21, 0x47	; 71
    3fcc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3fd0:	18 16       	cp	r1, r24
    3fd2:	0c f0       	brlt	.+2      	; 0x3fd6 <main+0x31ee>
    3fd4:	44 c0       	rjmp	.+136    	; 0x405e <main+0x3276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fd6:	fe 01       	movw	r30, r28
    3fd8:	e7 57       	subi	r30, 0x77	; 119
    3fda:	ff 4f       	sbci	r31, 0xFF	; 255
    3fdc:	60 81       	ld	r22, Z
    3fde:	71 81       	ldd	r23, Z+1	; 0x01
    3fe0:	82 81       	ldd	r24, Z+2	; 0x02
    3fe2:	93 81       	ldd	r25, Z+3	; 0x03
    3fe4:	20 e0       	ldi	r18, 0x00	; 0
    3fe6:	30 e0       	ldi	r19, 0x00	; 0
    3fe8:	40 e2       	ldi	r20, 0x20	; 32
    3fea:	51 e4       	ldi	r21, 0x41	; 65
    3fec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ff0:	dc 01       	movw	r26, r24
    3ff2:	cb 01       	movw	r24, r22
    3ff4:	8e 01       	movw	r16, r28
    3ff6:	0d 57       	subi	r16, 0x7D	; 125
    3ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    3ffa:	bc 01       	movw	r22, r24
    3ffc:	cd 01       	movw	r24, r26
    3ffe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	f8 01       	movw	r30, r16
    4008:	91 83       	std	Z+1, r25	; 0x01
    400a:	80 83       	st	Z, r24
    400c:	1f c0       	rjmp	.+62     	; 0x404c <main+0x3264>
    400e:	fe 01       	movw	r30, r28
    4010:	ef 57       	subi	r30, 0x7F	; 127
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	88 ec       	ldi	r24, 0xC8	; 200
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	91 83       	std	Z+1, r25	; 0x01
    401a:	80 83       	st	Z, r24
    401c:	fe 01       	movw	r30, r28
    401e:	ef 57       	subi	r30, 0x7F	; 127
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	80 81       	ld	r24, Z
    4024:	91 81       	ldd	r25, Z+1	; 0x01
    4026:	01 97       	sbiw	r24, 0x01	; 1
    4028:	f1 f7       	brne	.-4      	; 0x4026 <main+0x323e>
    402a:	fe 01       	movw	r30, r28
    402c:	ef 57       	subi	r30, 0x7F	; 127
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	91 83       	std	Z+1, r25	; 0x01
    4032:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4034:	de 01       	movw	r26, r28
    4036:	ad 57       	subi	r26, 0x7D	; 125
    4038:	bf 4f       	sbci	r27, 0xFF	; 255
    403a:	fe 01       	movw	r30, r28
    403c:	ed 57       	subi	r30, 0x7D	; 125
    403e:	ff 4f       	sbci	r31, 0xFF	; 255
    4040:	80 81       	ld	r24, Z
    4042:	91 81       	ldd	r25, Z+1	; 0x01
    4044:	01 97       	sbiw	r24, 0x01	; 1
    4046:	11 96       	adiw	r26, 0x01	; 1
    4048:	9c 93       	st	X, r25
    404a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    404c:	fe 01       	movw	r30, r28
    404e:	ed 57       	subi	r30, 0x7D	; 125
    4050:	ff 4f       	sbci	r31, 0xFF	; 255
    4052:	80 81       	ld	r24, Z
    4054:	91 81       	ldd	r25, Z+1	; 0x01
    4056:	00 97       	sbiw	r24, 0x00	; 0
    4058:	d1 f6       	brne	.-76     	; 0x400e <main+0x3226>
    405a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    405e:	8e 01       	movw	r16, r28
    4060:	0d 57       	subi	r16, 0x7D	; 125
    4062:	1f 4f       	sbci	r17, 0xFF	; 255
    4064:	fe 01       	movw	r30, r28
    4066:	eb 57       	subi	r30, 0x7B	; 123
    4068:	ff 4f       	sbci	r31, 0xFF	; 255
    406a:	60 81       	ld	r22, Z
    406c:	71 81       	ldd	r23, Z+1	; 0x01
    406e:	82 81       	ldd	r24, Z+2	; 0x02
    4070:	93 81       	ldd	r25, Z+3	; 0x03
    4072:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	f8 01       	movw	r30, r16
    407c:	91 83       	std	Z+1, r25	; 0x01
    407e:	80 83       	st	Z, r24
    4080:	de 01       	movw	r26, r28
    4082:	a1 58       	subi	r26, 0x81	; 129
    4084:	bf 4f       	sbci	r27, 0xFF	; 255
    4086:	fe 01       	movw	r30, r28
    4088:	ed 57       	subi	r30, 0x7D	; 125
    408a:	ff 4f       	sbci	r31, 0xFF	; 255
    408c:	80 81       	ld	r24, Z
    408e:	91 81       	ldd	r25, Z+1	; 0x01
    4090:	11 96       	adiw	r26, 0x01	; 1
    4092:	9c 93       	st	X, r25
    4094:	8e 93       	st	-X, r24
    4096:	fe 01       	movw	r30, r28
    4098:	e1 58       	subi	r30, 0x81	; 129
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	80 81       	ld	r24, Z
    409e:	91 81       	ldd	r25, Z+1	; 0x01
    40a0:	01 97       	sbiw	r24, 0x01	; 1
    40a2:	f1 f7       	brne	.-4      	; 0x40a0 <main+0x32b8>
    40a4:	fe 01       	movw	r30, r28
    40a6:	e1 58       	subi	r30, 0x81	; 129
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	91 83       	std	Z+1, r25	; 0x01
    40ac:	80 83       	st	Z, r24
    40ae:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
            }

            break;

        case AUTO_MANUAL_MENU:
            LCD_VidClearScreen();
    40b2:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>

            LCD_VidSendString_XY("1.AUTO  2.Manual", 0, 0);
    40b6:	80 e7       	ldi	r24, 0x70	; 112
    40b8:	91 e0       	ldi	r25, 0x01	; 1
    40ba:	60 e0       	ldi	r22, 0x00	; 0
    40bc:	40 e0       	ldi	r20, 0x00	; 0
    40be:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            LCD_VidSendString_XY("0.Return", 1, 3);
    40c2:	81 e8       	ldi	r24, 0x81	; 129
    40c4:	91 e0       	ldi	r25, 0x01	; 1
    40c6:	61 e0       	ldi	r22, 0x01	; 1
    40c8:	43 e0       	ldi	r20, 0x03	; 3
    40ca:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            WaitForKey(&Local_u8KeyPressed);
    40ce:	ce 01       	movw	r24, r28
    40d0:	82 5e       	subi	r24, 0xE2	; 226
    40d2:	9d 4f       	sbci	r25, 0xFD	; 253
    40d4:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <WaitForKey>

            if (SELECT_AUTO == Local_u8KeyPressed)
    40d8:	fe 01       	movw	r30, r28
    40da:	e2 5e       	subi	r30, 0xE2	; 226
    40dc:	fd 4f       	sbci	r31, 0xFD	; 253
    40de:	80 81       	ld	r24, Z
    40e0:	81 33       	cpi	r24, 0x31	; 49
    40e2:	09 f0       	breq	.+2      	; 0x40e6 <main+0x32fe>
    40e4:	d0 c0       	rjmp	.+416    	; 0x4286 <main+0x349e>
            {
                LCD_VidClearScreen();
    40e6:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("AUTO");
    40ea:	8a e8       	ldi	r24, 0x8A	; 138
    40ec:	91 e0       	ldi	r25, 0x01	; 1
    40ee:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    40f2:	fe 01       	movw	r30, r28
    40f4:	e5 58       	subi	r30, 0x85	; 133
    40f6:	ff 4f       	sbci	r31, 0xFF	; 255
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	a8 e4       	ldi	r26, 0x48	; 72
    40fe:	b3 e4       	ldi	r27, 0x43	; 67
    4100:	80 83       	st	Z, r24
    4102:	91 83       	std	Z+1, r25	; 0x01
    4104:	a2 83       	std	Z+2, r26	; 0x02
    4106:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4108:	8e 01       	movw	r16, r28
    410a:	09 58       	subi	r16, 0x89	; 137
    410c:	1f 4f       	sbci	r17, 0xFF	; 255
    410e:	fe 01       	movw	r30, r28
    4110:	e5 58       	subi	r30, 0x85	; 133
    4112:	ff 4f       	sbci	r31, 0xFF	; 255
    4114:	60 81       	ld	r22, Z
    4116:	71 81       	ldd	r23, Z+1	; 0x01
    4118:	82 81       	ldd	r24, Z+2	; 0x02
    411a:	93 81       	ldd	r25, Z+3	; 0x03
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	4a ef       	ldi	r20, 0xFA	; 250
    4122:	54 e4       	ldi	r21, 0x44	; 68
    4124:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	f8 01       	movw	r30, r16
    412e:	80 83       	st	Z, r24
    4130:	91 83       	std	Z+1, r25	; 0x01
    4132:	a2 83       	std	Z+2, r26	; 0x02
    4134:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4136:	fe 01       	movw	r30, r28
    4138:	e9 58       	subi	r30, 0x89	; 137
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	60 81       	ld	r22, Z
    413e:	71 81       	ldd	r23, Z+1	; 0x01
    4140:	82 81       	ldd	r24, Z+2	; 0x02
    4142:	93 81       	ldd	r25, Z+3	; 0x03
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	40 e8       	ldi	r20, 0x80	; 128
    414a:	5f e3       	ldi	r21, 0x3F	; 63
    414c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4150:	88 23       	and	r24, r24
    4152:	44 f4       	brge	.+16     	; 0x4164 <main+0x337c>
		__ticks = 1;
    4154:	fe 01       	movw	r30, r28
    4156:	eb 58       	subi	r30, 0x8B	; 139
    4158:	ff 4f       	sbci	r31, 0xFF	; 255
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	91 83       	std	Z+1, r25	; 0x01
    4160:	80 83       	st	Z, r24
    4162:	64 c0       	rjmp	.+200    	; 0x422c <main+0x3444>
	else if (__tmp > 65535)
    4164:	fe 01       	movw	r30, r28
    4166:	e9 58       	subi	r30, 0x89	; 137
    4168:	ff 4f       	sbci	r31, 0xFF	; 255
    416a:	60 81       	ld	r22, Z
    416c:	71 81       	ldd	r23, Z+1	; 0x01
    416e:	82 81       	ldd	r24, Z+2	; 0x02
    4170:	93 81       	ldd	r25, Z+3	; 0x03
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	3f ef       	ldi	r19, 0xFF	; 255
    4176:	4f e7       	ldi	r20, 0x7F	; 127
    4178:	57 e4       	ldi	r21, 0x47	; 71
    417a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    417e:	18 16       	cp	r1, r24
    4180:	0c f0       	brlt	.+2      	; 0x4184 <main+0x339c>
    4182:	43 c0       	rjmp	.+134    	; 0x420a <main+0x3422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4184:	fe 01       	movw	r30, r28
    4186:	e5 58       	subi	r30, 0x85	; 133
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	60 81       	ld	r22, Z
    418c:	71 81       	ldd	r23, Z+1	; 0x01
    418e:	82 81       	ldd	r24, Z+2	; 0x02
    4190:	93 81       	ldd	r25, Z+3	; 0x03
    4192:	20 e0       	ldi	r18, 0x00	; 0
    4194:	30 e0       	ldi	r19, 0x00	; 0
    4196:	40 e2       	ldi	r20, 0x20	; 32
    4198:	51 e4       	ldi	r21, 0x41	; 65
    419a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    419e:	dc 01       	movw	r26, r24
    41a0:	cb 01       	movw	r24, r22
    41a2:	8e 01       	movw	r16, r28
    41a4:	0b 58       	subi	r16, 0x8B	; 139
    41a6:	1f 4f       	sbci	r17, 0xFF	; 255
    41a8:	bc 01       	movw	r22, r24
    41aa:	cd 01       	movw	r24, r26
    41ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41b0:	dc 01       	movw	r26, r24
    41b2:	cb 01       	movw	r24, r22
    41b4:	f8 01       	movw	r30, r16
    41b6:	91 83       	std	Z+1, r25	; 0x01
    41b8:	80 83       	st	Z, r24
    41ba:	1f c0       	rjmp	.+62     	; 0x41fa <main+0x3412>
    41bc:	fe 01       	movw	r30, r28
    41be:	ed 58       	subi	r30, 0x8D	; 141
    41c0:	ff 4f       	sbci	r31, 0xFF	; 255
    41c2:	88 ec       	ldi	r24, 0xC8	; 200
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	91 83       	std	Z+1, r25	; 0x01
    41c8:	80 83       	st	Z, r24
    41ca:	fe 01       	movw	r30, r28
    41cc:	ed 58       	subi	r30, 0x8D	; 141
    41ce:	ff 4f       	sbci	r31, 0xFF	; 255
    41d0:	80 81       	ld	r24, Z
    41d2:	91 81       	ldd	r25, Z+1	; 0x01
    41d4:	01 97       	sbiw	r24, 0x01	; 1
    41d6:	f1 f7       	brne	.-4      	; 0x41d4 <main+0x33ec>
    41d8:	fe 01       	movw	r30, r28
    41da:	ed 58       	subi	r30, 0x8D	; 141
    41dc:	ff 4f       	sbci	r31, 0xFF	; 255
    41de:	91 83       	std	Z+1, r25	; 0x01
    41e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e2:	de 01       	movw	r26, r28
    41e4:	ab 58       	subi	r26, 0x8B	; 139
    41e6:	bf 4f       	sbci	r27, 0xFF	; 255
    41e8:	fe 01       	movw	r30, r28
    41ea:	eb 58       	subi	r30, 0x8B	; 139
    41ec:	ff 4f       	sbci	r31, 0xFF	; 255
    41ee:	80 81       	ld	r24, Z
    41f0:	91 81       	ldd	r25, Z+1	; 0x01
    41f2:	01 97       	sbiw	r24, 0x01	; 1
    41f4:	11 96       	adiw	r26, 0x01	; 1
    41f6:	9c 93       	st	X, r25
    41f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41fa:	fe 01       	movw	r30, r28
    41fc:	eb 58       	subi	r30, 0x8B	; 139
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	80 81       	ld	r24, Z
    4202:	91 81       	ldd	r25, Z+1	; 0x01
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	d1 f6       	brne	.-76     	; 0x41bc <main+0x33d4>
    4208:	28 c0       	rjmp	.+80     	; 0x425a <main+0x3472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    420a:	8e 01       	movw	r16, r28
    420c:	0b 58       	subi	r16, 0x8B	; 139
    420e:	1f 4f       	sbci	r17, 0xFF	; 255
    4210:	fe 01       	movw	r30, r28
    4212:	e9 58       	subi	r30, 0x89	; 137
    4214:	ff 4f       	sbci	r31, 0xFF	; 255
    4216:	60 81       	ld	r22, Z
    4218:	71 81       	ldd	r23, Z+1	; 0x01
    421a:	82 81       	ldd	r24, Z+2	; 0x02
    421c:	93 81       	ldd	r25, Z+3	; 0x03
    421e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4222:	dc 01       	movw	r26, r24
    4224:	cb 01       	movw	r24, r22
    4226:	f8 01       	movw	r30, r16
    4228:	91 83       	std	Z+1, r25	; 0x01
    422a:	80 83       	st	Z, r24
    422c:	de 01       	movw	r26, r28
    422e:	af 58       	subi	r26, 0x8F	; 143
    4230:	bf 4f       	sbci	r27, 0xFF	; 255
    4232:	fe 01       	movw	r30, r28
    4234:	eb 58       	subi	r30, 0x8B	; 139
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	80 81       	ld	r24, Z
    423a:	91 81       	ldd	r25, Z+1	; 0x01
    423c:	11 96       	adiw	r26, 0x01	; 1
    423e:	9c 93       	st	X, r25
    4240:	8e 93       	st	-X, r24
    4242:	fe 01       	movw	r30, r28
    4244:	ef 58       	subi	r30, 0x8F	; 143
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	80 81       	ld	r24, Z
    424a:	91 81       	ldd	r25, Z+1	; 0x01
    424c:	01 97       	sbiw	r24, 0x01	; 1
    424e:	f1 f7       	brne	.-4      	; 0x424c <main+0x3464>
    4250:	fe 01       	movw	r30, r28
    4252:	ef 58       	subi	r30, 0x8F	; 143
    4254:	ff 4f       	sbci	r31, 0xFF	; 255
    4256:	91 83       	std	Z+1, r25	; 0x01
    4258:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);


                if (Local_u8Chooser == FAN)
    425a:	fe 01       	movw	r30, r28
    425c:	e5 5e       	subi	r30, 0xE5	; 229
    425e:	fd 4f       	sbci	r31, 0xFD	; 253
    4260:	80 81       	ld	r24, Z
    4262:	84 30       	cpi	r24, 0x04	; 4
    4264:	39 f4       	brne	.+14     	; 0x4274 <main+0x348c>
                    Local_u8ShowMenu = FAN_AUTO_MENU;
    4266:	fe 01       	movw	r30, r28
    4268:	e3 5e       	subi	r30, 0xE3	; 227
    426a:	fd 4f       	sbci	r31, 0xFD	; 253
    426c:	8d e0       	ldi	r24, 0x0D	; 13
    426e:	80 83       	st	Z, r24
    4270:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
                else
                    UART_VidSendByte(ROOM1_SET_AUTO + Local_u8Chooser);
    4274:	fe 01       	movw	r30, r28
    4276:	e5 5e       	subi	r30, 0xE5	; 229
    4278:	fd 4f       	sbci	r31, 0xFD	; 253
    427a:	80 81       	ld	r24, Z
    427c:	87 5d       	subi	r24, 0xD7	; 215
    427e:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>
    4282:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
            }
            else if (SELECT_MANUAL == Local_u8KeyPressed)
    4286:	fe 01       	movw	r30, r28
    4288:	e2 5e       	subi	r30, 0xE2	; 226
    428a:	fd 4f       	sbci	r31, 0xFD	; 253
    428c:	80 81       	ld	r24, Z
    428e:	82 33       	cpi	r24, 0x32	; 50
    4290:	09 f0       	breq	.+2      	; 0x4294 <main+0x34ac>
    4292:	c1 c0       	rjmp	.+386    	; 0x4416 <main+0x362e>
            {
                LCD_VidClearScreen();
    4294:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Manual");
    4298:	8f e8       	ldi	r24, 0x8F	; 143
    429a:	91 e0       	ldi	r25, 0x01	; 1
    429c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    42a0:	fe 01       	movw	r30, r28
    42a2:	e3 59       	subi	r30, 0x93	; 147
    42a4:	ff 4f       	sbci	r31, 0xFF	; 255
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	a8 e4       	ldi	r26, 0x48	; 72
    42ac:	b3 e4       	ldi	r27, 0x43	; 67
    42ae:	80 83       	st	Z, r24
    42b0:	91 83       	std	Z+1, r25	; 0x01
    42b2:	a2 83       	std	Z+2, r26	; 0x02
    42b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42b6:	8e 01       	movw	r16, r28
    42b8:	07 59       	subi	r16, 0x97	; 151
    42ba:	1f 4f       	sbci	r17, 0xFF	; 255
    42bc:	fe 01       	movw	r30, r28
    42be:	e3 59       	subi	r30, 0x93	; 147
    42c0:	ff 4f       	sbci	r31, 0xFF	; 255
    42c2:	60 81       	ld	r22, Z
    42c4:	71 81       	ldd	r23, Z+1	; 0x01
    42c6:	82 81       	ldd	r24, Z+2	; 0x02
    42c8:	93 81       	ldd	r25, Z+3	; 0x03
    42ca:	20 e0       	ldi	r18, 0x00	; 0
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	4a ef       	ldi	r20, 0xFA	; 250
    42d0:	54 e4       	ldi	r21, 0x44	; 68
    42d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    42d6:	dc 01       	movw	r26, r24
    42d8:	cb 01       	movw	r24, r22
    42da:	f8 01       	movw	r30, r16
    42dc:	80 83       	st	Z, r24
    42de:	91 83       	std	Z+1, r25	; 0x01
    42e0:	a2 83       	std	Z+2, r26	; 0x02
    42e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42e4:	fe 01       	movw	r30, r28
    42e6:	e7 59       	subi	r30, 0x97	; 151
    42e8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ea:	60 81       	ld	r22, Z
    42ec:	71 81       	ldd	r23, Z+1	; 0x01
    42ee:	82 81       	ldd	r24, Z+2	; 0x02
    42f0:	93 81       	ldd	r25, Z+3	; 0x03
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	40 e8       	ldi	r20, 0x80	; 128
    42f8:	5f e3       	ldi	r21, 0x3F	; 63
    42fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    42fe:	88 23       	and	r24, r24
    4300:	44 f4       	brge	.+16     	; 0x4312 <main+0x352a>
		__ticks = 1;
    4302:	fe 01       	movw	r30, r28
    4304:	e9 59       	subi	r30, 0x99	; 153
    4306:	ff 4f       	sbci	r31, 0xFF	; 255
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	91 83       	std	Z+1, r25	; 0x01
    430e:	80 83       	st	Z, r24
    4310:	64 c0       	rjmp	.+200    	; 0x43da <main+0x35f2>
	else if (__tmp > 65535)
    4312:	fe 01       	movw	r30, r28
    4314:	e7 59       	subi	r30, 0x97	; 151
    4316:	ff 4f       	sbci	r31, 0xFF	; 255
    4318:	60 81       	ld	r22, Z
    431a:	71 81       	ldd	r23, Z+1	; 0x01
    431c:	82 81       	ldd	r24, Z+2	; 0x02
    431e:	93 81       	ldd	r25, Z+3	; 0x03
    4320:	20 e0       	ldi	r18, 0x00	; 0
    4322:	3f ef       	ldi	r19, 0xFF	; 255
    4324:	4f e7       	ldi	r20, 0x7F	; 127
    4326:	57 e4       	ldi	r21, 0x47	; 71
    4328:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    432c:	18 16       	cp	r1, r24
    432e:	0c f0       	brlt	.+2      	; 0x4332 <main+0x354a>
    4330:	43 c0       	rjmp	.+134    	; 0x43b8 <main+0x35d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4332:	fe 01       	movw	r30, r28
    4334:	e3 59       	subi	r30, 0x93	; 147
    4336:	ff 4f       	sbci	r31, 0xFF	; 255
    4338:	60 81       	ld	r22, Z
    433a:	71 81       	ldd	r23, Z+1	; 0x01
    433c:	82 81       	ldd	r24, Z+2	; 0x02
    433e:	93 81       	ldd	r25, Z+3	; 0x03
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	40 e2       	ldi	r20, 0x20	; 32
    4346:	51 e4       	ldi	r21, 0x41	; 65
    4348:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    434c:	dc 01       	movw	r26, r24
    434e:	cb 01       	movw	r24, r22
    4350:	8e 01       	movw	r16, r28
    4352:	09 59       	subi	r16, 0x99	; 153
    4354:	1f 4f       	sbci	r17, 0xFF	; 255
    4356:	bc 01       	movw	r22, r24
    4358:	cd 01       	movw	r24, r26
    435a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	f8 01       	movw	r30, r16
    4364:	91 83       	std	Z+1, r25	; 0x01
    4366:	80 83       	st	Z, r24
    4368:	1f c0       	rjmp	.+62     	; 0x43a8 <main+0x35c0>
    436a:	fe 01       	movw	r30, r28
    436c:	eb 59       	subi	r30, 0x9B	; 155
    436e:	ff 4f       	sbci	r31, 0xFF	; 255
    4370:	88 ec       	ldi	r24, 0xC8	; 200
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	91 83       	std	Z+1, r25	; 0x01
    4376:	80 83       	st	Z, r24
    4378:	fe 01       	movw	r30, r28
    437a:	eb 59       	subi	r30, 0x9B	; 155
    437c:	ff 4f       	sbci	r31, 0xFF	; 255
    437e:	80 81       	ld	r24, Z
    4380:	91 81       	ldd	r25, Z+1	; 0x01
    4382:	01 97       	sbiw	r24, 0x01	; 1
    4384:	f1 f7       	brne	.-4      	; 0x4382 <main+0x359a>
    4386:	fe 01       	movw	r30, r28
    4388:	eb 59       	subi	r30, 0x9B	; 155
    438a:	ff 4f       	sbci	r31, 0xFF	; 255
    438c:	91 83       	std	Z+1, r25	; 0x01
    438e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4390:	de 01       	movw	r26, r28
    4392:	a9 59       	subi	r26, 0x99	; 153
    4394:	bf 4f       	sbci	r27, 0xFF	; 255
    4396:	fe 01       	movw	r30, r28
    4398:	e9 59       	subi	r30, 0x99	; 153
    439a:	ff 4f       	sbci	r31, 0xFF	; 255
    439c:	80 81       	ld	r24, Z
    439e:	91 81       	ldd	r25, Z+1	; 0x01
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	11 96       	adiw	r26, 0x01	; 1
    43a4:	9c 93       	st	X, r25
    43a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a8:	fe 01       	movw	r30, r28
    43aa:	e9 59       	subi	r30, 0x99	; 153
    43ac:	ff 4f       	sbci	r31, 0xFF	; 255
    43ae:	80 81       	ld	r24, Z
    43b0:	91 81       	ldd	r25, Z+1	; 0x01
    43b2:	00 97       	sbiw	r24, 0x00	; 0
    43b4:	d1 f6       	brne	.-76     	; 0x436a <main+0x3582>
    43b6:	28 c0       	rjmp	.+80     	; 0x4408 <main+0x3620>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43b8:	8e 01       	movw	r16, r28
    43ba:	09 59       	subi	r16, 0x99	; 153
    43bc:	1f 4f       	sbci	r17, 0xFF	; 255
    43be:	fe 01       	movw	r30, r28
    43c0:	e7 59       	subi	r30, 0x97	; 151
    43c2:	ff 4f       	sbci	r31, 0xFF	; 255
    43c4:	60 81       	ld	r22, Z
    43c6:	71 81       	ldd	r23, Z+1	; 0x01
    43c8:	82 81       	ldd	r24, Z+2	; 0x02
    43ca:	93 81       	ldd	r25, Z+3	; 0x03
    43cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43d0:	dc 01       	movw	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	f8 01       	movw	r30, r16
    43d6:	91 83       	std	Z+1, r25	; 0x01
    43d8:	80 83       	st	Z, r24
    43da:	de 01       	movw	r26, r28
    43dc:	ad 59       	subi	r26, 0x9D	; 157
    43de:	bf 4f       	sbci	r27, 0xFF	; 255
    43e0:	fe 01       	movw	r30, r28
    43e2:	e9 59       	subi	r30, 0x99	; 153
    43e4:	ff 4f       	sbci	r31, 0xFF	; 255
    43e6:	80 81       	ld	r24, Z
    43e8:	91 81       	ldd	r25, Z+1	; 0x01
    43ea:	11 96       	adiw	r26, 0x01	; 1
    43ec:	9c 93       	st	X, r25
    43ee:	8e 93       	st	-X, r24
    43f0:	fe 01       	movw	r30, r28
    43f2:	ed 59       	subi	r30, 0x9D	; 157
    43f4:	ff 4f       	sbci	r31, 0xFF	; 255
    43f6:	80 81       	ld	r24, Z
    43f8:	91 81       	ldd	r25, Z+1	; 0x01
    43fa:	01 97       	sbiw	r24, 0x01	; 1
    43fc:	f1 f7       	brne	.-4      	; 0x43fa <main+0x3612>
    43fe:	fe 01       	movw	r30, r28
    4400:	ed 59       	subi	r30, 0x9D	; 157
    4402:	ff 4f       	sbci	r31, 0xFF	; 255
    4404:	91 83       	std	Z+1, r25	; 0x01
    4406:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);
                Local_u8ShowMenu = MANUAL_MENU;
    4408:	fe 01       	movw	r30, r28
    440a:	e3 5e       	subi	r30, 0xE3	; 227
    440c:	fd 4f       	sbci	r31, 0xFD	; 253
    440e:	86 e1       	ldi	r24, 0x16	; 22
    4410:	80 83       	st	Z, r24
    4412:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
            }
            else if (SELECT_RETURN == Local_u8KeyPressed)
    4416:	fe 01       	movw	r30, r28
    4418:	e2 5e       	subi	r30, 0xE2	; 226
    441a:	fd 4f       	sbci	r31, 0xFD	; 253
    441c:	80 81       	ld	r24, Z
    441e:	80 33       	cpi	r24, 0x30	; 48
    4420:	09 f0       	breq	.+2      	; 0x4424 <main+0x363c>
    4422:	ce c0       	rjmp	.+412    	; 0x45c0 <main+0x37d8>
            {
                LCD_VidClearScreen();
    4424:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Return");
    4428:	86 e9       	ldi	r24, 0x96	; 150
    442a:	91 e0       	ldi	r25, 0x01	; 1
    442c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    4430:	fe 01       	movw	r30, r28
    4432:	e1 5a       	subi	r30, 0xA1	; 161
    4434:	ff 4f       	sbci	r31, 0xFF	; 255
    4436:	80 e0       	ldi	r24, 0x00	; 0
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	a8 e4       	ldi	r26, 0x48	; 72
    443c:	b3 e4       	ldi	r27, 0x43	; 67
    443e:	80 83       	st	Z, r24
    4440:	91 83       	std	Z+1, r25	; 0x01
    4442:	a2 83       	std	Z+2, r26	; 0x02
    4444:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4446:	8e 01       	movw	r16, r28
    4448:	05 5a       	subi	r16, 0xA5	; 165
    444a:	1f 4f       	sbci	r17, 0xFF	; 255
    444c:	fe 01       	movw	r30, r28
    444e:	e1 5a       	subi	r30, 0xA1	; 161
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	60 81       	ld	r22, Z
    4454:	71 81       	ldd	r23, Z+1	; 0x01
    4456:	82 81       	ldd	r24, Z+2	; 0x02
    4458:	93 81       	ldd	r25, Z+3	; 0x03
    445a:	20 e0       	ldi	r18, 0x00	; 0
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	4a ef       	ldi	r20, 0xFA	; 250
    4460:	54 e4       	ldi	r21, 0x44	; 68
    4462:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4466:	dc 01       	movw	r26, r24
    4468:	cb 01       	movw	r24, r22
    446a:	f8 01       	movw	r30, r16
    446c:	80 83       	st	Z, r24
    446e:	91 83       	std	Z+1, r25	; 0x01
    4470:	a2 83       	std	Z+2, r26	; 0x02
    4472:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4474:	fe 01       	movw	r30, r28
    4476:	e5 5a       	subi	r30, 0xA5	; 165
    4478:	ff 4f       	sbci	r31, 0xFF	; 255
    447a:	60 81       	ld	r22, Z
    447c:	71 81       	ldd	r23, Z+1	; 0x01
    447e:	82 81       	ldd	r24, Z+2	; 0x02
    4480:	93 81       	ldd	r25, Z+3	; 0x03
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	40 e8       	ldi	r20, 0x80	; 128
    4488:	5f e3       	ldi	r21, 0x3F	; 63
    448a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    448e:	88 23       	and	r24, r24
    4490:	44 f4       	brge	.+16     	; 0x44a2 <main+0x36ba>
		__ticks = 1;
    4492:	fe 01       	movw	r30, r28
    4494:	e7 5a       	subi	r30, 0xA7	; 167
    4496:	ff 4f       	sbci	r31, 0xFF	; 255
    4498:	81 e0       	ldi	r24, 0x01	; 1
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	91 83       	std	Z+1, r25	; 0x01
    449e:	80 83       	st	Z, r24
    44a0:	64 c0       	rjmp	.+200    	; 0x456a <main+0x3782>
	else if (__tmp > 65535)
    44a2:	fe 01       	movw	r30, r28
    44a4:	e5 5a       	subi	r30, 0xA5	; 165
    44a6:	ff 4f       	sbci	r31, 0xFF	; 255
    44a8:	60 81       	ld	r22, Z
    44aa:	71 81       	ldd	r23, Z+1	; 0x01
    44ac:	82 81       	ldd	r24, Z+2	; 0x02
    44ae:	93 81       	ldd	r25, Z+3	; 0x03
    44b0:	20 e0       	ldi	r18, 0x00	; 0
    44b2:	3f ef       	ldi	r19, 0xFF	; 255
    44b4:	4f e7       	ldi	r20, 0x7F	; 127
    44b6:	57 e4       	ldi	r21, 0x47	; 71
    44b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    44bc:	18 16       	cp	r1, r24
    44be:	0c f0       	brlt	.+2      	; 0x44c2 <main+0x36da>
    44c0:	43 c0       	rjmp	.+134    	; 0x4548 <main+0x3760>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44c2:	fe 01       	movw	r30, r28
    44c4:	e1 5a       	subi	r30, 0xA1	; 161
    44c6:	ff 4f       	sbci	r31, 0xFF	; 255
    44c8:	60 81       	ld	r22, Z
    44ca:	71 81       	ldd	r23, Z+1	; 0x01
    44cc:	82 81       	ldd	r24, Z+2	; 0x02
    44ce:	93 81       	ldd	r25, Z+3	; 0x03
    44d0:	20 e0       	ldi	r18, 0x00	; 0
    44d2:	30 e0       	ldi	r19, 0x00	; 0
    44d4:	40 e2       	ldi	r20, 0x20	; 32
    44d6:	51 e4       	ldi	r21, 0x41	; 65
    44d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44dc:	dc 01       	movw	r26, r24
    44de:	cb 01       	movw	r24, r22
    44e0:	8e 01       	movw	r16, r28
    44e2:	07 5a       	subi	r16, 0xA7	; 167
    44e4:	1f 4f       	sbci	r17, 0xFF	; 255
    44e6:	bc 01       	movw	r22, r24
    44e8:	cd 01       	movw	r24, r26
    44ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44ee:	dc 01       	movw	r26, r24
    44f0:	cb 01       	movw	r24, r22
    44f2:	f8 01       	movw	r30, r16
    44f4:	91 83       	std	Z+1, r25	; 0x01
    44f6:	80 83       	st	Z, r24
    44f8:	1f c0       	rjmp	.+62     	; 0x4538 <main+0x3750>
    44fa:	fe 01       	movw	r30, r28
    44fc:	e9 5a       	subi	r30, 0xA9	; 169
    44fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4500:	88 ec       	ldi	r24, 0xC8	; 200
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	91 83       	std	Z+1, r25	; 0x01
    4506:	80 83       	st	Z, r24
    4508:	fe 01       	movw	r30, r28
    450a:	e9 5a       	subi	r30, 0xA9	; 169
    450c:	ff 4f       	sbci	r31, 0xFF	; 255
    450e:	80 81       	ld	r24, Z
    4510:	91 81       	ldd	r25, Z+1	; 0x01
    4512:	01 97       	sbiw	r24, 0x01	; 1
    4514:	f1 f7       	brne	.-4      	; 0x4512 <main+0x372a>
    4516:	fe 01       	movw	r30, r28
    4518:	e9 5a       	subi	r30, 0xA9	; 169
    451a:	ff 4f       	sbci	r31, 0xFF	; 255
    451c:	91 83       	std	Z+1, r25	; 0x01
    451e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4520:	de 01       	movw	r26, r28
    4522:	a7 5a       	subi	r26, 0xA7	; 167
    4524:	bf 4f       	sbci	r27, 0xFF	; 255
    4526:	fe 01       	movw	r30, r28
    4528:	e7 5a       	subi	r30, 0xA7	; 167
    452a:	ff 4f       	sbci	r31, 0xFF	; 255
    452c:	80 81       	ld	r24, Z
    452e:	91 81       	ldd	r25, Z+1	; 0x01
    4530:	01 97       	sbiw	r24, 0x01	; 1
    4532:	11 96       	adiw	r26, 0x01	; 1
    4534:	9c 93       	st	X, r25
    4536:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4538:	fe 01       	movw	r30, r28
    453a:	e7 5a       	subi	r30, 0xA7	; 167
    453c:	ff 4f       	sbci	r31, 0xFF	; 255
    453e:	80 81       	ld	r24, Z
    4540:	91 81       	ldd	r25, Z+1	; 0x01
    4542:	00 97       	sbiw	r24, 0x00	; 0
    4544:	d1 f6       	brne	.-76     	; 0x44fa <main+0x3712>
    4546:	28 c0       	rjmp	.+80     	; 0x4598 <main+0x37b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4548:	8e 01       	movw	r16, r28
    454a:	07 5a       	subi	r16, 0xA7	; 167
    454c:	1f 4f       	sbci	r17, 0xFF	; 255
    454e:	fe 01       	movw	r30, r28
    4550:	e5 5a       	subi	r30, 0xA5	; 165
    4552:	ff 4f       	sbci	r31, 0xFF	; 255
    4554:	60 81       	ld	r22, Z
    4556:	71 81       	ldd	r23, Z+1	; 0x01
    4558:	82 81       	ldd	r24, Z+2	; 0x02
    455a:	93 81       	ldd	r25, Z+3	; 0x03
    455c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4560:	dc 01       	movw	r26, r24
    4562:	cb 01       	movw	r24, r22
    4564:	f8 01       	movw	r30, r16
    4566:	91 83       	std	Z+1, r25	; 0x01
    4568:	80 83       	st	Z, r24
    456a:	de 01       	movw	r26, r28
    456c:	ab 5a       	subi	r26, 0xAB	; 171
    456e:	bf 4f       	sbci	r27, 0xFF	; 255
    4570:	fe 01       	movw	r30, r28
    4572:	e7 5a       	subi	r30, 0xA7	; 167
    4574:	ff 4f       	sbci	r31, 0xFF	; 255
    4576:	80 81       	ld	r24, Z
    4578:	91 81       	ldd	r25, Z+1	; 0x01
    457a:	11 96       	adiw	r26, 0x01	; 1
    457c:	9c 93       	st	X, r25
    457e:	8e 93       	st	-X, r24
    4580:	fe 01       	movw	r30, r28
    4582:	eb 5a       	subi	r30, 0xAB	; 171
    4584:	ff 4f       	sbci	r31, 0xFF	; 255
    4586:	80 81       	ld	r24, Z
    4588:	91 81       	ldd	r25, Z+1	; 0x01
    458a:	01 97       	sbiw	r24, 0x01	; 1
    458c:	f1 f7       	brne	.-4      	; 0x458a <main+0x37a2>
    458e:	fe 01       	movw	r30, r28
    4590:	eb 5a       	subi	r30, 0xAB	; 171
    4592:	ff 4f       	sbci	r31, 0xFF	; 255
    4594:	91 83       	std	Z+1, r25	; 0x01
    4596:	80 83       	st	Z, r24
                _delay_ms(DEFUALT_DELAY_TIME);


                if (Local_u8Chooser == FAN)
    4598:	fe 01       	movw	r30, r28
    459a:	e5 5e       	subi	r30, 0xE5	; 229
    459c:	fd 4f       	sbci	r31, 0xFD	; 253
    459e:	80 81       	ld	r24, Z
    45a0:	84 30       	cpi	r24, 0x04	; 4
    45a2:	39 f4       	brne	.+14     	; 0x45b2 <main+0x37ca>
                    Local_u8ShowMenu = MAIN_MENU;
    45a4:	fe 01       	movw	r30, r28
    45a6:	e3 5e       	subi	r30, 0xE3	; 227
    45a8:	fd 4f       	sbci	r31, 0xFD	; 253
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	80 83       	st	Z, r24
    45ae:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
                else
                    Local_u8ShowMenu = ROOM_CHOOSER_MENU;
    45b2:	fe 01       	movw	r30, r28
    45b4:	e3 5e       	subi	r30, 0xE3	; 227
    45b6:	fd 4f       	sbci	r31, 0xFD	; 253
    45b8:	82 e0       	ldi	r24, 0x02	; 2
    45ba:	80 83       	st	Z, r24
    45bc:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
            }
            else
            {
                LCD_VidClearScreen();
    45c0:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Wrong Input");
    45c4:	8a e5       	ldi	r24, 0x5A	; 90
    45c6:	91 e0       	ldi	r25, 0x01	; 1
    45c8:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
                LCD_VidSendString_XY("Try Again", 1, 0);
    45cc:	86 e6       	ldi	r24, 0x66	; 102
    45ce:	91 e0       	ldi	r25, 0x01	; 1
    45d0:	61 e0       	ldi	r22, 0x01	; 1
    45d2:	40 e0       	ldi	r20, 0x00	; 0
    45d4:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    45d8:	fe 01       	movw	r30, r28
    45da:	ef 5a       	subi	r30, 0xAF	; 175
    45dc:	ff 4f       	sbci	r31, 0xFF	; 255
    45de:	80 e0       	ldi	r24, 0x00	; 0
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	a8 e4       	ldi	r26, 0x48	; 72
    45e4:	b3 e4       	ldi	r27, 0x43	; 67
    45e6:	80 83       	st	Z, r24
    45e8:	91 83       	std	Z+1, r25	; 0x01
    45ea:	a2 83       	std	Z+2, r26	; 0x02
    45ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ee:	8e 01       	movw	r16, r28
    45f0:	03 5b       	subi	r16, 0xB3	; 179
    45f2:	1f 4f       	sbci	r17, 0xFF	; 255
    45f4:	fe 01       	movw	r30, r28
    45f6:	ef 5a       	subi	r30, 0xAF	; 175
    45f8:	ff 4f       	sbci	r31, 0xFF	; 255
    45fa:	60 81       	ld	r22, Z
    45fc:	71 81       	ldd	r23, Z+1	; 0x01
    45fe:	82 81       	ldd	r24, Z+2	; 0x02
    4600:	93 81       	ldd	r25, Z+3	; 0x03
    4602:	20 e0       	ldi	r18, 0x00	; 0
    4604:	30 e0       	ldi	r19, 0x00	; 0
    4606:	4a ef       	ldi	r20, 0xFA	; 250
    4608:	54 e4       	ldi	r21, 0x44	; 68
    460a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    460e:	dc 01       	movw	r26, r24
    4610:	cb 01       	movw	r24, r22
    4612:	f8 01       	movw	r30, r16
    4614:	80 83       	st	Z, r24
    4616:	91 83       	std	Z+1, r25	; 0x01
    4618:	a2 83       	std	Z+2, r26	; 0x02
    461a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    461c:	fe 01       	movw	r30, r28
    461e:	e3 5b       	subi	r30, 0xB3	; 179
    4620:	ff 4f       	sbci	r31, 0xFF	; 255
    4622:	60 81       	ld	r22, Z
    4624:	71 81       	ldd	r23, Z+1	; 0x01
    4626:	82 81       	ldd	r24, Z+2	; 0x02
    4628:	93 81       	ldd	r25, Z+3	; 0x03
    462a:	20 e0       	ldi	r18, 0x00	; 0
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	40 e8       	ldi	r20, 0x80	; 128
    4630:	5f e3       	ldi	r21, 0x3F	; 63
    4632:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4636:	88 23       	and	r24, r24
    4638:	44 f4       	brge	.+16     	; 0x464a <main+0x3862>
		__ticks = 1;
    463a:	fe 01       	movw	r30, r28
    463c:	e5 5b       	subi	r30, 0xB5	; 181
    463e:	ff 4f       	sbci	r31, 0xFF	; 255
    4640:	81 e0       	ldi	r24, 0x01	; 1
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	91 83       	std	Z+1, r25	; 0x01
    4646:	80 83       	st	Z, r24
    4648:	65 c0       	rjmp	.+202    	; 0x4714 <main+0x392c>
	else if (__tmp > 65535)
    464a:	fe 01       	movw	r30, r28
    464c:	e3 5b       	subi	r30, 0xB3	; 179
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	60 81       	ld	r22, Z
    4652:	71 81       	ldd	r23, Z+1	; 0x01
    4654:	82 81       	ldd	r24, Z+2	; 0x02
    4656:	93 81       	ldd	r25, Z+3	; 0x03
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	3f ef       	ldi	r19, 0xFF	; 255
    465c:	4f e7       	ldi	r20, 0x7F	; 127
    465e:	57 e4       	ldi	r21, 0x47	; 71
    4660:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4664:	18 16       	cp	r1, r24
    4666:	0c f0       	brlt	.+2      	; 0x466a <main+0x3882>
    4668:	44 c0       	rjmp	.+136    	; 0x46f2 <main+0x390a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    466a:	fe 01       	movw	r30, r28
    466c:	ef 5a       	subi	r30, 0xAF	; 175
    466e:	ff 4f       	sbci	r31, 0xFF	; 255
    4670:	60 81       	ld	r22, Z
    4672:	71 81       	ldd	r23, Z+1	; 0x01
    4674:	82 81       	ldd	r24, Z+2	; 0x02
    4676:	93 81       	ldd	r25, Z+3	; 0x03
    4678:	20 e0       	ldi	r18, 0x00	; 0
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	40 e2       	ldi	r20, 0x20	; 32
    467e:	51 e4       	ldi	r21, 0x41	; 65
    4680:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	8e 01       	movw	r16, r28
    468a:	05 5b       	subi	r16, 0xB5	; 181
    468c:	1f 4f       	sbci	r17, 0xFF	; 255
    468e:	bc 01       	movw	r22, r24
    4690:	cd 01       	movw	r24, r26
    4692:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4696:	dc 01       	movw	r26, r24
    4698:	cb 01       	movw	r24, r22
    469a:	f8 01       	movw	r30, r16
    469c:	91 83       	std	Z+1, r25	; 0x01
    469e:	80 83       	st	Z, r24
    46a0:	1f c0       	rjmp	.+62     	; 0x46e0 <main+0x38f8>
    46a2:	fe 01       	movw	r30, r28
    46a4:	e7 5b       	subi	r30, 0xB7	; 183
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	88 ec       	ldi	r24, 0xC8	; 200
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	91 83       	std	Z+1, r25	; 0x01
    46ae:	80 83       	st	Z, r24
    46b0:	fe 01       	movw	r30, r28
    46b2:	e7 5b       	subi	r30, 0xB7	; 183
    46b4:	ff 4f       	sbci	r31, 0xFF	; 255
    46b6:	80 81       	ld	r24, Z
    46b8:	91 81       	ldd	r25, Z+1	; 0x01
    46ba:	01 97       	sbiw	r24, 0x01	; 1
    46bc:	f1 f7       	brne	.-4      	; 0x46ba <main+0x38d2>
    46be:	fe 01       	movw	r30, r28
    46c0:	e7 5b       	subi	r30, 0xB7	; 183
    46c2:	ff 4f       	sbci	r31, 0xFF	; 255
    46c4:	91 83       	std	Z+1, r25	; 0x01
    46c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c8:	de 01       	movw	r26, r28
    46ca:	a5 5b       	subi	r26, 0xB5	; 181
    46cc:	bf 4f       	sbci	r27, 0xFF	; 255
    46ce:	fe 01       	movw	r30, r28
    46d0:	e5 5b       	subi	r30, 0xB5	; 181
    46d2:	ff 4f       	sbci	r31, 0xFF	; 255
    46d4:	80 81       	ld	r24, Z
    46d6:	91 81       	ldd	r25, Z+1	; 0x01
    46d8:	01 97       	sbiw	r24, 0x01	; 1
    46da:	11 96       	adiw	r26, 0x01	; 1
    46dc:	9c 93       	st	X, r25
    46de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46e0:	fe 01       	movw	r30, r28
    46e2:	e5 5b       	subi	r30, 0xB5	; 181
    46e4:	ff 4f       	sbci	r31, 0xFF	; 255
    46e6:	80 81       	ld	r24, Z
    46e8:	91 81       	ldd	r25, Z+1	; 0x01
    46ea:	00 97       	sbiw	r24, 0x00	; 0
    46ec:	d1 f6       	brne	.-76     	; 0x46a2 <main+0x38ba>
    46ee:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46f2:	8e 01       	movw	r16, r28
    46f4:	05 5b       	subi	r16, 0xB5	; 181
    46f6:	1f 4f       	sbci	r17, 0xFF	; 255
    46f8:	fe 01       	movw	r30, r28
    46fa:	e3 5b       	subi	r30, 0xB3	; 179
    46fc:	ff 4f       	sbci	r31, 0xFF	; 255
    46fe:	60 81       	ld	r22, Z
    4700:	71 81       	ldd	r23, Z+1	; 0x01
    4702:	82 81       	ldd	r24, Z+2	; 0x02
    4704:	93 81       	ldd	r25, Z+3	; 0x03
    4706:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	f8 01       	movw	r30, r16
    4710:	91 83       	std	Z+1, r25	; 0x01
    4712:	80 83       	st	Z, r24
    4714:	de 01       	movw	r26, r28
    4716:	a9 5b       	subi	r26, 0xB9	; 185
    4718:	bf 4f       	sbci	r27, 0xFF	; 255
    471a:	fe 01       	movw	r30, r28
    471c:	e5 5b       	subi	r30, 0xB5	; 181
    471e:	ff 4f       	sbci	r31, 0xFF	; 255
    4720:	80 81       	ld	r24, Z
    4722:	91 81       	ldd	r25, Z+1	; 0x01
    4724:	11 96       	adiw	r26, 0x01	; 1
    4726:	9c 93       	st	X, r25
    4728:	8e 93       	st	-X, r24
    472a:	fe 01       	movw	r30, r28
    472c:	e9 5b       	subi	r30, 0xB9	; 185
    472e:	ff 4f       	sbci	r31, 0xFF	; 255
    4730:	80 81       	ld	r24, Z
    4732:	91 81       	ldd	r25, Z+1	; 0x01
    4734:	01 97       	sbiw	r24, 0x01	; 1
    4736:	f1 f7       	brne	.-4      	; 0x4734 <main+0x394c>
    4738:	fe 01       	movw	r30, r28
    473a:	e9 5b       	subi	r30, 0xB9	; 185
    473c:	ff 4f       	sbci	r31, 0xFF	; 255
    473e:	91 83       	std	Z+1, r25	; 0x01
    4740:	80 83       	st	Z, r24
    4742:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
            }

            break;

        case MANUAL_MENU:
            LCD_VidClearScreen();
    4746:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
            if (Local_u8Chooser == FAN)
    474a:	fe 01       	movw	r30, r28
    474c:	e5 5e       	subi	r30, 0xE5	; 229
    474e:	fd 4f       	sbci	r31, 0xFD	; 253
    4750:	80 81       	ld	r24, Z
    4752:	84 30       	cpi	r24, 0x04	; 4
    4754:	29 f4       	brne	.+10     	; 0x4760 <main+0x3978>
            {
                LCD_VidSendString("Fan");
    4756:	80 e5       	ldi	r24, 0x50	; 80
    4758:	91 e0       	ldi	r25, 0x01	; 1
    475a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    475e:	0d c0       	rjmp	.+26     	; 0x477a <main+0x3992>
            }
            else
            {
                LCD_VidSendString("Room");
    4760:	82 e1       	ldi	r24, 0x12	; 18
    4762:	92 e0       	ldi	r25, 0x02	; 2
    4764:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
                LCD_VidIntegerToString(Local_u8Chooser + 1);
    4768:	fe 01       	movw	r30, r28
    476a:	e5 5e       	subi	r30, 0xE5	; 229
    476c:	fd 4f       	sbci	r31, 0xFD	; 253
    476e:	80 81       	ld	r24, Z
    4770:	88 2f       	mov	r24, r24
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	01 96       	adiw	r24, 0x01	; 1
    4776:	0e 94 33 3a 	call	0x7466	; 0x7466 <LCD_VidIntegerToString>
            }
            LCD_VidSendString(" S: ");
    477a:	87 e1       	ldi	r24, 0x17	; 23
    477c:	92 e0       	ldi	r25, 0x02	; 2
    477e:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>

            UART_VidSendByte(ROOM1_STATUS + Local_u8Chooser);
    4782:	fe 01       	movw	r30, r28
    4784:	e5 5e       	subi	r30, 0xE5	; 229
    4786:	fd 4f       	sbci	r31, 0xFD	; 253
    4788:	80 81       	ld	r24, Z
    478a:	85 5f       	subi	r24, 0xF5	; 245
    478c:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>
            Local_u8Response = UART_u8ReceiveData();
    4790:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <UART_u8ReceiveData>
    4794:	fe 01       	movw	r30, r28
    4796:	e4 5e       	subi	r30, 0xE4	; 228
    4798:	fd 4f       	sbci	r31, 0xFD	; 253
    479a:	80 83       	st	Z, r24

            if (ON_STATUS == Local_u8Response)
    479c:	fe 01       	movw	r30, r28
    479e:	e4 5e       	subi	r30, 0xE4	; 228
    47a0:	fd 4f       	sbci	r31, 0xFD	; 253
    47a2:	80 81       	ld	r24, Z
    47a4:	81 30       	cpi	r24, 0x01	; 1
    47a6:	29 f4       	brne	.+10     	; 0x47b2 <main+0x39ca>
                LCD_VidSendString("On");
    47a8:	8c e1       	ldi	r24, 0x1C	; 28
    47aa:	92 e0       	ldi	r25, 0x02	; 2
    47ac:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    47b0:	0f c0       	rjmp	.+30     	; 0x47d0 <main+0x39e8>
            else if (OFF_STATUS == Local_u8Response)
    47b2:	fe 01       	movw	r30, r28
    47b4:	e4 5e       	subi	r30, 0xE4	; 228
    47b6:	fd 4f       	sbci	r31, 0xFD	; 253
    47b8:	80 81       	ld	r24, Z
    47ba:	88 23       	and	r24, r24
    47bc:	29 f4       	brne	.+10     	; 0x47c8 <main+0x39e0>
                LCD_VidSendString("Off");
    47be:	8f e1       	ldi	r24, 0x1F	; 31
    47c0:	92 e0       	ldi	r25, 0x02	; 2
    47c2:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    47c6:	04 c0       	rjmp	.+8      	; 0x47d0 <main+0x39e8>
            else
                LCD_VidSendString("ERROR");
    47c8:	82 eb       	ldi	r24, 0xB2	; 178
    47ca:	91 e0       	ldi	r25, 0x01	; 1
    47cc:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>

            LCD_VidSendString_XY("1.On   2.Off", 1, 0);
    47d0:	83 e2       	ldi	r24, 0x23	; 35
    47d2:	92 e0       	ldi	r25, 0x02	; 2
    47d4:	61 e0       	ldi	r22, 0x01	; 1
    47d6:	40 e0       	ldi	r20, 0x00	; 0
    47d8:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
            WaitForKey(&Local_u8KeyPressed);
    47dc:	ce 01       	movw	r24, r28
    47de:	82 5e       	subi	r24, 0xE2	; 226
    47e0:	9d 4f       	sbci	r25, 0xFD	; 253
    47e2:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <WaitForKey>

            if (SELECT_ON == Local_u8KeyPressed)
    47e6:	fe 01       	movw	r30, r28
    47e8:	e2 5e       	subi	r30, 0xE2	; 226
    47ea:	fd 4f       	sbci	r31, 0xFD	; 253
    47ec:	80 81       	ld	r24, Z
    47ee:	81 33       	cpi	r24, 0x31	; 49
    47f0:	09 f0       	breq	.+2      	; 0x47f4 <main+0x3a0c>
    47f2:	95 c0       	rjmp	.+298    	; 0x491e <main+0x3b36>
            {
                LCD_VidClearScreen();
    47f4:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("On");
    47f8:	8c e1       	ldi	r24, 0x1C	; 28
    47fa:	92 e0       	ldi	r25, 0x02	; 2
    47fc:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
                UART_VidSendByte(ROOM1_TURN_ON + Local_u8Chooser);
    4800:	fe 01       	movw	r30, r28
    4802:	e5 5e       	subi	r30, 0xE5	; 229
    4804:	fd 4f       	sbci	r31, 0xFD	; 253
    4806:	80 81       	ld	r24, Z
    4808:	8b 5e       	subi	r24, 0xEB	; 235
    480a:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>
    480e:	fe 01       	movw	r30, r28
    4810:	ed 5b       	subi	r30, 0xBD	; 189
    4812:	ff 4f       	sbci	r31, 0xFF	; 255
    4814:	80 e0       	ldi	r24, 0x00	; 0
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	a8 e4       	ldi	r26, 0x48	; 72
    481a:	b3 e4       	ldi	r27, 0x43	; 67
    481c:	80 83       	st	Z, r24
    481e:	91 83       	std	Z+1, r25	; 0x01
    4820:	a2 83       	std	Z+2, r26	; 0x02
    4822:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4824:	8e 01       	movw	r16, r28
    4826:	01 5c       	subi	r16, 0xC1	; 193
    4828:	1f 4f       	sbci	r17, 0xFF	; 255
    482a:	fe 01       	movw	r30, r28
    482c:	ed 5b       	subi	r30, 0xBD	; 189
    482e:	ff 4f       	sbci	r31, 0xFF	; 255
    4830:	60 81       	ld	r22, Z
    4832:	71 81       	ldd	r23, Z+1	; 0x01
    4834:	82 81       	ldd	r24, Z+2	; 0x02
    4836:	93 81       	ldd	r25, Z+3	; 0x03
    4838:	20 e0       	ldi	r18, 0x00	; 0
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	4a ef       	ldi	r20, 0xFA	; 250
    483e:	54 e4       	ldi	r21, 0x44	; 68
    4840:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	f8 01       	movw	r30, r16
    484a:	80 83       	st	Z, r24
    484c:	91 83       	std	Z+1, r25	; 0x01
    484e:	a2 83       	std	Z+2, r26	; 0x02
    4850:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4852:	fe 01       	movw	r30, r28
    4854:	ff 96       	adiw	r30, 0x3f	; 63
    4856:	60 81       	ld	r22, Z
    4858:	71 81       	ldd	r23, Z+1	; 0x01
    485a:	82 81       	ldd	r24, Z+2	; 0x02
    485c:	93 81       	ldd	r25, Z+3	; 0x03
    485e:	20 e0       	ldi	r18, 0x00	; 0
    4860:	30 e0       	ldi	r19, 0x00	; 0
    4862:	40 e8       	ldi	r20, 0x80	; 128
    4864:	5f e3       	ldi	r21, 0x3F	; 63
    4866:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    486a:	88 23       	and	r24, r24
    486c:	2c f4       	brge	.+10     	; 0x4878 <main+0x3a90>
		__ticks = 1;
    486e:	81 e0       	ldi	r24, 0x01	; 1
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	9e af       	std	Y+62, r25	; 0x3e
    4874:	8d af       	std	Y+61, r24	; 0x3d
    4876:	47 c0       	rjmp	.+142    	; 0x4906 <main+0x3b1e>
	else if (__tmp > 65535)
    4878:	fe 01       	movw	r30, r28
    487a:	ff 96       	adiw	r30, 0x3f	; 63
    487c:	60 81       	ld	r22, Z
    487e:	71 81       	ldd	r23, Z+1	; 0x01
    4880:	82 81       	ldd	r24, Z+2	; 0x02
    4882:	93 81       	ldd	r25, Z+3	; 0x03
    4884:	20 e0       	ldi	r18, 0x00	; 0
    4886:	3f ef       	ldi	r19, 0xFF	; 255
    4888:	4f e7       	ldi	r20, 0x7F	; 127
    488a:	57 e4       	ldi	r21, 0x47	; 71
    488c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4890:	18 16       	cp	r1, r24
    4892:	6c f5       	brge	.+90     	; 0x48ee <main+0x3b06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4894:	fe 01       	movw	r30, r28
    4896:	ed 5b       	subi	r30, 0xBD	; 189
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	60 81       	ld	r22, Z
    489c:	71 81       	ldd	r23, Z+1	; 0x01
    489e:	82 81       	ldd	r24, Z+2	; 0x02
    48a0:	93 81       	ldd	r25, Z+3	; 0x03
    48a2:	20 e0       	ldi	r18, 0x00	; 0
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	40 e2       	ldi	r20, 0x20	; 32
    48a8:	51 e4       	ldi	r21, 0x41	; 65
    48aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    48ae:	dc 01       	movw	r26, r24
    48b0:	cb 01       	movw	r24, r22
    48b2:	bc 01       	movw	r22, r24
    48b4:	cd 01       	movw	r24, r26
    48b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    48ba:	dc 01       	movw	r26, r24
    48bc:	cb 01       	movw	r24, r22
    48be:	9e af       	std	Y+62, r25	; 0x3e
    48c0:	8d af       	std	Y+61, r24	; 0x3d
    48c2:	0f c0       	rjmp	.+30     	; 0x48e2 <main+0x3afa>
    48c4:	88 ec       	ldi	r24, 0xC8	; 200
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	9c af       	std	Y+60, r25	; 0x3c
    48ca:	8b af       	std	Y+59, r24	; 0x3b
    48cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    48ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    48d0:	01 97       	sbiw	r24, 0x01	; 1
    48d2:	f1 f7       	brne	.-4      	; 0x48d0 <main+0x3ae8>
    48d4:	9c af       	std	Y+60, r25	; 0x3c
    48d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    48da:	9e ad       	ldd	r25, Y+62	; 0x3e
    48dc:	01 97       	sbiw	r24, 0x01	; 1
    48de:	9e af       	std	Y+62, r25	; 0x3e
    48e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    48e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    48e6:	00 97       	sbiw	r24, 0x00	; 0
    48e8:	69 f7       	brne	.-38     	; 0x48c4 <main+0x3adc>
    48ea:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ee:	fe 01       	movw	r30, r28
    48f0:	ff 96       	adiw	r30, 0x3f	; 63
    48f2:	60 81       	ld	r22, Z
    48f4:	71 81       	ldd	r23, Z+1	; 0x01
    48f6:	82 81       	ldd	r24, Z+2	; 0x02
    48f8:	93 81       	ldd	r25, Z+3	; 0x03
    48fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    48fe:	dc 01       	movw	r26, r24
    4900:	cb 01       	movw	r24, r22
    4902:	9e af       	std	Y+62, r25	; 0x3e
    4904:	8d af       	std	Y+61, r24	; 0x3d
    4906:	8d ad       	ldd	r24, Y+61	; 0x3d
    4908:	9e ad       	ldd	r25, Y+62	; 0x3e
    490a:	9a af       	std	Y+58, r25	; 0x3a
    490c:	89 af       	std	Y+57, r24	; 0x39
    490e:	89 ad       	ldd	r24, Y+57	; 0x39
    4910:	9a ad       	ldd	r25, Y+58	; 0x3a
    4912:	01 97       	sbiw	r24, 0x01	; 1
    4914:	f1 f7       	brne	.-4      	; 0x4912 <main+0x3b2a>
    4916:	9a af       	std	Y+58, r25	; 0x3a
    4918:	89 af       	std	Y+57, r24	; 0x39
    491a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>

                _delay_ms(DEFUALT_DELAY_TIME);
            }
            else if (SELECT_OFF == Local_u8KeyPressed)
    491e:	fe 01       	movw	r30, r28
    4920:	e2 5e       	subi	r30, 0xE2	; 226
    4922:	fd 4f       	sbci	r31, 0xFD	; 253
    4924:	80 81       	ld	r24, Z
    4926:	82 33       	cpi	r24, 0x32	; 50
    4928:	09 f0       	breq	.+2      	; 0x492c <main+0x3b44>
    492a:	82 c0       	rjmp	.+260    	; 0x4a30 <main+0x3c48>
            {
                LCD_VidClearScreen();
    492c:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Off");
    4930:	8f e1       	ldi	r24, 0x1F	; 31
    4932:	92 e0       	ldi	r25, 0x02	; 2
    4934:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
                UART_VidSendByte(ROOM1_TURN_OFF + Local_u8Chooser);
    4938:	fe 01       	movw	r30, r28
    493a:	e5 5e       	subi	r30, 0xE5	; 229
    493c:	fd 4f       	sbci	r31, 0xFD	; 253
    493e:	80 81       	ld	r24, Z
    4940:	81 5e       	subi	r24, 0xE1	; 225
    4942:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	a8 e4       	ldi	r26, 0x48	; 72
    494c:	b3 e4       	ldi	r27, 0x43	; 67
    494e:	8d ab       	std	Y+53, r24	; 0x35
    4950:	9e ab       	std	Y+54, r25	; 0x36
    4952:	af ab       	std	Y+55, r26	; 0x37
    4954:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4956:	6d a9       	ldd	r22, Y+53	; 0x35
    4958:	7e a9       	ldd	r23, Y+54	; 0x36
    495a:	8f a9       	ldd	r24, Y+55	; 0x37
    495c:	98 ad       	ldd	r25, Y+56	; 0x38
    495e:	20 e0       	ldi	r18, 0x00	; 0
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	4a ef       	ldi	r20, 0xFA	; 250
    4964:	54 e4       	ldi	r21, 0x44	; 68
    4966:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    496a:	dc 01       	movw	r26, r24
    496c:	cb 01       	movw	r24, r22
    496e:	89 ab       	std	Y+49, r24	; 0x31
    4970:	9a ab       	std	Y+50, r25	; 0x32
    4972:	ab ab       	std	Y+51, r26	; 0x33
    4974:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4976:	69 a9       	ldd	r22, Y+49	; 0x31
    4978:	7a a9       	ldd	r23, Y+50	; 0x32
    497a:	8b a9       	ldd	r24, Y+51	; 0x33
    497c:	9c a9       	ldd	r25, Y+52	; 0x34
    497e:	20 e0       	ldi	r18, 0x00	; 0
    4980:	30 e0       	ldi	r19, 0x00	; 0
    4982:	40 e8       	ldi	r20, 0x80	; 128
    4984:	5f e3       	ldi	r21, 0x3F	; 63
    4986:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    498a:	88 23       	and	r24, r24
    498c:	2c f4       	brge	.+10     	; 0x4998 <main+0x3bb0>
		__ticks = 1;
    498e:	81 e0       	ldi	r24, 0x01	; 1
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	98 ab       	std	Y+48, r25	; 0x30
    4994:	8f a7       	std	Y+47, r24	; 0x2f
    4996:	40 c0       	rjmp	.+128    	; 0x4a18 <main+0x3c30>
	else if (__tmp > 65535)
    4998:	69 a9       	ldd	r22, Y+49	; 0x31
    499a:	7a a9       	ldd	r23, Y+50	; 0x32
    499c:	8b a9       	ldd	r24, Y+51	; 0x33
    499e:	9c a9       	ldd	r25, Y+52	; 0x34
    49a0:	20 e0       	ldi	r18, 0x00	; 0
    49a2:	3f ef       	ldi	r19, 0xFF	; 255
    49a4:	4f e7       	ldi	r20, 0x7F	; 127
    49a6:	57 e4       	ldi	r21, 0x47	; 71
    49a8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    49ac:	18 16       	cp	r1, r24
    49ae:	54 f5       	brge	.+84     	; 0x4a04 <main+0x3c1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49b0:	6d a9       	ldd	r22, Y+53	; 0x35
    49b2:	7e a9       	ldd	r23, Y+54	; 0x36
    49b4:	8f a9       	ldd	r24, Y+55	; 0x37
    49b6:	98 ad       	ldd	r25, Y+56	; 0x38
    49b8:	20 e0       	ldi	r18, 0x00	; 0
    49ba:	30 e0       	ldi	r19, 0x00	; 0
    49bc:	40 e2       	ldi	r20, 0x20	; 32
    49be:	51 e4       	ldi	r21, 0x41	; 65
    49c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    49c4:	dc 01       	movw	r26, r24
    49c6:	cb 01       	movw	r24, r22
    49c8:	bc 01       	movw	r22, r24
    49ca:	cd 01       	movw	r24, r26
    49cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	98 ab       	std	Y+48, r25	; 0x30
    49d6:	8f a7       	std	Y+47, r24	; 0x2f
    49d8:	0f c0       	rjmp	.+30     	; 0x49f8 <main+0x3c10>
    49da:	88 ec       	ldi	r24, 0xC8	; 200
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	9e a7       	std	Y+46, r25	; 0x2e
    49e0:	8d a7       	std	Y+45, r24	; 0x2d
    49e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    49e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    49e6:	01 97       	sbiw	r24, 0x01	; 1
    49e8:	f1 f7       	brne	.-4      	; 0x49e6 <main+0x3bfe>
    49ea:	9e a7       	std	Y+46, r25	; 0x2e
    49ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    49f0:	98 a9       	ldd	r25, Y+48	; 0x30
    49f2:	01 97       	sbiw	r24, 0x01	; 1
    49f4:	98 ab       	std	Y+48, r25	; 0x30
    49f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    49fa:	98 a9       	ldd	r25, Y+48	; 0x30
    49fc:	00 97       	sbiw	r24, 0x00	; 0
    49fe:	69 f7       	brne	.-38     	; 0x49da <main+0x3bf2>
    4a00:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a04:	69 a9       	ldd	r22, Y+49	; 0x31
    4a06:	7a a9       	ldd	r23, Y+50	; 0x32
    4a08:	8b a9       	ldd	r24, Y+51	; 0x33
    4a0a:	9c a9       	ldd	r25, Y+52	; 0x34
    4a0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a10:	dc 01       	movw	r26, r24
    4a12:	cb 01       	movw	r24, r22
    4a14:	98 ab       	std	Y+48, r25	; 0x30
    4a16:	8f a7       	std	Y+47, r24	; 0x2f
    4a18:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    4a1c:	9c a7       	std	Y+44, r25	; 0x2c
    4a1e:	8b a7       	std	Y+43, r24	; 0x2b
    4a20:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a22:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a24:	01 97       	sbiw	r24, 0x01	; 1
    4a26:	f1 f7       	brne	.-4      	; 0x4a24 <main+0x3c3c>
    4a28:	9c a7       	std	Y+44, r25	; 0x2c
    4a2a:	8b a7       	std	Y+43, r24	; 0x2b
    4a2c:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>


                _delay_ms(DEFUALT_DELAY_TIME);
            }
            else if (SELECT_RETURN == Local_u8KeyPressed)
    4a30:	fe 01       	movw	r30, r28
    4a32:	e2 5e       	subi	r30, 0xE2	; 226
    4a34:	fd 4f       	sbci	r31, 0xFD	; 253
    4a36:	80 81       	ld	r24, Z
    4a38:	80 33       	cpi	r24, 0x30	; 48
    4a3a:	09 f0       	breq	.+2      	; 0x4a3e <main+0x3c56>
    4a3c:	7f c0       	rjmp	.+254    	; 0x4b3c <main+0x3d54>
            {
                LCD_VidClearScreen();
    4a3e:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Return");
    4a42:	86 e9       	ldi	r24, 0x96	; 150
    4a44:	91 e0       	ldi	r25, 0x01	; 1
    4a46:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
    4a4a:	80 e0       	ldi	r24, 0x00	; 0
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	a8 e4       	ldi	r26, 0x48	; 72
    4a50:	b3 e4       	ldi	r27, 0x43	; 67
    4a52:	8f a3       	std	Y+39, r24	; 0x27
    4a54:	98 a7       	std	Y+40, r25	; 0x28
    4a56:	a9 a7       	std	Y+41, r26	; 0x29
    4a58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a5a:	6f a1       	ldd	r22, Y+39	; 0x27
    4a5c:	78 a5       	ldd	r23, Y+40	; 0x28
    4a5e:	89 a5       	ldd	r24, Y+41	; 0x29
    4a60:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	4a ef       	ldi	r20, 0xFA	; 250
    4a68:	54 e4       	ldi	r21, 0x44	; 68
    4a6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a6e:	dc 01       	movw	r26, r24
    4a70:	cb 01       	movw	r24, r22
    4a72:	8b a3       	std	Y+35, r24	; 0x23
    4a74:	9c a3       	std	Y+36, r25	; 0x24
    4a76:	ad a3       	std	Y+37, r26	; 0x25
    4a78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a7a:	6b a1       	ldd	r22, Y+35	; 0x23
    4a7c:	7c a1       	ldd	r23, Y+36	; 0x24
    4a7e:	8d a1       	ldd	r24, Y+37	; 0x25
    4a80:	9e a1       	ldd	r25, Y+38	; 0x26
    4a82:	20 e0       	ldi	r18, 0x00	; 0
    4a84:	30 e0       	ldi	r19, 0x00	; 0
    4a86:	40 e8       	ldi	r20, 0x80	; 128
    4a88:	5f e3       	ldi	r21, 0x3F	; 63
    4a8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4a8e:	88 23       	and	r24, r24
    4a90:	2c f4       	brge	.+10     	; 0x4a9c <main+0x3cb4>
		__ticks = 1;
    4a92:	81 e0       	ldi	r24, 0x01	; 1
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	9a a3       	std	Y+34, r25	; 0x22
    4a98:	89 a3       	std	Y+33, r24	; 0x21
    4a9a:	3f c0       	rjmp	.+126    	; 0x4b1a <main+0x3d32>
	else if (__tmp > 65535)
    4a9c:	6b a1       	ldd	r22, Y+35	; 0x23
    4a9e:	7c a1       	ldd	r23, Y+36	; 0x24
    4aa0:	8d a1       	ldd	r24, Y+37	; 0x25
    4aa2:	9e a1       	ldd	r25, Y+38	; 0x26
    4aa4:	20 e0       	ldi	r18, 0x00	; 0
    4aa6:	3f ef       	ldi	r19, 0xFF	; 255
    4aa8:	4f e7       	ldi	r20, 0x7F	; 127
    4aaa:	57 e4       	ldi	r21, 0x47	; 71
    4aac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4ab0:	18 16       	cp	r1, r24
    4ab2:	4c f5       	brge	.+82     	; 0x4b06 <main+0x3d1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ab4:	6f a1       	ldd	r22, Y+39	; 0x27
    4ab6:	78 a5       	ldd	r23, Y+40	; 0x28
    4ab8:	89 a5       	ldd	r24, Y+41	; 0x29
    4aba:	9a a5       	ldd	r25, Y+42	; 0x2a
    4abc:	20 e0       	ldi	r18, 0x00	; 0
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	40 e2       	ldi	r20, 0x20	; 32
    4ac2:	51 e4       	ldi	r21, 0x41	; 65
    4ac4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ac8:	dc 01       	movw	r26, r24
    4aca:	cb 01       	movw	r24, r22
    4acc:	bc 01       	movw	r22, r24
    4ace:	cd 01       	movw	r24, r26
    4ad0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ad4:	dc 01       	movw	r26, r24
    4ad6:	cb 01       	movw	r24, r22
    4ad8:	9a a3       	std	Y+34, r25	; 0x22
    4ada:	89 a3       	std	Y+33, r24	; 0x21
    4adc:	0f c0       	rjmp	.+30     	; 0x4afc <main+0x3d14>
    4ade:	88 ec       	ldi	r24, 0xC8	; 200
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	98 a3       	std	Y+32, r25	; 0x20
    4ae4:	8f 8f       	std	Y+31, r24	; 0x1f
    4ae6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ae8:	98 a1       	ldd	r25, Y+32	; 0x20
    4aea:	01 97       	sbiw	r24, 0x01	; 1
    4aec:	f1 f7       	brne	.-4      	; 0x4aea <main+0x3d02>
    4aee:	98 a3       	std	Y+32, r25	; 0x20
    4af0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4af2:	89 a1       	ldd	r24, Y+33	; 0x21
    4af4:	9a a1       	ldd	r25, Y+34	; 0x22
    4af6:	01 97       	sbiw	r24, 0x01	; 1
    4af8:	9a a3       	std	Y+34, r25	; 0x22
    4afa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4afc:	89 a1       	ldd	r24, Y+33	; 0x21
    4afe:	9a a1       	ldd	r25, Y+34	; 0x22
    4b00:	00 97       	sbiw	r24, 0x00	; 0
    4b02:	69 f7       	brne	.-38     	; 0x4ade <main+0x3cf6>
    4b04:	14 c0       	rjmp	.+40     	; 0x4b2e <main+0x3d46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b06:	6b a1       	ldd	r22, Y+35	; 0x23
    4b08:	7c a1       	ldd	r23, Y+36	; 0x24
    4b0a:	8d a1       	ldd	r24, Y+37	; 0x25
    4b0c:	9e a1       	ldd	r25, Y+38	; 0x26
    4b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b12:	dc 01       	movw	r26, r24
    4b14:	cb 01       	movw	r24, r22
    4b16:	9a a3       	std	Y+34, r25	; 0x22
    4b18:	89 a3       	std	Y+33, r24	; 0x21
    4b1a:	89 a1       	ldd	r24, Y+33	; 0x21
    4b1c:	9a a1       	ldd	r25, Y+34	; 0x22
    4b1e:	9e 8f       	std	Y+30, r25	; 0x1e
    4b20:	8d 8f       	std	Y+29, r24	; 0x1d
    4b22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b26:	01 97       	sbiw	r24, 0x01	; 1
    4b28:	f1 f7       	brne	.-4      	; 0x4b26 <main+0x3d3e>
    4b2a:	9e 8f       	std	Y+30, r25	; 0x1e
    4b2c:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(DEFUALT_DELAY_TIME);

                Local_u8ShowMenu = AUTO_MANUAL_MENU;
    4b2e:	fe 01       	movw	r30, r28
    4b30:	e3 5e       	subi	r30, 0xE3	; 227
    4b32:	fd 4f       	sbci	r31, 0xFD	; 253
    4b34:	84 e1       	ldi	r24, 0x14	; 20
    4b36:	80 83       	st	Z, r24
    4b38:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
            }
            else
            {
                LCD_VidClearScreen();
    4b3c:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
                LCD_VidSendString("Wrong Input");
    4b40:	8a e5       	ldi	r24, 0x5A	; 90
    4b42:	91 e0       	ldi	r25, 0x01	; 1
    4b44:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
                LCD_VidSendString_XY("Try Again", 1, 0);
    4b48:	86 e6       	ldi	r24, 0x66	; 102
    4b4a:	91 e0       	ldi	r25, 0x01	; 1
    4b4c:	61 e0       	ldi	r22, 0x01	; 1
    4b4e:	40 e0       	ldi	r20, 0x00	; 0
    4b50:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    4b54:	80 e0       	ldi	r24, 0x00	; 0
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	a8 e4       	ldi	r26, 0x48	; 72
    4b5a:	b3 e4       	ldi	r27, 0x43	; 67
    4b5c:	89 8f       	std	Y+25, r24	; 0x19
    4b5e:	9a 8f       	std	Y+26, r25	; 0x1a
    4b60:	ab 8f       	std	Y+27, r26	; 0x1b
    4b62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b64:	69 8d       	ldd	r22, Y+25	; 0x19
    4b66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b6c:	20 e0       	ldi	r18, 0x00	; 0
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	4a ef       	ldi	r20, 0xFA	; 250
    4b72:	54 e4       	ldi	r21, 0x44	; 68
    4b74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4b78:	dc 01       	movw	r26, r24
    4b7a:	cb 01       	movw	r24, r22
    4b7c:	8d 8b       	std	Y+21, r24	; 0x15
    4b7e:	9e 8b       	std	Y+22, r25	; 0x16
    4b80:	af 8b       	std	Y+23, r26	; 0x17
    4b82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b84:	6d 89       	ldd	r22, Y+21	; 0x15
    4b86:	7e 89       	ldd	r23, Y+22	; 0x16
    4b88:	8f 89       	ldd	r24, Y+23	; 0x17
    4b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b8c:	20 e0       	ldi	r18, 0x00	; 0
    4b8e:	30 e0       	ldi	r19, 0x00	; 0
    4b90:	40 e8       	ldi	r20, 0x80	; 128
    4b92:	5f e3       	ldi	r21, 0x3F	; 63
    4b94:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4b98:	88 23       	and	r24, r24
    4b9a:	2c f4       	brge	.+10     	; 0x4ba6 <main+0x3dbe>
		__ticks = 1;
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	9c 8b       	std	Y+20, r25	; 0x14
    4ba2:	8b 8b       	std	Y+19, r24	; 0x13
    4ba4:	40 c0       	rjmp	.+128    	; 0x4c26 <main+0x3e3e>
	else if (__tmp > 65535)
    4ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    4baa:	8f 89       	ldd	r24, Y+23	; 0x17
    4bac:	98 8d       	ldd	r25, Y+24	; 0x18
    4bae:	20 e0       	ldi	r18, 0x00	; 0
    4bb0:	3f ef       	ldi	r19, 0xFF	; 255
    4bb2:	4f e7       	ldi	r20, 0x7F	; 127
    4bb4:	57 e4       	ldi	r21, 0x47	; 71
    4bb6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4bba:	18 16       	cp	r1, r24
    4bbc:	54 f5       	brge	.+84     	; 0x4c12 <main+0x3e2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bbe:	69 8d       	ldd	r22, Y+25	; 0x19
    4bc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bc6:	20 e0       	ldi	r18, 0x00	; 0
    4bc8:	30 e0       	ldi	r19, 0x00	; 0
    4bca:	40 e2       	ldi	r20, 0x20	; 32
    4bcc:	51 e4       	ldi	r21, 0x41	; 65
    4bce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	cb 01       	movw	r24, r22
    4bd6:	bc 01       	movw	r22, r24
    4bd8:	cd 01       	movw	r24, r26
    4bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4bde:	dc 01       	movw	r26, r24
    4be0:	cb 01       	movw	r24, r22
    4be2:	9c 8b       	std	Y+20, r25	; 0x14
    4be4:	8b 8b       	std	Y+19, r24	; 0x13
    4be6:	0f c0       	rjmp	.+30     	; 0x4c06 <main+0x3e1e>
    4be8:	88 ec       	ldi	r24, 0xC8	; 200
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	9a 8b       	std	Y+18, r25	; 0x12
    4bee:	89 8b       	std	Y+17, r24	; 0x11
    4bf0:	89 89       	ldd	r24, Y+17	; 0x11
    4bf2:	9a 89       	ldd	r25, Y+18	; 0x12
    4bf4:	01 97       	sbiw	r24, 0x01	; 1
    4bf6:	f1 f7       	brne	.-4      	; 0x4bf4 <main+0x3e0c>
    4bf8:	9a 8b       	std	Y+18, r25	; 0x12
    4bfa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    4bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    4c00:	01 97       	sbiw	r24, 0x01	; 1
    4c02:	9c 8b       	std	Y+20, r25	; 0x14
    4c04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c06:	8b 89       	ldd	r24, Y+19	; 0x13
    4c08:	9c 89       	ldd	r25, Y+20	; 0x14
    4c0a:	00 97       	sbiw	r24, 0x00	; 0
    4c0c:	69 f7       	brne	.-38     	; 0x4be8 <main+0x3e00>
    4c0e:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c12:	6d 89       	ldd	r22, Y+21	; 0x15
    4c14:	7e 89       	ldd	r23, Y+22	; 0x16
    4c16:	8f 89       	ldd	r24, Y+23	; 0x17
    4c18:	98 8d       	ldd	r25, Y+24	; 0x18
    4c1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c1e:	dc 01       	movw	r26, r24
    4c20:	cb 01       	movw	r24, r22
    4c22:	9c 8b       	std	Y+20, r25	; 0x14
    4c24:	8b 8b       	std	Y+19, r24	; 0x13
    4c26:	8b 89       	ldd	r24, Y+19	; 0x13
    4c28:	9c 89       	ldd	r25, Y+20	; 0x14
    4c2a:	98 8b       	std	Y+16, r25	; 0x10
    4c2c:	8f 87       	std	Y+15, r24	; 0x0f
    4c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c30:	98 89       	ldd	r25, Y+16	; 0x10
    4c32:	01 97       	sbiw	r24, 0x01	; 1
    4c34:	f1 f7       	brne	.-4      	; 0x4c32 <main+0x3e4a>
    4c36:	98 8b       	std	Y+16, r25	; 0x10
    4c38:	8f 87       	std	Y+15, r24	; 0x0f
    4c3a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>
                _delay_ms(DEFUALT_DELAY_TIME);
            }

            break;
        default:
            LCD_VidClearScreen();
    4c3e:	0e 94 1f 3b 	call	0x763e	; 0x763e <LCD_VidClearScreen>
            LCD_VidSendString("Wrong Input");
    4c42:	8a e5       	ldi	r24, 0x5A	; 90
    4c44:	91 e0       	ldi	r25, 0x01	; 1
    4c46:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
            LCD_VidSendString_XY("Try Again", 1, 0);
    4c4a:	86 e6       	ldi	r24, 0x66	; 102
    4c4c:	91 e0       	ldi	r25, 0x01	; 1
    4c4e:	61 e0       	ldi	r22, 0x01	; 1
    4c50:	40 e0       	ldi	r20, 0x00	; 0
    4c52:	0e 94 80 3a 	call	0x7500	; 0x7500 <LCD_VidSendString_XY>
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	a8 e4       	ldi	r26, 0x48	; 72
    4c5c:	b3 e4       	ldi	r27, 0x43	; 67
    4c5e:	8b 87       	std	Y+11, r24	; 0x0b
    4c60:	9c 87       	std	Y+12, r25	; 0x0c
    4c62:	ad 87       	std	Y+13, r26	; 0x0d
    4c64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c6e:	20 e0       	ldi	r18, 0x00	; 0
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	4a ef       	ldi	r20, 0xFA	; 250
    4c74:	54 e4       	ldi	r21, 0x44	; 68
    4c76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	8f 83       	std	Y+7, r24	; 0x07
    4c80:	98 87       	std	Y+8, r25	; 0x08
    4c82:	a9 87       	std	Y+9, r26	; 0x09
    4c84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c86:	6f 81       	ldd	r22, Y+7	; 0x07
    4c88:	78 85       	ldd	r23, Y+8	; 0x08
    4c8a:	89 85       	ldd	r24, Y+9	; 0x09
    4c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c8e:	20 e0       	ldi	r18, 0x00	; 0
    4c90:	30 e0       	ldi	r19, 0x00	; 0
    4c92:	40 e8       	ldi	r20, 0x80	; 128
    4c94:	5f e3       	ldi	r21, 0x3F	; 63
    4c96:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4c9a:	88 23       	and	r24, r24
    4c9c:	2c f4       	brge	.+10     	; 0x4ca8 <main+0x3ec0>
		__ticks = 1;
    4c9e:	81 e0       	ldi	r24, 0x01	; 1
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	9e 83       	std	Y+6, r25	; 0x06
    4ca4:	8d 83       	std	Y+5, r24	; 0x05
    4ca6:	3f c0       	rjmp	.+126    	; 0x4d26 <main+0x3f3e>
	else if (__tmp > 65535)
    4ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    4caa:	78 85       	ldd	r23, Y+8	; 0x08
    4cac:	89 85       	ldd	r24, Y+9	; 0x09
    4cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	3f ef       	ldi	r19, 0xFF	; 255
    4cb4:	4f e7       	ldi	r20, 0x7F	; 127
    4cb6:	57 e4       	ldi	r21, 0x47	; 71
    4cb8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4cbc:	18 16       	cp	r1, r24
    4cbe:	4c f5       	brge	.+82     	; 0x4d12 <main+0x3f2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cc8:	20 e0       	ldi	r18, 0x00	; 0
    4cca:	30 e0       	ldi	r19, 0x00	; 0
    4ccc:	40 e2       	ldi	r20, 0x20	; 32
    4cce:	51 e4       	ldi	r21, 0x41	; 65
    4cd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4cd4:	dc 01       	movw	r26, r24
    4cd6:	cb 01       	movw	r24, r22
    4cd8:	bc 01       	movw	r22, r24
    4cda:	cd 01       	movw	r24, r26
    4cdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ce0:	dc 01       	movw	r26, r24
    4ce2:	cb 01       	movw	r24, r22
    4ce4:	9e 83       	std	Y+6, r25	; 0x06
    4ce6:	8d 83       	std	Y+5, r24	; 0x05
    4ce8:	0f c0       	rjmp	.+30     	; 0x4d08 <main+0x3f20>
    4cea:	88 ec       	ldi	r24, 0xC8	; 200
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	9c 83       	std	Y+4, r25	; 0x04
    4cf0:	8b 83       	std	Y+3, r24	; 0x03
    4cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    4cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    4cf6:	01 97       	sbiw	r24, 0x01	; 1
    4cf8:	f1 f7       	brne	.-4      	; 0x4cf6 <main+0x3f0e>
    4cfa:	9c 83       	std	Y+4, r25	; 0x04
    4cfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    4d00:	9e 81       	ldd	r25, Y+6	; 0x06
    4d02:	01 97       	sbiw	r24, 0x01	; 1
    4d04:	9e 83       	std	Y+6, r25	; 0x06
    4d06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d08:	8d 81       	ldd	r24, Y+5	; 0x05
    4d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d0c:	00 97       	sbiw	r24, 0x00	; 0
    4d0e:	69 f7       	brne	.-38     	; 0x4cea <main+0x3f02>
    4d10:	14 c0       	rjmp	.+40     	; 0x4d3a <main+0x3f52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d12:	6f 81       	ldd	r22, Y+7	; 0x07
    4d14:	78 85       	ldd	r23, Y+8	; 0x08
    4d16:	89 85       	ldd	r24, Y+9	; 0x09
    4d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4d1e:	dc 01       	movw	r26, r24
    4d20:	cb 01       	movw	r24, r22
    4d22:	9e 83       	std	Y+6, r25	; 0x06
    4d24:	8d 83       	std	Y+5, r24	; 0x05
    4d26:	8d 81       	ldd	r24, Y+5	; 0x05
    4d28:	9e 81       	ldd	r25, Y+6	; 0x06
    4d2a:	9a 83       	std	Y+2, r25	; 0x02
    4d2c:	89 83       	std	Y+1, r24	; 0x01
    4d2e:	89 81       	ldd	r24, Y+1	; 0x01
    4d30:	9a 81       	ldd	r25, Y+2	; 0x02
    4d32:	01 97       	sbiw	r24, 0x01	; 1
    4d34:	f1 f7       	brne	.-4      	; 0x4d32 <main+0x3f4a>
    4d36:	9a 83       	std	Y+2, r25	; 0x02
    4d38:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(DEFUALT_DELAY_TIME);
            Local_u8ShowMenu = MAIN_MENU;
    4d3a:	fe 01       	movw	r30, r28
    4d3c:	e3 5e       	subi	r30, 0xE3	; 227
    4d3e:	fd 4f       	sbci	r31, 0xFD	; 253
    4d40:	81 e0       	ldi	r24, 0x01	; 1
    4d42:	80 83       	st	Z, r24
    4d44:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <main+0x12ea>

00004d48 <WaitForKey>:
        }
    }
}

void WaitForKey(u8 *PtrKeyPressed)
{
    4d48:	df 93       	push	r29
    4d4a:	cf 93       	push	r28
    4d4c:	00 d0       	rcall	.+0      	; 0x4d4e <WaitForKey+0x6>
    4d4e:	0f 92       	push	r0
    4d50:	cd b7       	in	r28, 0x3d	; 61
    4d52:	de b7       	in	r29, 0x3e	; 62
    4d54:	9b 83       	std	Y+3, r25	; 0x03
    4d56:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8KeyPressed = NOT_PRESSED;
    4d58:	8f ef       	ldi	r24, 0xFF	; 255
    4d5a:	89 83       	std	Y+1, r24	; 0x01
    4d5c:	03 c0       	rjmp	.+6      	; 0x4d64 <WaitForKey+0x1c>

    while (Local_u8KeyPressed == NOT_PRESSED) // repeat till the user press any key
    {
        Local_u8KeyPressed = Kpd_U8GetPressedKey(); // if the user pressed any button in keypad save the value in Local_u8KeyPressed
    4d5e:	0e 94 9c 3b 	call	0x7738	; 0x7738 <Kpd_U8GetPressedKey>
    4d62:	89 83       	std	Y+1, r24	; 0x01

void WaitForKey(u8 *PtrKeyPressed)
{
    u8 Local_u8KeyPressed = NOT_PRESSED;

    while (Local_u8KeyPressed == NOT_PRESSED) // repeat till the user press any key
    4d64:	89 81       	ldd	r24, Y+1	; 0x01
    4d66:	8f 3f       	cpi	r24, 0xFF	; 255
    4d68:	d1 f3       	breq	.-12     	; 0x4d5e <WaitForKey+0x16>
    {
        Local_u8KeyPressed = Kpd_U8GetPressedKey(); // if the user pressed any button in keypad save the value in Local_u8KeyPressed
    }

    *PtrKeyPressed = Local_u8KeyPressed;
    4d6a:	ea 81       	ldd	r30, Y+2	; 0x02
    4d6c:	fb 81       	ldd	r31, Y+3	; 0x03
    4d6e:	89 81       	ldd	r24, Y+1	; 0x01
    4d70:	80 83       	st	Z, r24
}
    4d72:	0f 90       	pop	r0
    4d74:	0f 90       	pop	r0
    4d76:	0f 90       	pop	r0
    4d78:	cf 91       	pop	r28
    4d7a:	df 91       	pop	r29
    4d7c:	08 95       	ret

00004d7e <UART_VidInit>:
#include "UART_private.h"
#include "UART_config.h"
#include "UART_interface.h"

void UART_VidInit(void)
{
    4d7e:	df 93       	push	r29
    4d80:	cf 93       	push	r28
    4d82:	cd b7       	in	r28, 0x3d	; 61
    4d84:	de b7       	in	r29, 0x3e	; 62
    // SELECT THIS REGISTER
    SET_BIT(UCSRC, UCSRC_URSEL);
    4d86:	a0 e4       	ldi	r26, 0x40	; 64
    4d88:	b0 e0       	ldi	r27, 0x00	; 0
    4d8a:	e0 e4       	ldi	r30, 0x40	; 64
    4d8c:	f0 e0       	ldi	r31, 0x00	; 0
    4d8e:	80 81       	ld	r24, Z
    4d90:	80 68       	ori	r24, 0x80	; 128
    4d92:	8c 93       	st	X, r24
    // SET  FORMAT 8 DATA, 1 STOP, NO PARITY
    SET_BIT(UCSRC, UCSRC_UCSZ0);
    4d94:	a0 e4       	ldi	r26, 0x40	; 64
    4d96:	b0 e0       	ldi	r27, 0x00	; 0
    4d98:	e0 e4       	ldi	r30, 0x40	; 64
    4d9a:	f0 e0       	ldi	r31, 0x00	; 0
    4d9c:	80 81       	ld	r24, Z
    4d9e:	82 60       	ori	r24, 0x02	; 2
    4da0:	8c 93       	st	X, r24
    SET_BIT(UCSRC, UCSRC_UCSZ1);
    4da2:	a0 e4       	ldi	r26, 0x40	; 64
    4da4:	b0 e0       	ldi	r27, 0x00	; 0
    4da6:	e0 e4       	ldi	r30, 0x40	; 64
    4da8:	f0 e0       	ldi	r31, 0x00	; 0
    4daa:	80 81       	ld	r24, Z
    4dac:	84 60       	ori	r24, 0x04	; 4
    4dae:	8c 93       	st	X, r24
    // SET BAUD RATE TO 9600
    UBRRH = (u8)(UBRR_VAL >> 8);
    4db0:	e0 e4       	ldi	r30, 0x40	; 64
    4db2:	f0 e0       	ldi	r31, 0x00	; 0
    4db4:	10 82       	st	Z, r1
    UBRRL = (u8)UBRR_VAL;
    4db6:	e9 e2       	ldi	r30, 0x29	; 41
    4db8:	f0 e0       	ldi	r31, 0x00	; 0
    4dba:	83 e3       	ldi	r24, 0x33	; 51
    4dbc:	80 83       	st	Z, r24
    // ENABLE RX & TX
    SET_BIT(UCSRB, UCSRB_RXEN);
    4dbe:	aa e2       	ldi	r26, 0x2A	; 42
    4dc0:	b0 e0       	ldi	r27, 0x00	; 0
    4dc2:	ea e2       	ldi	r30, 0x2A	; 42
    4dc4:	f0 e0       	ldi	r31, 0x00	; 0
    4dc6:	80 81       	ld	r24, Z
    4dc8:	80 61       	ori	r24, 0x10	; 16
    4dca:	8c 93       	st	X, r24
    SET_BIT(UCSRB, UCSRB_TXEN);
    4dcc:	aa e2       	ldi	r26, 0x2A	; 42
    4dce:	b0 e0       	ldi	r27, 0x00	; 0
    4dd0:	ea e2       	ldi	r30, 0x2A	; 42
    4dd2:	f0 e0       	ldi	r31, 0x00	; 0
    4dd4:	80 81       	ld	r24, Z
    4dd6:	88 60       	ori	r24, 0x08	; 8
    4dd8:	8c 93       	st	X, r24
}
    4dda:	cf 91       	pop	r28
    4ddc:	df 91       	pop	r29
    4dde:	08 95       	ret

00004de0 <UART_VidSendByte>:

void UART_VidSendByte(u8 Copy_u8Byte)
{
    4de0:	df 93       	push	r29
    4de2:	cf 93       	push	r28
    4de4:	0f 92       	push	r0
    4de6:	cd b7       	in	r28, 0x3d	; 61
    4de8:	de b7       	in	r29, 0x3e	; 62
    4dea:	89 83       	std	Y+1, r24	; 0x01
    // Polling until UDR is empty
    while (GET_BIT(UCSRA, UCSRA_UDRE) != 1)
    4dec:	eb e2       	ldi	r30, 0x2B	; 43
    4dee:	f0 e0       	ldi	r31, 0x00	; 0
    4df0:	80 81       	ld	r24, Z
    4df2:	82 95       	swap	r24
    4df4:	86 95       	lsr	r24
    4df6:	87 70       	andi	r24, 0x07	; 7
    4df8:	88 2f       	mov	r24, r24
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	81 70       	andi	r24, 0x01	; 1
    4dfe:	90 70       	andi	r25, 0x00	; 0
    4e00:	00 97       	sbiw	r24, 0x00	; 0
    4e02:	a1 f3       	breq	.-24     	; 0x4dec <UART_VidSendByte+0xc>
        ;
    // Send Data
    UDR = Copy_u8Byte;
    4e04:	ec e2       	ldi	r30, 0x2C	; 44
    4e06:	f0 e0       	ldi	r31, 0x00	; 0
    4e08:	89 81       	ldd	r24, Y+1	; 0x01
    4e0a:	80 83       	st	Z, r24
}
    4e0c:	0f 90       	pop	r0
    4e0e:	cf 91       	pop	r28
    4e10:	df 91       	pop	r29
    4e12:	08 95       	ret

00004e14 <UART_VidSendString>:

void UART_VidSendString(const char *str)
{
    4e14:	df 93       	push	r29
    4e16:	cf 93       	push	r28
    4e18:	00 d0       	rcall	.+0      	; 0x4e1a <UART_VidSendString+0x6>
    4e1a:	cd b7       	in	r28, 0x3d	; 61
    4e1c:	de b7       	in	r29, 0x3e	; 62
    4e1e:	9a 83       	std	Y+2, r25	; 0x02
    4e20:	89 83       	std	Y+1, r24	; 0x01
    4e22:	0b c0       	rjmp	.+22     	; 0x4e3a <UART_VidSendString+0x26>
    while (*str)
        UART_VidSendByte(*str++);
    4e24:	e9 81       	ldd	r30, Y+1	; 0x01
    4e26:	fa 81       	ldd	r31, Y+2	; 0x02
    4e28:	20 81       	ld	r18, Z
    4e2a:	89 81       	ldd	r24, Y+1	; 0x01
    4e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e2e:	01 96       	adiw	r24, 0x01	; 1
    4e30:	9a 83       	std	Y+2, r25	; 0x02
    4e32:	89 83       	std	Y+1, r24	; 0x01
    4e34:	82 2f       	mov	r24, r18
    4e36:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <UART_VidSendByte>
    UDR = Copy_u8Byte;
}

void UART_VidSendString(const char *str)
{
    while (*str)
    4e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    4e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    4e3e:	80 81       	ld	r24, Z
    4e40:	88 23       	and	r24, r24
    4e42:	81 f7       	brne	.-32     	; 0x4e24 <UART_VidSendString+0x10>
        UART_VidSendByte(*str++);
}
    4e44:	0f 90       	pop	r0
    4e46:	0f 90       	pop	r0
    4e48:	cf 91       	pop	r28
    4e4a:	df 91       	pop	r29
    4e4c:	08 95       	ret

00004e4e <UART_u8ReceiveData>:

u8 UART_u8ReceiveData(void)
{
    4e4e:	df 93       	push	r29
    4e50:	cf 93       	push	r28
    4e52:	cd b7       	in	r28, 0x3d	; 61
    4e54:	de b7       	in	r29, 0x3e	; 62
    // Polling until receive complete
    while (GET_BIT(UCSRA, UCSRA_RXC) != 1)
    4e56:	eb e2       	ldi	r30, 0x2B	; 43
    4e58:	f0 e0       	ldi	r31, 0x00	; 0
    4e5a:	80 81       	ld	r24, Z
    4e5c:	88 1f       	adc	r24, r24
    4e5e:	88 27       	eor	r24, r24
    4e60:	88 1f       	adc	r24, r24
    4e62:	81 30       	cpi	r24, 0x01	; 1
    4e64:	c1 f7       	brne	.-16     	; 0x4e56 <UART_u8ReceiveData+0x8>
        ;
    return UDR;
    4e66:	ec e2       	ldi	r30, 0x2C	; 44
    4e68:	f0 e0       	ldi	r31, 0x00	; 0
    4e6a:	80 81       	ld	r24, Z
}
    4e6c:	cf 91       	pop	r28
    4e6e:	df 91       	pop	r29
    4e70:	08 95       	ret

00004e72 <TWI_init>:
#include "../../../include/BIT_MATH.h"
#include "TWI_private.h"
#include "TWI_config.h"
#include "TWI_interface.h"
void TWI_init(void)
{
    4e72:	df 93       	push	r29
    4e74:	cf 93       	push	r28
    4e76:	cd b7       	in	r28, 0x3d	; 61
    4e78:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    4e7a:	e0 e2       	ldi	r30, 0x20	; 32
    4e7c:	f0 e0       	ldi	r31, 0x00	; 0
    4e7e:	82 e0       	ldi	r24, 0x02	; 2
    4e80:	80 83       	st	Z, r24
	TWSR = 0x00;
    4e82:	e1 e2       	ldi	r30, 0x21	; 33
    4e84:	f0 e0       	ldi	r31, 0x00	; 0
    4e86:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :)
    4e88:	e2 e2       	ldi	r30, 0x22	; 34
    4e8a:	f0 e0       	ldi	r31, 0x00	; 0
    4e8c:	82 e0       	ldi	r24, 0x02	; 2
    4e8e:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
    4e90:	e6 e5       	ldi	r30, 0x56	; 86
    4e92:	f0 e0       	ldi	r31, 0x00	; 0
    4e94:	84 e0       	ldi	r24, 0x04	; 4
    4e96:	80 83       	st	Z, r24
}
    4e98:	cf 91       	pop	r28
    4e9a:	df 91       	pop	r29
    4e9c:	08 95       	ret

00004e9e <TWI_start>:

void TWI_start(void)
{
    4e9e:	df 93       	push	r29
    4ea0:	cf 93       	push	r28
    4ea2:	cd b7       	in	r28, 0x3d	; 61
    4ea4:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    4ea6:	e6 e5       	ldi	r30, 0x56	; 86
    4ea8:	f0 e0       	ldi	r31, 0x00	; 0
    4eaa:	84 ea       	ldi	r24, 0xA4	; 164
    4eac:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    4eae:	e6 e5       	ldi	r30, 0x56	; 86
    4eb0:	f0 e0       	ldi	r31, 0x00	; 0
    4eb2:	80 81       	ld	r24, Z
    4eb4:	88 23       	and	r24, r24
    4eb6:	dc f7       	brge	.-10     	; 0x4eae <TWI_start+0x10>
}
    4eb8:	cf 91       	pop	r28
    4eba:	df 91       	pop	r29
    4ebc:	08 95       	ret

00004ebe <TWI_stop>:

void TWI_stop(void)
{
    4ebe:	df 93       	push	r29
    4ec0:	cf 93       	push	r28
    4ec2:	cd b7       	in	r28, 0x3d	; 61
    4ec4:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    4ec6:	e6 e5       	ldi	r30, 0x56	; 86
    4ec8:	f0 e0       	ldi	r31, 0x00	; 0
    4eca:	84 e9       	ldi	r24, 0x94	; 148
    4ecc:	80 83       	st	Z, r24
}
    4ece:	cf 91       	pop	r28
    4ed0:	df 91       	pop	r29
    4ed2:	08 95       	ret

00004ed4 <TWI_writeByte>:

void TWI_writeByte(u8 data)
{
    4ed4:	df 93       	push	r29
    4ed6:	cf 93       	push	r28
    4ed8:	0f 92       	push	r0
    4eda:	cd b7       	in	r28, 0x3d	; 61
    4edc:	de b7       	in	r29, 0x3e	; 62
    4ede:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    4ee0:	e3 e2       	ldi	r30, 0x23	; 35
    4ee2:	f0 e0       	ldi	r31, 0x00	; 0
    4ee4:	89 81       	ldd	r24, Y+1	; 0x01
    4ee6:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    4ee8:	e6 e5       	ldi	r30, 0x56	; 86
    4eea:	f0 e0       	ldi	r31, 0x00	; 0
    4eec:	84 e8       	ldi	r24, 0x84	; 132
    4eee:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    4ef0:	e6 e5       	ldi	r30, 0x56	; 86
    4ef2:	f0 e0       	ldi	r31, 0x00	; 0
    4ef4:	80 81       	ld	r24, Z
    4ef6:	88 23       	and	r24, r24
    4ef8:	dc f7       	brge	.-10     	; 0x4ef0 <TWI_writeByte+0x1c>
}
    4efa:	0f 90       	pop	r0
    4efc:	cf 91       	pop	r28
    4efe:	df 91       	pop	r29
    4f00:	08 95       	ret

00004f02 <TWI_readByteWithACK>:

u8 TWI_readByteWithACK(void)
{
    4f02:	df 93       	push	r29
    4f04:	cf 93       	push	r28
    4f06:	cd b7       	in	r28, 0x3d	; 61
    4f08:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    4f0a:	e6 e5       	ldi	r30, 0x56	; 86
    4f0c:	f0 e0       	ldi	r31, 0x00	; 0
    4f0e:	84 ec       	ldi	r24, 0xC4	; 196
    4f10:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    4f12:	e6 e5       	ldi	r30, 0x56	; 86
    4f14:	f0 e0       	ldi	r31, 0x00	; 0
    4f16:	80 81       	ld	r24, Z
    4f18:	88 23       	and	r24, r24
    4f1a:	dc f7       	brge	.-10     	; 0x4f12 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    4f1c:	e3 e2       	ldi	r30, 0x23	; 35
    4f1e:	f0 e0       	ldi	r31, 0x00	; 0
    4f20:	80 81       	ld	r24, Z
}
    4f22:	cf 91       	pop	r28
    4f24:	df 91       	pop	r29
    4f26:	08 95       	ret

00004f28 <TWI_readByteWithNACK>:

u8 TWI_readByteWithNACK(void)
{
    4f28:	df 93       	push	r29
    4f2a:	cf 93       	push	r28
    4f2c:	cd b7       	in	r28, 0x3d	; 61
    4f2e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    4f30:	e6 e5       	ldi	r30, 0x56	; 86
    4f32:	f0 e0       	ldi	r31, 0x00	; 0
    4f34:	84 e8       	ldi	r24, 0x84	; 132
    4f36:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    4f38:	e6 e5       	ldi	r30, 0x56	; 86
    4f3a:	f0 e0       	ldi	r31, 0x00	; 0
    4f3c:	80 81       	ld	r24, Z
    4f3e:	88 23       	and	r24, r24
    4f40:	dc f7       	brge	.-10     	; 0x4f38 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    4f42:	e3 e2       	ldi	r30, 0x23	; 35
    4f44:	f0 e0       	ldi	r31, 0x00	; 0
    4f46:	80 81       	ld	r24, Z
}
    4f48:	cf 91       	pop	r28
    4f4a:	df 91       	pop	r29
    4f4c:	08 95       	ret

00004f4e <TWI_getStatus>:

u8 TWI_getStatus(void)
{
    4f4e:	df 93       	push	r29
    4f50:	cf 93       	push	r28
    4f52:	0f 92       	push	r0
    4f54:	cd b7       	in	r28, 0x3d	; 61
    4f56:	de b7       	in	r29, 0x3e	; 62
    u8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    4f58:	e1 e2       	ldi	r30, 0x21	; 33
    4f5a:	f0 e0       	ldi	r31, 0x00	; 0
    4f5c:	80 81       	ld	r24, Z
    4f5e:	88 7f       	andi	r24, 0xF8	; 248
    4f60:	89 83       	std	Y+1, r24	; 0x01
    return status;
    4f62:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f64:	0f 90       	pop	r0
    4f66:	cf 91       	pop	r28
    4f68:	df 91       	pop	r29
    4f6a:	08 95       	ret

00004f6c <EEPROM_writeByte>:
#include "EEPROM_interface.h"
#include "../TWI/TWI_config.h"
#include "../TWI/TWI_interface.h"
#include "util/delay.h"
u8 EEPROM_writeByte(u16 u16addr, u8 u8data)
{
    4f6c:	df 93       	push	r29
    4f6e:	cf 93       	push	r28
    4f70:	00 d0       	rcall	.+0      	; 0x4f72 <EEPROM_writeByte+0x6>
    4f72:	00 d0       	rcall	.+0      	; 0x4f74 <EEPROM_writeByte+0x8>
    4f74:	cd b7       	in	r28, 0x3d	; 61
    4f76:	de b7       	in	r29, 0x3e	; 62
    4f78:	9a 83       	std	Y+2, r25	; 0x02
    4f7a:	89 83       	std	Y+1, r24	; 0x01
    4f7c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    4f7e:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    4f82:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <TWI_getStatus>
    4f86:	88 30       	cpi	r24, 0x08	; 8
    4f88:	11 f0       	breq	.+4      	; 0x4f8e <EEPROM_writeByte+0x22>
        return ERROR;
    4f8a:	1c 82       	std	Y+4, r1	; 0x04
    4f8c:	28 c0       	rjmp	.+80     	; 0x4fde <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((u8)(0xA0 | ((u16addr & 0x0700)>>7)));
    4f8e:	89 81       	ldd	r24, Y+1	; 0x01
    4f90:	9a 81       	ldd	r25, Y+2	; 0x02
    4f92:	80 70       	andi	r24, 0x00	; 0
    4f94:	97 70       	andi	r25, 0x07	; 7
    4f96:	88 0f       	add	r24, r24
    4f98:	89 2f       	mov	r24, r25
    4f9a:	88 1f       	adc	r24, r24
    4f9c:	99 0b       	sbc	r25, r25
    4f9e:	91 95       	neg	r25
    4fa0:	80 6a       	ori	r24, 0xA0	; 160
    4fa2:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    4fa6:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <TWI_getStatus>
    4faa:	88 31       	cpi	r24, 0x18	; 24
    4fac:	11 f0       	breq	.+4      	; 0x4fb2 <EEPROM_writeByte+0x46>
        return ERROR;
    4fae:	1c 82       	std	Y+4, r1	; 0x04
    4fb0:	16 c0       	rjmp	.+44     	; 0x4fde <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((u8)(u16addr));
    4fb2:	89 81       	ldd	r24, Y+1	; 0x01
    4fb4:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    4fb8:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <TWI_getStatus>
    4fbc:	88 32       	cpi	r24, 0x28	; 40
    4fbe:	11 f0       	breq	.+4      	; 0x4fc4 <EEPROM_writeByte+0x58>
        return ERROR;
    4fc0:	1c 82       	std	Y+4, r1	; 0x04
    4fc2:	0d c0       	rjmp	.+26     	; 0x4fde <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    4fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    4fc6:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    4fca:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <TWI_getStatus>
    4fce:	88 32       	cpi	r24, 0x28	; 40
    4fd0:	11 f0       	breq	.+4      	; 0x4fd6 <EEPROM_writeByte+0x6a>
        return ERROR;
    4fd2:	1c 82       	std	Y+4, r1	; 0x04
    4fd4:	04 c0       	rjmp	.+8      	; 0x4fde <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    4fd6:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <TWI_stop>

    return SUCCESS;
    4fda:	81 e0       	ldi	r24, 0x01	; 1
    4fdc:	8c 83       	std	Y+4, r24	; 0x04
    4fde:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4fe0:	0f 90       	pop	r0
    4fe2:	0f 90       	pop	r0
    4fe4:	0f 90       	pop	r0
    4fe6:	0f 90       	pop	r0
    4fe8:	cf 91       	pop	r28
    4fea:	df 91       	pop	r29
    4fec:	08 95       	ret

00004fee <EEPROM_readByte>:

u8 EEPROM_readByte(u16 u16addr, u8 *u8data)
{
    4fee:	df 93       	push	r29
    4ff0:	cf 93       	push	r28
    4ff2:	00 d0       	rcall	.+0      	; 0x4ff4 <EEPROM_readByte+0x6>
    4ff4:	00 d0       	rcall	.+0      	; 0x4ff6 <EEPROM_readByte+0x8>
    4ff6:	0f 92       	push	r0
    4ff8:	cd b7       	in	r28, 0x3d	; 61
    4ffa:	de b7       	in	r29, 0x3e	; 62
    4ffc:	9a 83       	std	Y+2, r25	; 0x02
    4ffe:	89 83       	std	Y+1, r24	; 0x01
    5000:	7c 83       	std	Y+4, r23	; 0x04
    5002:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    5004:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    5008:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <TWI_getStatus>
    500c:	88 30       	cpi	r24, 0x08	; 8
    500e:	11 f0       	breq	.+4      	; 0x5014 <EEPROM_readByte+0x26>
        return ERROR;
    5010:	1d 82       	std	Y+5, r1	; 0x05
    5012:	44 c0       	rjmp	.+136    	; 0x509c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((u8)((0xA0) | ((u16addr & 0x0700)>>7)));
    5014:	89 81       	ldd	r24, Y+1	; 0x01
    5016:	9a 81       	ldd	r25, Y+2	; 0x02
    5018:	80 70       	andi	r24, 0x00	; 0
    501a:	97 70       	andi	r25, 0x07	; 7
    501c:	88 0f       	add	r24, r24
    501e:	89 2f       	mov	r24, r25
    5020:	88 1f       	adc	r24, r24
    5022:	99 0b       	sbc	r25, r25
    5024:	91 95       	neg	r25
    5026:	80 6a       	ori	r24, 0xA0	; 160
    5028:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    502c:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <TWI_getStatus>
    5030:	88 31       	cpi	r24, 0x18	; 24
    5032:	11 f0       	breq	.+4      	; 0x5038 <EEPROM_readByte+0x4a>
        return ERROR;
    5034:	1d 82       	std	Y+5, r1	; 0x05
    5036:	32 c0       	rjmp	.+100    	; 0x509c <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((u8)(u16addr));
    5038:	89 81       	ldd	r24, Y+1	; 0x01
    503a:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    503e:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <TWI_getStatus>
    5042:	88 32       	cpi	r24, 0x28	; 40
    5044:	11 f0       	breq	.+4      	; 0x504a <EEPROM_readByte+0x5c>
        return ERROR;
    5046:	1d 82       	std	Y+5, r1	; 0x05
    5048:	29 c0       	rjmp	.+82     	; 0x509c <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    504a:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    504e:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <TWI_getStatus>
    5052:	80 31       	cpi	r24, 0x10	; 16
    5054:	11 f0       	breq	.+4      	; 0x505a <EEPROM_readByte+0x6c>
        return ERROR;
    5056:	1d 82       	std	Y+5, r1	; 0x05
    5058:	21 c0       	rjmp	.+66     	; 0x509c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((u8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    505a:	89 81       	ldd	r24, Y+1	; 0x01
    505c:	9a 81       	ldd	r25, Y+2	; 0x02
    505e:	80 70       	andi	r24, 0x00	; 0
    5060:	97 70       	andi	r25, 0x07	; 7
    5062:	88 0f       	add	r24, r24
    5064:	89 2f       	mov	r24, r25
    5066:	88 1f       	adc	r24, r24
    5068:	99 0b       	sbc	r25, r25
    506a:	91 95       	neg	r25
    506c:	81 6a       	ori	r24, 0xA1	; 161
    506e:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    5072:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <TWI_getStatus>
    5076:	80 34       	cpi	r24, 0x40	; 64
    5078:	11 f0       	breq	.+4      	; 0x507e <EEPROM_readByte+0x90>
        return ERROR;
    507a:	1d 82       	std	Y+5, r1	; 0x05
    507c:	0f c0       	rjmp	.+30     	; 0x509c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    507e:	0e 94 94 27 	call	0x4f28	; 0x4f28 <TWI_readByteWithNACK>
    5082:	eb 81       	ldd	r30, Y+3	; 0x03
    5084:	fc 81       	ldd	r31, Y+4	; 0x04
    5086:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    5088:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <TWI_getStatus>
    508c:	88 35       	cpi	r24, 0x58	; 88
    508e:	11 f0       	breq	.+4      	; 0x5094 <EEPROM_readByte+0xa6>
        return ERROR;
    5090:	1d 82       	std	Y+5, r1	; 0x05
    5092:	04 c0       	rjmp	.+8      	; 0x509c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    5094:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <TWI_stop>

    return SUCCESS;
    5098:	81 e0       	ldi	r24, 0x01	; 1
    509a:	8d 83       	std	Y+5, r24	; 0x05
    509c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    509e:	0f 90       	pop	r0
    50a0:	0f 90       	pop	r0
    50a2:	0f 90       	pop	r0
    50a4:	0f 90       	pop	r0
    50a6:	0f 90       	pop	r0
    50a8:	cf 91       	pop	r28
    50aa:	df 91       	pop	r29
    50ac:	08 95       	ret

000050ae <EEPROM_WriteBlock>:
void EEPROM_WriteBlock(u16 u16addr,u8*u8data,u8 const size)
{
    50ae:	df 93       	push	r29
    50b0:	cf 93       	push	r28
    50b2:	cd b7       	in	r28, 0x3d	; 61
    50b4:	de b7       	in	r29, 0x3e	; 62
    50b6:	64 97       	sbiw	r28, 0x14	; 20
    50b8:	0f b6       	in	r0, 0x3f	; 63
    50ba:	f8 94       	cli
    50bc:	de bf       	out	0x3e, r29	; 62
    50be:	0f be       	out	0x3f, r0	; 63
    50c0:	cd bf       	out	0x3d, r28	; 61
    50c2:	99 8b       	std	Y+17, r25	; 0x11
    50c4:	88 8b       	std	Y+16, r24	; 0x10
    50c6:	7b 8b       	std	Y+19, r23	; 0x13
    50c8:	6a 8b       	std	Y+18, r22	; 0x12
    50ca:	4c 8b       	std	Y+20, r20	; 0x14
	for(u8 i=0;i<size;i++)
    50cc:	1f 86       	std	Y+15, r1	; 0x0f
    50ce:	8a c0       	rjmp	.+276    	; 0x51e4 <EEPROM_WriteBlock+0x136>
	{
		EEPROM_writeByte(u16addr+i,u8data[i]);
    50d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    50d2:	28 2f       	mov	r18, r24
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	88 89       	ldd	r24, Y+16	; 0x10
    50d8:	99 89       	ldd	r25, Y+17	; 0x11
    50da:	a9 01       	movw	r20, r18
    50dc:	48 0f       	add	r20, r24
    50de:	59 1f       	adc	r21, r25
    50e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    50e2:	28 2f       	mov	r18, r24
    50e4:	30 e0       	ldi	r19, 0x00	; 0
    50e6:	8a 89       	ldd	r24, Y+18	; 0x12
    50e8:	9b 89       	ldd	r25, Y+19	; 0x13
    50ea:	fc 01       	movw	r30, r24
    50ec:	e2 0f       	add	r30, r18
    50ee:	f3 1f       	adc	r31, r19
    50f0:	20 81       	ld	r18, Z
    50f2:	ca 01       	movw	r24, r20
    50f4:	62 2f       	mov	r22, r18
    50f6:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <EEPROM_writeByte>
    50fa:	80 e0       	ldi	r24, 0x00	; 0
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	a0 e2       	ldi	r26, 0x20	; 32
    5100:	b1 e4       	ldi	r27, 0x41	; 65
    5102:	8b 87       	std	Y+11, r24	; 0x0b
    5104:	9c 87       	std	Y+12, r25	; 0x0c
    5106:	ad 87       	std	Y+13, r26	; 0x0d
    5108:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    510a:	6b 85       	ldd	r22, Y+11	; 0x0b
    510c:	7c 85       	ldd	r23, Y+12	; 0x0c
    510e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5110:	9e 85       	ldd	r25, Y+14	; 0x0e
    5112:	20 e0       	ldi	r18, 0x00	; 0
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	4a ef       	ldi	r20, 0xFA	; 250
    5118:	54 e4       	ldi	r21, 0x44	; 68
    511a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    511e:	dc 01       	movw	r26, r24
    5120:	cb 01       	movw	r24, r22
    5122:	8f 83       	std	Y+7, r24	; 0x07
    5124:	98 87       	std	Y+8, r25	; 0x08
    5126:	a9 87       	std	Y+9, r26	; 0x09
    5128:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    512a:	6f 81       	ldd	r22, Y+7	; 0x07
    512c:	78 85       	ldd	r23, Y+8	; 0x08
    512e:	89 85       	ldd	r24, Y+9	; 0x09
    5130:	9a 85       	ldd	r25, Y+10	; 0x0a
    5132:	20 e0       	ldi	r18, 0x00	; 0
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	40 e8       	ldi	r20, 0x80	; 128
    5138:	5f e3       	ldi	r21, 0x3F	; 63
    513a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    513e:	88 23       	and	r24, r24
    5140:	2c f4       	brge	.+10     	; 0x514c <EEPROM_WriteBlock+0x9e>
		__ticks = 1;
    5142:	81 e0       	ldi	r24, 0x01	; 1
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	9e 83       	std	Y+6, r25	; 0x06
    5148:	8d 83       	std	Y+5, r24	; 0x05
    514a:	3f c0       	rjmp	.+126    	; 0x51ca <EEPROM_WriteBlock+0x11c>
	else if (__tmp > 65535)
    514c:	6f 81       	ldd	r22, Y+7	; 0x07
    514e:	78 85       	ldd	r23, Y+8	; 0x08
    5150:	89 85       	ldd	r24, Y+9	; 0x09
    5152:	9a 85       	ldd	r25, Y+10	; 0x0a
    5154:	20 e0       	ldi	r18, 0x00	; 0
    5156:	3f ef       	ldi	r19, 0xFF	; 255
    5158:	4f e7       	ldi	r20, 0x7F	; 127
    515a:	57 e4       	ldi	r21, 0x47	; 71
    515c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5160:	18 16       	cp	r1, r24
    5162:	4c f5       	brge	.+82     	; 0x51b6 <EEPROM_WriteBlock+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5164:	6b 85       	ldd	r22, Y+11	; 0x0b
    5166:	7c 85       	ldd	r23, Y+12	; 0x0c
    5168:	8d 85       	ldd	r24, Y+13	; 0x0d
    516a:	9e 85       	ldd	r25, Y+14	; 0x0e
    516c:	20 e0       	ldi	r18, 0x00	; 0
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	40 e2       	ldi	r20, 0x20	; 32
    5172:	51 e4       	ldi	r21, 0x41	; 65
    5174:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5178:	dc 01       	movw	r26, r24
    517a:	cb 01       	movw	r24, r22
    517c:	bc 01       	movw	r22, r24
    517e:	cd 01       	movw	r24, r26
    5180:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5184:	dc 01       	movw	r26, r24
    5186:	cb 01       	movw	r24, r22
    5188:	9e 83       	std	Y+6, r25	; 0x06
    518a:	8d 83       	std	Y+5, r24	; 0x05
    518c:	0f c0       	rjmp	.+30     	; 0x51ac <EEPROM_WriteBlock+0xfe>
    518e:	88 ec       	ldi	r24, 0xC8	; 200
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	9c 83       	std	Y+4, r25	; 0x04
    5194:	8b 83       	std	Y+3, r24	; 0x03
    5196:	8b 81       	ldd	r24, Y+3	; 0x03
    5198:	9c 81       	ldd	r25, Y+4	; 0x04
    519a:	01 97       	sbiw	r24, 0x01	; 1
    519c:	f1 f7       	brne	.-4      	; 0x519a <EEPROM_WriteBlock+0xec>
    519e:	9c 83       	std	Y+4, r25	; 0x04
    51a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51a2:	8d 81       	ldd	r24, Y+5	; 0x05
    51a4:	9e 81       	ldd	r25, Y+6	; 0x06
    51a6:	01 97       	sbiw	r24, 0x01	; 1
    51a8:	9e 83       	std	Y+6, r25	; 0x06
    51aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ac:	8d 81       	ldd	r24, Y+5	; 0x05
    51ae:	9e 81       	ldd	r25, Y+6	; 0x06
    51b0:	00 97       	sbiw	r24, 0x00	; 0
    51b2:	69 f7       	brne	.-38     	; 0x518e <EEPROM_WriteBlock+0xe0>
    51b4:	14 c0       	rjmp	.+40     	; 0x51de <EEPROM_WriteBlock+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51b6:	6f 81       	ldd	r22, Y+7	; 0x07
    51b8:	78 85       	ldd	r23, Y+8	; 0x08
    51ba:	89 85       	ldd	r24, Y+9	; 0x09
    51bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    51be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    51c2:	dc 01       	movw	r26, r24
    51c4:	cb 01       	movw	r24, r22
    51c6:	9e 83       	std	Y+6, r25	; 0x06
    51c8:	8d 83       	std	Y+5, r24	; 0x05
    51ca:	8d 81       	ldd	r24, Y+5	; 0x05
    51cc:	9e 81       	ldd	r25, Y+6	; 0x06
    51ce:	9a 83       	std	Y+2, r25	; 0x02
    51d0:	89 83       	std	Y+1, r24	; 0x01
    51d2:	89 81       	ldd	r24, Y+1	; 0x01
    51d4:	9a 81       	ldd	r25, Y+2	; 0x02
    51d6:	01 97       	sbiw	r24, 0x01	; 1
    51d8:	f1 f7       	brne	.-4      	; 0x51d6 <EEPROM_WriteBlock+0x128>
    51da:	9a 83       	std	Y+2, r25	; 0x02
    51dc:	89 83       	std	Y+1, r24	; 0x01

    return SUCCESS;
}
void EEPROM_WriteBlock(u16 u16addr,u8*u8data,u8 const size)
{
	for(u8 i=0;i<size;i++)
    51de:	8f 85       	ldd	r24, Y+15	; 0x0f
    51e0:	8f 5f       	subi	r24, 0xFF	; 255
    51e2:	8f 87       	std	Y+15, r24	; 0x0f
    51e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    51e6:	8c 89       	ldd	r24, Y+20	; 0x14
    51e8:	98 17       	cp	r25, r24
    51ea:	08 f4       	brcc	.+2      	; 0x51ee <EEPROM_WriteBlock+0x140>
    51ec:	71 cf       	rjmp	.-286    	; 0x50d0 <EEPROM_WriteBlock+0x22>
	{
		EEPROM_writeByte(u16addr+i,u8data[i]);
		_delay_ms(10);
	}
}
    51ee:	64 96       	adiw	r28, 0x14	; 20
    51f0:	0f b6       	in	r0, 0x3f	; 63
    51f2:	f8 94       	cli
    51f4:	de bf       	out	0x3e, r29	; 62
    51f6:	0f be       	out	0x3f, r0	; 63
    51f8:	cd bf       	out	0x3d, r28	; 61
    51fa:	cf 91       	pop	r28
    51fc:	df 91       	pop	r29
    51fe:	08 95       	ret

00005200 <DIO_VidSetPinDirection>:
#include "DIO_private.h"
#include "DIO_interface.h"

// Setting pin direction
void DIO_VidSetPinDirection(et_Port port, et_Pin pin, et_Direction direction)
{
    5200:	df 93       	push	r29
    5202:	cf 93       	push	r28
    5204:	cd b7       	in	r28, 0x3d	; 61
    5206:	de b7       	in	r29, 0x3e	; 62
    5208:	27 97       	sbiw	r28, 0x07	; 7
    520a:	0f b6       	in	r0, 0x3f	; 63
    520c:	f8 94       	cli
    520e:	de bf       	out	0x3e, r29	; 62
    5210:	0f be       	out	0x3f, r0	; 63
    5212:	cd bf       	out	0x3d, r28	; 61
    5214:	89 83       	std	Y+1, r24	; 0x01
    5216:	6a 83       	std	Y+2, r22	; 0x02
    5218:	4b 83       	std	Y+3, r20	; 0x03
	if (direction == Input)
    521a:	8b 81       	ldd	r24, Y+3	; 0x03
    521c:	88 23       	and	r24, r24
    521e:	09 f0       	breq	.+2      	; 0x5222 <DIO_VidSetPinDirection+0x22>
    5220:	74 c0       	rjmp	.+232    	; 0x530a <DIO_VidSetPinDirection+0x10a>
	{
		switch (port)
    5222:	89 81       	ldd	r24, Y+1	; 0x01
    5224:	28 2f       	mov	r18, r24
    5226:	30 e0       	ldi	r19, 0x00	; 0
    5228:	3f 83       	std	Y+7, r19	; 0x07
    522a:	2e 83       	std	Y+6, r18	; 0x06
    522c:	8e 81       	ldd	r24, Y+6	; 0x06
    522e:	9f 81       	ldd	r25, Y+7	; 0x07
    5230:	81 30       	cpi	r24, 0x01	; 1
    5232:	91 05       	cpc	r25, r1
    5234:	59 f1       	breq	.+86     	; 0x528c <DIO_VidSetPinDirection+0x8c>
    5236:	2e 81       	ldd	r18, Y+6	; 0x06
    5238:	3f 81       	ldd	r19, Y+7	; 0x07
    523a:	22 30       	cpi	r18, 0x02	; 2
    523c:	31 05       	cpc	r19, r1
    523e:	2c f4       	brge	.+10     	; 0x524a <DIO_VidSetPinDirection+0x4a>
    5240:	8e 81       	ldd	r24, Y+6	; 0x06
    5242:	9f 81       	ldd	r25, Y+7	; 0x07
    5244:	00 97       	sbiw	r24, 0x00	; 0
    5246:	69 f0       	breq	.+26     	; 0x5262 <DIO_VidSetPinDirection+0x62>
    5248:	d2 c0       	rjmp	.+420    	; 0x53ee <DIO_VidSetPinDirection+0x1ee>
    524a:	2e 81       	ldd	r18, Y+6	; 0x06
    524c:	3f 81       	ldd	r19, Y+7	; 0x07
    524e:	22 30       	cpi	r18, 0x02	; 2
    5250:	31 05       	cpc	r19, r1
    5252:	89 f1       	breq	.+98     	; 0x52b6 <DIO_VidSetPinDirection+0xb6>
    5254:	8e 81       	ldd	r24, Y+6	; 0x06
    5256:	9f 81       	ldd	r25, Y+7	; 0x07
    5258:	83 30       	cpi	r24, 0x03	; 3
    525a:	91 05       	cpc	r25, r1
    525c:	09 f4       	brne	.+2      	; 0x5260 <DIO_VidSetPinDirection+0x60>
    525e:	40 c0       	rjmp	.+128    	; 0x52e0 <DIO_VidSetPinDirection+0xe0>
    5260:	c6 c0       	rjmp	.+396    	; 0x53ee <DIO_VidSetPinDirection+0x1ee>
		{
		case Port_A:
			CLR_BIT(DDRA, pin);
    5262:	aa e3       	ldi	r26, 0x3A	; 58
    5264:	b0 e0       	ldi	r27, 0x00	; 0
    5266:	ea e3       	ldi	r30, 0x3A	; 58
    5268:	f0 e0       	ldi	r31, 0x00	; 0
    526a:	80 81       	ld	r24, Z
    526c:	48 2f       	mov	r20, r24
    526e:	8a 81       	ldd	r24, Y+2	; 0x02
    5270:	28 2f       	mov	r18, r24
    5272:	30 e0       	ldi	r19, 0x00	; 0
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	90 e0       	ldi	r25, 0x00	; 0
    5278:	02 2e       	mov	r0, r18
    527a:	02 c0       	rjmp	.+4      	; 0x5280 <DIO_VidSetPinDirection+0x80>
    527c:	88 0f       	add	r24, r24
    527e:	99 1f       	adc	r25, r25
    5280:	0a 94       	dec	r0
    5282:	e2 f7       	brpl	.-8      	; 0x527c <DIO_VidSetPinDirection+0x7c>
    5284:	80 95       	com	r24
    5286:	84 23       	and	r24, r20
    5288:	8c 93       	st	X, r24
    528a:	b1 c0       	rjmp	.+354    	; 0x53ee <DIO_VidSetPinDirection+0x1ee>
			break;

		case Port_B:
			CLR_BIT(DDRB, pin);
    528c:	a7 e3       	ldi	r26, 0x37	; 55
    528e:	b0 e0       	ldi	r27, 0x00	; 0
    5290:	e7 e3       	ldi	r30, 0x37	; 55
    5292:	f0 e0       	ldi	r31, 0x00	; 0
    5294:	80 81       	ld	r24, Z
    5296:	48 2f       	mov	r20, r24
    5298:	8a 81       	ldd	r24, Y+2	; 0x02
    529a:	28 2f       	mov	r18, r24
    529c:	30 e0       	ldi	r19, 0x00	; 0
    529e:	81 e0       	ldi	r24, 0x01	; 1
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	02 2e       	mov	r0, r18
    52a4:	02 c0       	rjmp	.+4      	; 0x52aa <DIO_VidSetPinDirection+0xaa>
    52a6:	88 0f       	add	r24, r24
    52a8:	99 1f       	adc	r25, r25
    52aa:	0a 94       	dec	r0
    52ac:	e2 f7       	brpl	.-8      	; 0x52a6 <DIO_VidSetPinDirection+0xa6>
    52ae:	80 95       	com	r24
    52b0:	84 23       	and	r24, r20
    52b2:	8c 93       	st	X, r24
    52b4:	9c c0       	rjmp	.+312    	; 0x53ee <DIO_VidSetPinDirection+0x1ee>
			break;

		case Port_C:
			CLR_BIT(DDRC, pin);
    52b6:	a4 e3       	ldi	r26, 0x34	; 52
    52b8:	b0 e0       	ldi	r27, 0x00	; 0
    52ba:	e4 e3       	ldi	r30, 0x34	; 52
    52bc:	f0 e0       	ldi	r31, 0x00	; 0
    52be:	80 81       	ld	r24, Z
    52c0:	48 2f       	mov	r20, r24
    52c2:	8a 81       	ldd	r24, Y+2	; 0x02
    52c4:	28 2f       	mov	r18, r24
    52c6:	30 e0       	ldi	r19, 0x00	; 0
    52c8:	81 e0       	ldi	r24, 0x01	; 1
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	02 2e       	mov	r0, r18
    52ce:	02 c0       	rjmp	.+4      	; 0x52d4 <DIO_VidSetPinDirection+0xd4>
    52d0:	88 0f       	add	r24, r24
    52d2:	99 1f       	adc	r25, r25
    52d4:	0a 94       	dec	r0
    52d6:	e2 f7       	brpl	.-8      	; 0x52d0 <DIO_VidSetPinDirection+0xd0>
    52d8:	80 95       	com	r24
    52da:	84 23       	and	r24, r20
    52dc:	8c 93       	st	X, r24
    52de:	87 c0       	rjmp	.+270    	; 0x53ee <DIO_VidSetPinDirection+0x1ee>
			break;

		case Port_D:
			CLR_BIT(DDRD, pin);
    52e0:	a1 e3       	ldi	r26, 0x31	; 49
    52e2:	b0 e0       	ldi	r27, 0x00	; 0
    52e4:	e1 e3       	ldi	r30, 0x31	; 49
    52e6:	f0 e0       	ldi	r31, 0x00	; 0
    52e8:	80 81       	ld	r24, Z
    52ea:	48 2f       	mov	r20, r24
    52ec:	8a 81       	ldd	r24, Y+2	; 0x02
    52ee:	28 2f       	mov	r18, r24
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	81 e0       	ldi	r24, 0x01	; 1
    52f4:	90 e0       	ldi	r25, 0x00	; 0
    52f6:	02 2e       	mov	r0, r18
    52f8:	02 c0       	rjmp	.+4      	; 0x52fe <DIO_VidSetPinDirection+0xfe>
    52fa:	88 0f       	add	r24, r24
    52fc:	99 1f       	adc	r25, r25
    52fe:	0a 94       	dec	r0
    5300:	e2 f7       	brpl	.-8      	; 0x52fa <DIO_VidSetPinDirection+0xfa>
    5302:	80 95       	com	r24
    5304:	84 23       	and	r24, r20
    5306:	8c 93       	st	X, r24
    5308:	72 c0       	rjmp	.+228    	; 0x53ee <DIO_VidSetPinDirection+0x1ee>
			break;
		default:
			break;
		}
	}
	else if (direction == Output)
    530a:	8b 81       	ldd	r24, Y+3	; 0x03
    530c:	81 30       	cpi	r24, 0x01	; 1
    530e:	09 f0       	breq	.+2      	; 0x5312 <DIO_VidSetPinDirection+0x112>
    5310:	6e c0       	rjmp	.+220    	; 0x53ee <DIO_VidSetPinDirection+0x1ee>
	{
		switch (port)
    5312:	89 81       	ldd	r24, Y+1	; 0x01
    5314:	28 2f       	mov	r18, r24
    5316:	30 e0       	ldi	r19, 0x00	; 0
    5318:	3d 83       	std	Y+5, r19	; 0x05
    531a:	2c 83       	std	Y+4, r18	; 0x04
    531c:	8c 81       	ldd	r24, Y+4	; 0x04
    531e:	9d 81       	ldd	r25, Y+5	; 0x05
    5320:	81 30       	cpi	r24, 0x01	; 1
    5322:	91 05       	cpc	r25, r1
    5324:	49 f1       	breq	.+82     	; 0x5378 <DIO_VidSetPinDirection+0x178>
    5326:	2c 81       	ldd	r18, Y+4	; 0x04
    5328:	3d 81       	ldd	r19, Y+5	; 0x05
    532a:	22 30       	cpi	r18, 0x02	; 2
    532c:	31 05       	cpc	r19, r1
    532e:	2c f4       	brge	.+10     	; 0x533a <DIO_VidSetPinDirection+0x13a>
    5330:	8c 81       	ldd	r24, Y+4	; 0x04
    5332:	9d 81       	ldd	r25, Y+5	; 0x05
    5334:	00 97       	sbiw	r24, 0x00	; 0
    5336:	61 f0       	breq	.+24     	; 0x5350 <DIO_VidSetPinDirection+0x150>
    5338:	5a c0       	rjmp	.+180    	; 0x53ee <DIO_VidSetPinDirection+0x1ee>
    533a:	2c 81       	ldd	r18, Y+4	; 0x04
    533c:	3d 81       	ldd	r19, Y+5	; 0x05
    533e:	22 30       	cpi	r18, 0x02	; 2
    5340:	31 05       	cpc	r19, r1
    5342:	71 f1       	breq	.+92     	; 0x53a0 <DIO_VidSetPinDirection+0x1a0>
    5344:	8c 81       	ldd	r24, Y+4	; 0x04
    5346:	9d 81       	ldd	r25, Y+5	; 0x05
    5348:	83 30       	cpi	r24, 0x03	; 3
    534a:	91 05       	cpc	r25, r1
    534c:	e9 f1       	breq	.+122    	; 0x53c8 <DIO_VidSetPinDirection+0x1c8>
    534e:	4f c0       	rjmp	.+158    	; 0x53ee <DIO_VidSetPinDirection+0x1ee>
		{
		case Port_A:
			SET_BIT(DDRA, pin);
    5350:	aa e3       	ldi	r26, 0x3A	; 58
    5352:	b0 e0       	ldi	r27, 0x00	; 0
    5354:	ea e3       	ldi	r30, 0x3A	; 58
    5356:	f0 e0       	ldi	r31, 0x00	; 0
    5358:	80 81       	ld	r24, Z
    535a:	48 2f       	mov	r20, r24
    535c:	8a 81       	ldd	r24, Y+2	; 0x02
    535e:	28 2f       	mov	r18, r24
    5360:	30 e0       	ldi	r19, 0x00	; 0
    5362:	81 e0       	ldi	r24, 0x01	; 1
    5364:	90 e0       	ldi	r25, 0x00	; 0
    5366:	02 2e       	mov	r0, r18
    5368:	02 c0       	rjmp	.+4      	; 0x536e <DIO_VidSetPinDirection+0x16e>
    536a:	88 0f       	add	r24, r24
    536c:	99 1f       	adc	r25, r25
    536e:	0a 94       	dec	r0
    5370:	e2 f7       	brpl	.-8      	; 0x536a <DIO_VidSetPinDirection+0x16a>
    5372:	84 2b       	or	r24, r20
    5374:	8c 93       	st	X, r24
    5376:	3b c0       	rjmp	.+118    	; 0x53ee <DIO_VidSetPinDirection+0x1ee>
			break;

		case Port_B:
			SET_BIT(DDRB, pin);
    5378:	a7 e3       	ldi	r26, 0x37	; 55
    537a:	b0 e0       	ldi	r27, 0x00	; 0
    537c:	e7 e3       	ldi	r30, 0x37	; 55
    537e:	f0 e0       	ldi	r31, 0x00	; 0
    5380:	80 81       	ld	r24, Z
    5382:	48 2f       	mov	r20, r24
    5384:	8a 81       	ldd	r24, Y+2	; 0x02
    5386:	28 2f       	mov	r18, r24
    5388:	30 e0       	ldi	r19, 0x00	; 0
    538a:	81 e0       	ldi	r24, 0x01	; 1
    538c:	90 e0       	ldi	r25, 0x00	; 0
    538e:	02 2e       	mov	r0, r18
    5390:	02 c0       	rjmp	.+4      	; 0x5396 <DIO_VidSetPinDirection+0x196>
    5392:	88 0f       	add	r24, r24
    5394:	99 1f       	adc	r25, r25
    5396:	0a 94       	dec	r0
    5398:	e2 f7       	brpl	.-8      	; 0x5392 <DIO_VidSetPinDirection+0x192>
    539a:	84 2b       	or	r24, r20
    539c:	8c 93       	st	X, r24
    539e:	27 c0       	rjmp	.+78     	; 0x53ee <DIO_VidSetPinDirection+0x1ee>
			break;

		case Port_C:
			SET_BIT(DDRC, pin);
    53a0:	a4 e3       	ldi	r26, 0x34	; 52
    53a2:	b0 e0       	ldi	r27, 0x00	; 0
    53a4:	e4 e3       	ldi	r30, 0x34	; 52
    53a6:	f0 e0       	ldi	r31, 0x00	; 0
    53a8:	80 81       	ld	r24, Z
    53aa:	48 2f       	mov	r20, r24
    53ac:	8a 81       	ldd	r24, Y+2	; 0x02
    53ae:	28 2f       	mov	r18, r24
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	81 e0       	ldi	r24, 0x01	; 1
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	02 2e       	mov	r0, r18
    53b8:	02 c0       	rjmp	.+4      	; 0x53be <DIO_VidSetPinDirection+0x1be>
    53ba:	88 0f       	add	r24, r24
    53bc:	99 1f       	adc	r25, r25
    53be:	0a 94       	dec	r0
    53c0:	e2 f7       	brpl	.-8      	; 0x53ba <DIO_VidSetPinDirection+0x1ba>
    53c2:	84 2b       	or	r24, r20
    53c4:	8c 93       	st	X, r24
    53c6:	13 c0       	rjmp	.+38     	; 0x53ee <DIO_VidSetPinDirection+0x1ee>
			break;

		case Port_D:
			SET_BIT(DDRD, pin);
    53c8:	a1 e3       	ldi	r26, 0x31	; 49
    53ca:	b0 e0       	ldi	r27, 0x00	; 0
    53cc:	e1 e3       	ldi	r30, 0x31	; 49
    53ce:	f0 e0       	ldi	r31, 0x00	; 0
    53d0:	80 81       	ld	r24, Z
    53d2:	48 2f       	mov	r20, r24
    53d4:	8a 81       	ldd	r24, Y+2	; 0x02
    53d6:	28 2f       	mov	r18, r24
    53d8:	30 e0       	ldi	r19, 0x00	; 0
    53da:	81 e0       	ldi	r24, 0x01	; 1
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	02 2e       	mov	r0, r18
    53e0:	02 c0       	rjmp	.+4      	; 0x53e6 <DIO_VidSetPinDirection+0x1e6>
    53e2:	88 0f       	add	r24, r24
    53e4:	99 1f       	adc	r25, r25
    53e6:	0a 94       	dec	r0
    53e8:	e2 f7       	brpl	.-8      	; 0x53e2 <DIO_VidSetPinDirection+0x1e2>
    53ea:	84 2b       	or	r24, r20
    53ec:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
    53ee:	27 96       	adiw	r28, 0x07	; 7
    53f0:	0f b6       	in	r0, 0x3f	; 63
    53f2:	f8 94       	cli
    53f4:	de bf       	out	0x3e, r29	; 62
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	cd bf       	out	0x3d, r28	; 61
    53fa:	cf 91       	pop	r28
    53fc:	df 91       	pop	r29
    53fe:	08 95       	ret

00005400 <DIO_VidSetPinValue>:

// Setting pin value
void DIO_VidSetPinValue(et_Port port, et_Pin pin, et_Status value)
{
    5400:	df 93       	push	r29
    5402:	cf 93       	push	r28
    5404:	cd b7       	in	r28, 0x3d	; 61
    5406:	de b7       	in	r29, 0x3e	; 62
    5408:	27 97       	sbiw	r28, 0x07	; 7
    540a:	0f b6       	in	r0, 0x3f	; 63
    540c:	f8 94       	cli
    540e:	de bf       	out	0x3e, r29	; 62
    5410:	0f be       	out	0x3f, r0	; 63
    5412:	cd bf       	out	0x3d, r28	; 61
    5414:	89 83       	std	Y+1, r24	; 0x01
    5416:	6a 83       	std	Y+2, r22	; 0x02
    5418:	4b 83       	std	Y+3, r20	; 0x03
	if (value == PinLow)
    541a:	8b 81       	ldd	r24, Y+3	; 0x03
    541c:	88 23       	and	r24, r24
    541e:	09 f0       	breq	.+2      	; 0x5422 <DIO_VidSetPinValue+0x22>
    5420:	74 c0       	rjmp	.+232    	; 0x550a <DIO_VidSetPinValue+0x10a>
	{
		switch (port)
    5422:	89 81       	ldd	r24, Y+1	; 0x01
    5424:	28 2f       	mov	r18, r24
    5426:	30 e0       	ldi	r19, 0x00	; 0
    5428:	3f 83       	std	Y+7, r19	; 0x07
    542a:	2e 83       	std	Y+6, r18	; 0x06
    542c:	8e 81       	ldd	r24, Y+6	; 0x06
    542e:	9f 81       	ldd	r25, Y+7	; 0x07
    5430:	81 30       	cpi	r24, 0x01	; 1
    5432:	91 05       	cpc	r25, r1
    5434:	59 f1       	breq	.+86     	; 0x548c <DIO_VidSetPinValue+0x8c>
    5436:	2e 81       	ldd	r18, Y+6	; 0x06
    5438:	3f 81       	ldd	r19, Y+7	; 0x07
    543a:	22 30       	cpi	r18, 0x02	; 2
    543c:	31 05       	cpc	r19, r1
    543e:	2c f4       	brge	.+10     	; 0x544a <DIO_VidSetPinValue+0x4a>
    5440:	8e 81       	ldd	r24, Y+6	; 0x06
    5442:	9f 81       	ldd	r25, Y+7	; 0x07
    5444:	00 97       	sbiw	r24, 0x00	; 0
    5446:	69 f0       	breq	.+26     	; 0x5462 <DIO_VidSetPinValue+0x62>
    5448:	d2 c0       	rjmp	.+420    	; 0x55ee <DIO_VidSetPinValue+0x1ee>
    544a:	2e 81       	ldd	r18, Y+6	; 0x06
    544c:	3f 81       	ldd	r19, Y+7	; 0x07
    544e:	22 30       	cpi	r18, 0x02	; 2
    5450:	31 05       	cpc	r19, r1
    5452:	89 f1       	breq	.+98     	; 0x54b6 <DIO_VidSetPinValue+0xb6>
    5454:	8e 81       	ldd	r24, Y+6	; 0x06
    5456:	9f 81       	ldd	r25, Y+7	; 0x07
    5458:	83 30       	cpi	r24, 0x03	; 3
    545a:	91 05       	cpc	r25, r1
    545c:	09 f4       	brne	.+2      	; 0x5460 <DIO_VidSetPinValue+0x60>
    545e:	40 c0       	rjmp	.+128    	; 0x54e0 <DIO_VidSetPinValue+0xe0>
    5460:	c6 c0       	rjmp	.+396    	; 0x55ee <DIO_VidSetPinValue+0x1ee>
		{
		case Port_A:
			CLR_BIT(PORTA, pin);
    5462:	ab e3       	ldi	r26, 0x3B	; 59
    5464:	b0 e0       	ldi	r27, 0x00	; 0
    5466:	eb e3       	ldi	r30, 0x3B	; 59
    5468:	f0 e0       	ldi	r31, 0x00	; 0
    546a:	80 81       	ld	r24, Z
    546c:	48 2f       	mov	r20, r24
    546e:	8a 81       	ldd	r24, Y+2	; 0x02
    5470:	28 2f       	mov	r18, r24
    5472:	30 e0       	ldi	r19, 0x00	; 0
    5474:	81 e0       	ldi	r24, 0x01	; 1
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	02 2e       	mov	r0, r18
    547a:	02 c0       	rjmp	.+4      	; 0x5480 <DIO_VidSetPinValue+0x80>
    547c:	88 0f       	add	r24, r24
    547e:	99 1f       	adc	r25, r25
    5480:	0a 94       	dec	r0
    5482:	e2 f7       	brpl	.-8      	; 0x547c <DIO_VidSetPinValue+0x7c>
    5484:	80 95       	com	r24
    5486:	84 23       	and	r24, r20
    5488:	8c 93       	st	X, r24
    548a:	b1 c0       	rjmp	.+354    	; 0x55ee <DIO_VidSetPinValue+0x1ee>
			break;

		case Port_B:
			CLR_BIT(PORTB, pin);
    548c:	a8 e3       	ldi	r26, 0x38	; 56
    548e:	b0 e0       	ldi	r27, 0x00	; 0
    5490:	e8 e3       	ldi	r30, 0x38	; 56
    5492:	f0 e0       	ldi	r31, 0x00	; 0
    5494:	80 81       	ld	r24, Z
    5496:	48 2f       	mov	r20, r24
    5498:	8a 81       	ldd	r24, Y+2	; 0x02
    549a:	28 2f       	mov	r18, r24
    549c:	30 e0       	ldi	r19, 0x00	; 0
    549e:	81 e0       	ldi	r24, 0x01	; 1
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	02 2e       	mov	r0, r18
    54a4:	02 c0       	rjmp	.+4      	; 0x54aa <DIO_VidSetPinValue+0xaa>
    54a6:	88 0f       	add	r24, r24
    54a8:	99 1f       	adc	r25, r25
    54aa:	0a 94       	dec	r0
    54ac:	e2 f7       	brpl	.-8      	; 0x54a6 <DIO_VidSetPinValue+0xa6>
    54ae:	80 95       	com	r24
    54b0:	84 23       	and	r24, r20
    54b2:	8c 93       	st	X, r24
    54b4:	9c c0       	rjmp	.+312    	; 0x55ee <DIO_VidSetPinValue+0x1ee>
			break;

		case Port_C:
			CLR_BIT(PORTC, pin);
    54b6:	a5 e3       	ldi	r26, 0x35	; 53
    54b8:	b0 e0       	ldi	r27, 0x00	; 0
    54ba:	e5 e3       	ldi	r30, 0x35	; 53
    54bc:	f0 e0       	ldi	r31, 0x00	; 0
    54be:	80 81       	ld	r24, Z
    54c0:	48 2f       	mov	r20, r24
    54c2:	8a 81       	ldd	r24, Y+2	; 0x02
    54c4:	28 2f       	mov	r18, r24
    54c6:	30 e0       	ldi	r19, 0x00	; 0
    54c8:	81 e0       	ldi	r24, 0x01	; 1
    54ca:	90 e0       	ldi	r25, 0x00	; 0
    54cc:	02 2e       	mov	r0, r18
    54ce:	02 c0       	rjmp	.+4      	; 0x54d4 <DIO_VidSetPinValue+0xd4>
    54d0:	88 0f       	add	r24, r24
    54d2:	99 1f       	adc	r25, r25
    54d4:	0a 94       	dec	r0
    54d6:	e2 f7       	brpl	.-8      	; 0x54d0 <DIO_VidSetPinValue+0xd0>
    54d8:	80 95       	com	r24
    54da:	84 23       	and	r24, r20
    54dc:	8c 93       	st	X, r24
    54de:	87 c0       	rjmp	.+270    	; 0x55ee <DIO_VidSetPinValue+0x1ee>
			break;

		case Port_D:
			CLR_BIT(PORTD, pin);
    54e0:	a2 e3       	ldi	r26, 0x32	; 50
    54e2:	b0 e0       	ldi	r27, 0x00	; 0
    54e4:	e2 e3       	ldi	r30, 0x32	; 50
    54e6:	f0 e0       	ldi	r31, 0x00	; 0
    54e8:	80 81       	ld	r24, Z
    54ea:	48 2f       	mov	r20, r24
    54ec:	8a 81       	ldd	r24, Y+2	; 0x02
    54ee:	28 2f       	mov	r18, r24
    54f0:	30 e0       	ldi	r19, 0x00	; 0
    54f2:	81 e0       	ldi	r24, 0x01	; 1
    54f4:	90 e0       	ldi	r25, 0x00	; 0
    54f6:	02 2e       	mov	r0, r18
    54f8:	02 c0       	rjmp	.+4      	; 0x54fe <DIO_VidSetPinValue+0xfe>
    54fa:	88 0f       	add	r24, r24
    54fc:	99 1f       	adc	r25, r25
    54fe:	0a 94       	dec	r0
    5500:	e2 f7       	brpl	.-8      	; 0x54fa <DIO_VidSetPinValue+0xfa>
    5502:	80 95       	com	r24
    5504:	84 23       	and	r24, r20
    5506:	8c 93       	st	X, r24
    5508:	72 c0       	rjmp	.+228    	; 0x55ee <DIO_VidSetPinValue+0x1ee>
			break;
		default:
			break;
		}
	}
	else if (value == PinHigh)
    550a:	8b 81       	ldd	r24, Y+3	; 0x03
    550c:	81 30       	cpi	r24, 0x01	; 1
    550e:	09 f0       	breq	.+2      	; 0x5512 <DIO_VidSetPinValue+0x112>
    5510:	6e c0       	rjmp	.+220    	; 0x55ee <DIO_VidSetPinValue+0x1ee>
	{
		switch (port)
    5512:	89 81       	ldd	r24, Y+1	; 0x01
    5514:	28 2f       	mov	r18, r24
    5516:	30 e0       	ldi	r19, 0x00	; 0
    5518:	3d 83       	std	Y+5, r19	; 0x05
    551a:	2c 83       	std	Y+4, r18	; 0x04
    551c:	8c 81       	ldd	r24, Y+4	; 0x04
    551e:	9d 81       	ldd	r25, Y+5	; 0x05
    5520:	81 30       	cpi	r24, 0x01	; 1
    5522:	91 05       	cpc	r25, r1
    5524:	49 f1       	breq	.+82     	; 0x5578 <DIO_VidSetPinValue+0x178>
    5526:	2c 81       	ldd	r18, Y+4	; 0x04
    5528:	3d 81       	ldd	r19, Y+5	; 0x05
    552a:	22 30       	cpi	r18, 0x02	; 2
    552c:	31 05       	cpc	r19, r1
    552e:	2c f4       	brge	.+10     	; 0x553a <DIO_VidSetPinValue+0x13a>
    5530:	8c 81       	ldd	r24, Y+4	; 0x04
    5532:	9d 81       	ldd	r25, Y+5	; 0x05
    5534:	00 97       	sbiw	r24, 0x00	; 0
    5536:	61 f0       	breq	.+24     	; 0x5550 <DIO_VidSetPinValue+0x150>
    5538:	5a c0       	rjmp	.+180    	; 0x55ee <DIO_VidSetPinValue+0x1ee>
    553a:	2c 81       	ldd	r18, Y+4	; 0x04
    553c:	3d 81       	ldd	r19, Y+5	; 0x05
    553e:	22 30       	cpi	r18, 0x02	; 2
    5540:	31 05       	cpc	r19, r1
    5542:	71 f1       	breq	.+92     	; 0x55a0 <DIO_VidSetPinValue+0x1a0>
    5544:	8c 81       	ldd	r24, Y+4	; 0x04
    5546:	9d 81       	ldd	r25, Y+5	; 0x05
    5548:	83 30       	cpi	r24, 0x03	; 3
    554a:	91 05       	cpc	r25, r1
    554c:	e9 f1       	breq	.+122    	; 0x55c8 <DIO_VidSetPinValue+0x1c8>
    554e:	4f c0       	rjmp	.+158    	; 0x55ee <DIO_VidSetPinValue+0x1ee>
		{
		case Port_A:
			SET_BIT(PORTA, pin);
    5550:	ab e3       	ldi	r26, 0x3B	; 59
    5552:	b0 e0       	ldi	r27, 0x00	; 0
    5554:	eb e3       	ldi	r30, 0x3B	; 59
    5556:	f0 e0       	ldi	r31, 0x00	; 0
    5558:	80 81       	ld	r24, Z
    555a:	48 2f       	mov	r20, r24
    555c:	8a 81       	ldd	r24, Y+2	; 0x02
    555e:	28 2f       	mov	r18, r24
    5560:	30 e0       	ldi	r19, 0x00	; 0
    5562:	81 e0       	ldi	r24, 0x01	; 1
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	02 2e       	mov	r0, r18
    5568:	02 c0       	rjmp	.+4      	; 0x556e <DIO_VidSetPinValue+0x16e>
    556a:	88 0f       	add	r24, r24
    556c:	99 1f       	adc	r25, r25
    556e:	0a 94       	dec	r0
    5570:	e2 f7       	brpl	.-8      	; 0x556a <DIO_VidSetPinValue+0x16a>
    5572:	84 2b       	or	r24, r20
    5574:	8c 93       	st	X, r24
    5576:	3b c0       	rjmp	.+118    	; 0x55ee <DIO_VidSetPinValue+0x1ee>
			break;

		case Port_B:
			SET_BIT(PORTB, pin);
    5578:	a8 e3       	ldi	r26, 0x38	; 56
    557a:	b0 e0       	ldi	r27, 0x00	; 0
    557c:	e8 e3       	ldi	r30, 0x38	; 56
    557e:	f0 e0       	ldi	r31, 0x00	; 0
    5580:	80 81       	ld	r24, Z
    5582:	48 2f       	mov	r20, r24
    5584:	8a 81       	ldd	r24, Y+2	; 0x02
    5586:	28 2f       	mov	r18, r24
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	81 e0       	ldi	r24, 0x01	; 1
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	02 2e       	mov	r0, r18
    5590:	02 c0       	rjmp	.+4      	; 0x5596 <DIO_VidSetPinValue+0x196>
    5592:	88 0f       	add	r24, r24
    5594:	99 1f       	adc	r25, r25
    5596:	0a 94       	dec	r0
    5598:	e2 f7       	brpl	.-8      	; 0x5592 <DIO_VidSetPinValue+0x192>
    559a:	84 2b       	or	r24, r20
    559c:	8c 93       	st	X, r24
    559e:	27 c0       	rjmp	.+78     	; 0x55ee <DIO_VidSetPinValue+0x1ee>
			break;

		case Port_C:
			SET_BIT(PORTC, pin);
    55a0:	a5 e3       	ldi	r26, 0x35	; 53
    55a2:	b0 e0       	ldi	r27, 0x00	; 0
    55a4:	e5 e3       	ldi	r30, 0x35	; 53
    55a6:	f0 e0       	ldi	r31, 0x00	; 0
    55a8:	80 81       	ld	r24, Z
    55aa:	48 2f       	mov	r20, r24
    55ac:	8a 81       	ldd	r24, Y+2	; 0x02
    55ae:	28 2f       	mov	r18, r24
    55b0:	30 e0       	ldi	r19, 0x00	; 0
    55b2:	81 e0       	ldi	r24, 0x01	; 1
    55b4:	90 e0       	ldi	r25, 0x00	; 0
    55b6:	02 2e       	mov	r0, r18
    55b8:	02 c0       	rjmp	.+4      	; 0x55be <DIO_VidSetPinValue+0x1be>
    55ba:	88 0f       	add	r24, r24
    55bc:	99 1f       	adc	r25, r25
    55be:	0a 94       	dec	r0
    55c0:	e2 f7       	brpl	.-8      	; 0x55ba <DIO_VidSetPinValue+0x1ba>
    55c2:	84 2b       	or	r24, r20
    55c4:	8c 93       	st	X, r24
    55c6:	13 c0       	rjmp	.+38     	; 0x55ee <DIO_VidSetPinValue+0x1ee>
			break;

		case Port_D:
			SET_BIT(PORTD, pin);
    55c8:	a2 e3       	ldi	r26, 0x32	; 50
    55ca:	b0 e0       	ldi	r27, 0x00	; 0
    55cc:	e2 e3       	ldi	r30, 0x32	; 50
    55ce:	f0 e0       	ldi	r31, 0x00	; 0
    55d0:	80 81       	ld	r24, Z
    55d2:	48 2f       	mov	r20, r24
    55d4:	8a 81       	ldd	r24, Y+2	; 0x02
    55d6:	28 2f       	mov	r18, r24
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	81 e0       	ldi	r24, 0x01	; 1
    55dc:	90 e0       	ldi	r25, 0x00	; 0
    55de:	02 2e       	mov	r0, r18
    55e0:	02 c0       	rjmp	.+4      	; 0x55e6 <DIO_VidSetPinValue+0x1e6>
    55e2:	88 0f       	add	r24, r24
    55e4:	99 1f       	adc	r25, r25
    55e6:	0a 94       	dec	r0
    55e8:	e2 f7       	brpl	.-8      	; 0x55e2 <DIO_VidSetPinValue+0x1e2>
    55ea:	84 2b       	or	r24, r20
    55ec:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
    55ee:	27 96       	adiw	r28, 0x07	; 7
    55f0:	0f b6       	in	r0, 0x3f	; 63
    55f2:	f8 94       	cli
    55f4:	de bf       	out	0x3e, r29	; 62
    55f6:	0f be       	out	0x3f, r0	; 63
    55f8:	cd bf       	out	0x3d, r28	; 61
    55fa:	cf 91       	pop	r28
    55fc:	df 91       	pop	r29
    55fe:	08 95       	ret

00005600 <DIO_VidGetPinValue>:

// getting pin value
et_Status DIO_VidGetPinValue(et_Port port, et_Pin pin)
{
    5600:	df 93       	push	r29
    5602:	cf 93       	push	r28
    5604:	00 d0       	rcall	.+0      	; 0x5606 <DIO_VidGetPinValue+0x6>
    5606:	00 d0       	rcall	.+0      	; 0x5608 <DIO_VidGetPinValue+0x8>
    5608:	00 d0       	rcall	.+0      	; 0x560a <DIO_VidGetPinValue+0xa>
    560a:	cd b7       	in	r28, 0x3d	; 61
    560c:	de b7       	in	r29, 0x3e	; 62
    560e:	89 83       	std	Y+1, r24	; 0x01
    5610:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    5612:	89 81       	ldd	r24, Y+1	; 0x01
    5614:	28 2f       	mov	r18, r24
    5616:	30 e0       	ldi	r19, 0x00	; 0
    5618:	3d 83       	std	Y+5, r19	; 0x05
    561a:	2c 83       	std	Y+4, r18	; 0x04
    561c:	4c 81       	ldd	r20, Y+4	; 0x04
    561e:	5d 81       	ldd	r21, Y+5	; 0x05
    5620:	41 30       	cpi	r20, 0x01	; 1
    5622:	51 05       	cpc	r21, r1
    5624:	49 f1       	breq	.+82     	; 0x5678 <DIO_VidGetPinValue+0x78>
    5626:	8c 81       	ldd	r24, Y+4	; 0x04
    5628:	9d 81       	ldd	r25, Y+5	; 0x05
    562a:	82 30       	cpi	r24, 0x02	; 2
    562c:	91 05       	cpc	r25, r1
    562e:	34 f4       	brge	.+12     	; 0x563c <DIO_VidGetPinValue+0x3c>
    5630:	2c 81       	ldd	r18, Y+4	; 0x04
    5632:	3d 81       	ldd	r19, Y+5	; 0x05
    5634:	21 15       	cp	r18, r1
    5636:	31 05       	cpc	r19, r1
    5638:	61 f0       	breq	.+24     	; 0x5652 <DIO_VidGetPinValue+0x52>
    563a:	57 c0       	rjmp	.+174    	; 0x56ea <DIO_VidGetPinValue+0xea>
    563c:	4c 81       	ldd	r20, Y+4	; 0x04
    563e:	5d 81       	ldd	r21, Y+5	; 0x05
    5640:	42 30       	cpi	r20, 0x02	; 2
    5642:	51 05       	cpc	r21, r1
    5644:	61 f1       	breq	.+88     	; 0x569e <DIO_VidGetPinValue+0x9e>
    5646:	8c 81       	ldd	r24, Y+4	; 0x04
    5648:	9d 81       	ldd	r25, Y+5	; 0x05
    564a:	83 30       	cpi	r24, 0x03	; 3
    564c:	91 05       	cpc	r25, r1
    564e:	d1 f1       	breq	.+116    	; 0x56c4 <DIO_VidGetPinValue+0xc4>
    5650:	4c c0       	rjmp	.+152    	; 0x56ea <DIO_VidGetPinValue+0xea>
	{
	case Port_A:
		return GET_BIT(PINA, pin);
    5652:	e9 e3       	ldi	r30, 0x39	; 57
    5654:	f0 e0       	ldi	r31, 0x00	; 0
    5656:	80 81       	ld	r24, Z
    5658:	28 2f       	mov	r18, r24
    565a:	30 e0       	ldi	r19, 0x00	; 0
    565c:	8a 81       	ldd	r24, Y+2	; 0x02
    565e:	88 2f       	mov	r24, r24
    5660:	90 e0       	ldi	r25, 0x00	; 0
    5662:	a9 01       	movw	r20, r18
    5664:	02 c0       	rjmp	.+4      	; 0x566a <DIO_VidGetPinValue+0x6a>
    5666:	55 95       	asr	r21
    5668:	47 95       	ror	r20
    566a:	8a 95       	dec	r24
    566c:	e2 f7       	brpl	.-8      	; 0x5666 <DIO_VidGetPinValue+0x66>
    566e:	ca 01       	movw	r24, r20
    5670:	58 2f       	mov	r21, r24
    5672:	51 70       	andi	r21, 0x01	; 1
    5674:	5b 83       	std	Y+3, r21	; 0x03
    5676:	3a c0       	rjmp	.+116    	; 0x56ec <DIO_VidGetPinValue+0xec>
		break;

	case Port_B:
		return GET_BIT(PINB, pin);
    5678:	e6 e3       	ldi	r30, 0x36	; 54
    567a:	f0 e0       	ldi	r31, 0x00	; 0
    567c:	80 81       	ld	r24, Z
    567e:	28 2f       	mov	r18, r24
    5680:	30 e0       	ldi	r19, 0x00	; 0
    5682:	8a 81       	ldd	r24, Y+2	; 0x02
    5684:	88 2f       	mov	r24, r24
    5686:	90 e0       	ldi	r25, 0x00	; 0
    5688:	a9 01       	movw	r20, r18
    568a:	02 c0       	rjmp	.+4      	; 0x5690 <DIO_VidGetPinValue+0x90>
    568c:	55 95       	asr	r21
    568e:	47 95       	ror	r20
    5690:	8a 95       	dec	r24
    5692:	e2 f7       	brpl	.-8      	; 0x568c <DIO_VidGetPinValue+0x8c>
    5694:	ca 01       	movw	r24, r20
    5696:	58 2f       	mov	r21, r24
    5698:	51 70       	andi	r21, 0x01	; 1
    569a:	5b 83       	std	Y+3, r21	; 0x03
    569c:	27 c0       	rjmp	.+78     	; 0x56ec <DIO_VidGetPinValue+0xec>
		break;

	case Port_C:
		return GET_BIT(PINC, pin);
    569e:	e3 e3       	ldi	r30, 0x33	; 51
    56a0:	f0 e0       	ldi	r31, 0x00	; 0
    56a2:	80 81       	ld	r24, Z
    56a4:	28 2f       	mov	r18, r24
    56a6:	30 e0       	ldi	r19, 0x00	; 0
    56a8:	8a 81       	ldd	r24, Y+2	; 0x02
    56aa:	88 2f       	mov	r24, r24
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	a9 01       	movw	r20, r18
    56b0:	02 c0       	rjmp	.+4      	; 0x56b6 <DIO_VidGetPinValue+0xb6>
    56b2:	55 95       	asr	r21
    56b4:	47 95       	ror	r20
    56b6:	8a 95       	dec	r24
    56b8:	e2 f7       	brpl	.-8      	; 0x56b2 <DIO_VidGetPinValue+0xb2>
    56ba:	ca 01       	movw	r24, r20
    56bc:	58 2f       	mov	r21, r24
    56be:	51 70       	andi	r21, 0x01	; 1
    56c0:	5b 83       	std	Y+3, r21	; 0x03
    56c2:	14 c0       	rjmp	.+40     	; 0x56ec <DIO_VidGetPinValue+0xec>
		break;

	case Port_D:
		return GET_BIT(PIND, pin);
    56c4:	e0 e3       	ldi	r30, 0x30	; 48
    56c6:	f0 e0       	ldi	r31, 0x00	; 0
    56c8:	80 81       	ld	r24, Z
    56ca:	28 2f       	mov	r18, r24
    56cc:	30 e0       	ldi	r19, 0x00	; 0
    56ce:	8a 81       	ldd	r24, Y+2	; 0x02
    56d0:	88 2f       	mov	r24, r24
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	a9 01       	movw	r20, r18
    56d6:	02 c0       	rjmp	.+4      	; 0x56dc <DIO_VidGetPinValue+0xdc>
    56d8:	55 95       	asr	r21
    56da:	47 95       	ror	r20
    56dc:	8a 95       	dec	r24
    56de:	e2 f7       	brpl	.-8      	; 0x56d8 <DIO_VidGetPinValue+0xd8>
    56e0:	ca 01       	movw	r24, r20
    56e2:	58 2f       	mov	r21, r24
    56e4:	51 70       	andi	r21, 0x01	; 1
    56e6:	5b 83       	std	Y+3, r21	; 0x03
    56e8:	01 c0       	rjmp	.+2      	; 0x56ec <DIO_VidGetPinValue+0xec>
    56ea:	02 c0       	rjmp	.+4      	; 0x56f0 <DIO_VidGetPinValue+0xf0>
		break;
	default:
		break;
	}
}
    56ec:	8b 81       	ldd	r24, Y+3	; 0x03
    56ee:	8e 83       	std	Y+6, r24	; 0x06
    56f0:	8e 81       	ldd	r24, Y+6	; 0x06
    56f2:	26 96       	adiw	r28, 0x06	; 6
    56f4:	0f b6       	in	r0, 0x3f	; 63
    56f6:	f8 94       	cli
    56f8:	de bf       	out	0x3e, r29	; 62
    56fa:	0f be       	out	0x3f, r0	; 63
    56fc:	cd bf       	out	0x3d, r28	; 61
    56fe:	cf 91       	pop	r28
    5700:	df 91       	pop	r29
    5702:	08 95       	ret

00005704 <LCD_VidInit>:
#include "LCD_interface.h"
#include <util/delay.h>
#include <stdlib.h>

void LCD_VidInit(void)
{
    5704:	df 93       	push	r29
    5706:	cf 93       	push	r28
    5708:	cd b7       	in	r28, 0x3d	; 61
    570a:	de b7       	in	r29, 0x3e	; 62
    570c:	6c 97       	sbiw	r28, 0x1c	; 28
    570e:	0f b6       	in	r0, 0x3f	; 63
    5710:	f8 94       	cli
    5712:	de bf       	out	0x3e, r29	; 62
    5714:	0f be       	out	0x3f, r0	; 63
    5716:	cd bf       	out	0x3d, r28	; 61
	//Configure Enable and Rs as Output
	DIO_VidSetPinDirection(LCD_PORT,LCD_RS,Output);
    5718:	80 e0       	ldi	r24, 0x00	; 0
    571a:	61 e0       	ldi	r22, 0x01	; 1
    571c:	41 e0       	ldi	r20, 0x01	; 1
    571e:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,LCD_E,Output);
    5722:	80 e0       	ldi	r24, 0x00	; 0
    5724:	62 e0       	ldi	r22, 0x02	; 2
    5726:	41 e0       	ldi	r20, 0x01	; 1
    5728:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
    572c:	80 e0       	ldi	r24, 0x00	; 0
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	a0 ea       	ldi	r26, 0xA0	; 160
    5732:	b1 e4       	ldi	r27, 0x41	; 65
    5734:	89 8f       	std	Y+25, r24	; 0x19
    5736:	9a 8f       	std	Y+26, r25	; 0x1a
    5738:	ab 8f       	std	Y+27, r26	; 0x1b
    573a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    573c:	69 8d       	ldd	r22, Y+25	; 0x19
    573e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5740:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5742:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5744:	20 e0       	ldi	r18, 0x00	; 0
    5746:	30 e0       	ldi	r19, 0x00	; 0
    5748:	4a ef       	ldi	r20, 0xFA	; 250
    574a:	54 e4       	ldi	r21, 0x44	; 68
    574c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5750:	dc 01       	movw	r26, r24
    5752:	cb 01       	movw	r24, r22
    5754:	8d 8b       	std	Y+21, r24	; 0x15
    5756:	9e 8b       	std	Y+22, r25	; 0x16
    5758:	af 8b       	std	Y+23, r26	; 0x17
    575a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    575c:	6d 89       	ldd	r22, Y+21	; 0x15
    575e:	7e 89       	ldd	r23, Y+22	; 0x16
    5760:	8f 89       	ldd	r24, Y+23	; 0x17
    5762:	98 8d       	ldd	r25, Y+24	; 0x18
    5764:	20 e0       	ldi	r18, 0x00	; 0
    5766:	30 e0       	ldi	r19, 0x00	; 0
    5768:	40 e8       	ldi	r20, 0x80	; 128
    576a:	5f e3       	ldi	r21, 0x3F	; 63
    576c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5770:	88 23       	and	r24, r24
    5772:	2c f4       	brge	.+10     	; 0x577e <LCD_VidInit+0x7a>
		__ticks = 1;
    5774:	81 e0       	ldi	r24, 0x01	; 1
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	9c 8b       	std	Y+20, r25	; 0x14
    577a:	8b 8b       	std	Y+19, r24	; 0x13
    577c:	3f c0       	rjmp	.+126    	; 0x57fc <LCD_VidInit+0xf8>
	else if (__tmp > 65535)
    577e:	6d 89       	ldd	r22, Y+21	; 0x15
    5780:	7e 89       	ldd	r23, Y+22	; 0x16
    5782:	8f 89       	ldd	r24, Y+23	; 0x17
    5784:	98 8d       	ldd	r25, Y+24	; 0x18
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	3f ef       	ldi	r19, 0xFF	; 255
    578a:	4f e7       	ldi	r20, 0x7F	; 127
    578c:	57 e4       	ldi	r21, 0x47	; 71
    578e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5792:	18 16       	cp	r1, r24
    5794:	4c f5       	brge	.+82     	; 0x57e8 <LCD_VidInit+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5796:	69 8d       	ldd	r22, Y+25	; 0x19
    5798:	7a 8d       	ldd	r23, Y+26	; 0x1a
    579a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    579c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    579e:	20 e0       	ldi	r18, 0x00	; 0
    57a0:	30 e0       	ldi	r19, 0x00	; 0
    57a2:	40 e2       	ldi	r20, 0x20	; 32
    57a4:	51 e4       	ldi	r21, 0x41	; 65
    57a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    57aa:	dc 01       	movw	r26, r24
    57ac:	cb 01       	movw	r24, r22
    57ae:	bc 01       	movw	r22, r24
    57b0:	cd 01       	movw	r24, r26
    57b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    57b6:	dc 01       	movw	r26, r24
    57b8:	cb 01       	movw	r24, r22
    57ba:	9c 8b       	std	Y+20, r25	; 0x14
    57bc:	8b 8b       	std	Y+19, r24	; 0x13
    57be:	0f c0       	rjmp	.+30     	; 0x57de <LCD_VidInit+0xda>
    57c0:	88 ec       	ldi	r24, 0xC8	; 200
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	9a 8b       	std	Y+18, r25	; 0x12
    57c6:	89 8b       	std	Y+17, r24	; 0x11
    57c8:	89 89       	ldd	r24, Y+17	; 0x11
    57ca:	9a 89       	ldd	r25, Y+18	; 0x12
    57cc:	01 97       	sbiw	r24, 0x01	; 1
    57ce:	f1 f7       	brne	.-4      	; 0x57cc <LCD_VidInit+0xc8>
    57d0:	9a 8b       	std	Y+18, r25	; 0x12
    57d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57d4:	8b 89       	ldd	r24, Y+19	; 0x13
    57d6:	9c 89       	ldd	r25, Y+20	; 0x14
    57d8:	01 97       	sbiw	r24, 0x01	; 1
    57da:	9c 8b       	std	Y+20, r25	; 0x14
    57dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57de:	8b 89       	ldd	r24, Y+19	; 0x13
    57e0:	9c 89       	ldd	r25, Y+20	; 0x14
    57e2:	00 97       	sbiw	r24, 0x00	; 0
    57e4:	69 f7       	brne	.-38     	; 0x57c0 <LCD_VidInit+0xbc>
    57e6:	14 c0       	rjmp	.+40     	; 0x5810 <LCD_VidInit+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57e8:	6d 89       	ldd	r22, Y+21	; 0x15
    57ea:	7e 89       	ldd	r23, Y+22	; 0x16
    57ec:	8f 89       	ldd	r24, Y+23	; 0x17
    57ee:	98 8d       	ldd	r25, Y+24	; 0x18
    57f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    57f4:	dc 01       	movw	r26, r24
    57f6:	cb 01       	movw	r24, r22
    57f8:	9c 8b       	std	Y+20, r25	; 0x14
    57fa:	8b 8b       	std	Y+19, r24	; 0x13
    57fc:	8b 89       	ldd	r24, Y+19	; 0x13
    57fe:	9c 89       	ldd	r25, Y+20	; 0x14
    5800:	98 8b       	std	Y+16, r25	; 0x10
    5802:	8f 87       	std	Y+15, r24	; 0x0f
    5804:	8f 85       	ldd	r24, Y+15	; 0x0f
    5806:	98 89       	ldd	r25, Y+16	; 0x10
    5808:	01 97       	sbiw	r24, 0x01	; 1
    580a:	f1 f7       	brne	.-4      	; 0x5808 <LCD_VidInit+0x104>
    580c:	98 8b       	std	Y+16, r25	; 0x10
    580e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

	//Configure The Data Pins
	DIO_VidSetPinDirection(LCD_PORT,Pin3,Output);
    5810:	80 e0       	ldi	r24, 0x00	; 0
    5812:	63 e0       	ldi	r22, 0x03	; 3
    5814:	41 e0       	ldi	r20, 0x01	; 1
    5816:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,Pin4,Output);
    581a:	80 e0       	ldi	r24, 0x00	; 0
    581c:	64 e0       	ldi	r22, 0x04	; 4
    581e:	41 e0       	ldi	r20, 0x01	; 1
    5820:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,Pin5,Output);
    5824:	80 e0       	ldi	r24, 0x00	; 0
    5826:	65 e0       	ldi	r22, 0x05	; 5
    5828:	41 e0       	ldi	r20, 0x01	; 1
    582a:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,Pin6,Output);
    582e:	80 e0       	ldi	r24, 0x00	; 0
    5830:	66 e0       	ldi	r22, 0x06	; 6
    5832:	41 e0       	ldi	r20, 0x01	; 1
    5834:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
    5838:	80 e0       	ldi	r24, 0x00	; 0
    583a:	90 e0       	ldi	r25, 0x00	; 0
    583c:	a0 ea       	ldi	r26, 0xA0	; 160
    583e:	b1 e4       	ldi	r27, 0x41	; 65
    5840:	8b 87       	std	Y+11, r24	; 0x0b
    5842:	9c 87       	std	Y+12, r25	; 0x0c
    5844:	ad 87       	std	Y+13, r26	; 0x0d
    5846:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5848:	6b 85       	ldd	r22, Y+11	; 0x0b
    584a:	7c 85       	ldd	r23, Y+12	; 0x0c
    584c:	8d 85       	ldd	r24, Y+13	; 0x0d
    584e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5850:	20 e0       	ldi	r18, 0x00	; 0
    5852:	30 e0       	ldi	r19, 0x00	; 0
    5854:	4a ef       	ldi	r20, 0xFA	; 250
    5856:	54 e4       	ldi	r21, 0x44	; 68
    5858:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    585c:	dc 01       	movw	r26, r24
    585e:	cb 01       	movw	r24, r22
    5860:	8f 83       	std	Y+7, r24	; 0x07
    5862:	98 87       	std	Y+8, r25	; 0x08
    5864:	a9 87       	std	Y+9, r26	; 0x09
    5866:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5868:	6f 81       	ldd	r22, Y+7	; 0x07
    586a:	78 85       	ldd	r23, Y+8	; 0x08
    586c:	89 85       	ldd	r24, Y+9	; 0x09
    586e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5870:	20 e0       	ldi	r18, 0x00	; 0
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	40 e8       	ldi	r20, 0x80	; 128
    5876:	5f e3       	ldi	r21, 0x3F	; 63
    5878:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    587c:	88 23       	and	r24, r24
    587e:	2c f4       	brge	.+10     	; 0x588a <LCD_VidInit+0x186>
		__ticks = 1;
    5880:	81 e0       	ldi	r24, 0x01	; 1
    5882:	90 e0       	ldi	r25, 0x00	; 0
    5884:	9e 83       	std	Y+6, r25	; 0x06
    5886:	8d 83       	std	Y+5, r24	; 0x05
    5888:	3f c0       	rjmp	.+126    	; 0x5908 <LCD_VidInit+0x204>
	else if (__tmp > 65535)
    588a:	6f 81       	ldd	r22, Y+7	; 0x07
    588c:	78 85       	ldd	r23, Y+8	; 0x08
    588e:	89 85       	ldd	r24, Y+9	; 0x09
    5890:	9a 85       	ldd	r25, Y+10	; 0x0a
    5892:	20 e0       	ldi	r18, 0x00	; 0
    5894:	3f ef       	ldi	r19, 0xFF	; 255
    5896:	4f e7       	ldi	r20, 0x7F	; 127
    5898:	57 e4       	ldi	r21, 0x47	; 71
    589a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    589e:	18 16       	cp	r1, r24
    58a0:	4c f5       	brge	.+82     	; 0x58f4 <LCD_VidInit+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    58a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    58a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    58a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    58aa:	20 e0       	ldi	r18, 0x00	; 0
    58ac:	30 e0       	ldi	r19, 0x00	; 0
    58ae:	40 e2       	ldi	r20, 0x20	; 32
    58b0:	51 e4       	ldi	r21, 0x41	; 65
    58b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    58b6:	dc 01       	movw	r26, r24
    58b8:	cb 01       	movw	r24, r22
    58ba:	bc 01       	movw	r22, r24
    58bc:	cd 01       	movw	r24, r26
    58be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    58c2:	dc 01       	movw	r26, r24
    58c4:	cb 01       	movw	r24, r22
    58c6:	9e 83       	std	Y+6, r25	; 0x06
    58c8:	8d 83       	std	Y+5, r24	; 0x05
    58ca:	0f c0       	rjmp	.+30     	; 0x58ea <LCD_VidInit+0x1e6>
    58cc:	88 ec       	ldi	r24, 0xC8	; 200
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	9c 83       	std	Y+4, r25	; 0x04
    58d2:	8b 83       	std	Y+3, r24	; 0x03
    58d4:	8b 81       	ldd	r24, Y+3	; 0x03
    58d6:	9c 81       	ldd	r25, Y+4	; 0x04
    58d8:	01 97       	sbiw	r24, 0x01	; 1
    58da:	f1 f7       	brne	.-4      	; 0x58d8 <LCD_VidInit+0x1d4>
    58dc:	9c 83       	std	Y+4, r25	; 0x04
    58de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58e0:	8d 81       	ldd	r24, Y+5	; 0x05
    58e2:	9e 81       	ldd	r25, Y+6	; 0x06
    58e4:	01 97       	sbiw	r24, 0x01	; 1
    58e6:	9e 83       	std	Y+6, r25	; 0x06
    58e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58ea:	8d 81       	ldd	r24, Y+5	; 0x05
    58ec:	9e 81       	ldd	r25, Y+6	; 0x06
    58ee:	00 97       	sbiw	r24, 0x00	; 0
    58f0:	69 f7       	brne	.-38     	; 0x58cc <LCD_VidInit+0x1c8>
    58f2:	14 c0       	rjmp	.+40     	; 0x591c <LCD_VidInit+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58f4:	6f 81       	ldd	r22, Y+7	; 0x07
    58f6:	78 85       	ldd	r23, Y+8	; 0x08
    58f8:	89 85       	ldd	r24, Y+9	; 0x09
    58fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    58fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5900:	dc 01       	movw	r26, r24
    5902:	cb 01       	movw	r24, r22
    5904:	9e 83       	std	Y+6, r25	; 0x06
    5906:	8d 83       	std	Y+5, r24	; 0x05
    5908:	8d 81       	ldd	r24, Y+5	; 0x05
    590a:	9e 81       	ldd	r25, Y+6	; 0x06
    590c:	9a 83       	std	Y+2, r25	; 0x02
    590e:	89 83       	std	Y+1, r24	; 0x01
    5910:	89 81       	ldd	r24, Y+1	; 0x01
    5912:	9a 81       	ldd	r25, Y+2	; 0x02
    5914:	01 97       	sbiw	r24, 0x01	; 1
    5916:	f1 f7       	brne	.-4      	; 0x5914 <LCD_VidInit+0x210>
    5918:	9a 83       	std	Y+2, r25	; 0x02
    591a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	//Send Commands 0x33 0x32 0x28 To init Lcd
	LCD_VidSendCommand(0x33);
    591c:	83 e3       	ldi	r24, 0x33	; 51
    591e:	0e 94 a6 2c 	call	0x594c	; 0x594c <LCD_VidSendCommand>
	LCD_VidSendCommand(0x32);
    5922:	82 e3       	ldi	r24, 0x32	; 50
    5924:	0e 94 a6 2c 	call	0x594c	; 0x594c <LCD_VidSendCommand>
	LCD_VidSendCommand(0x28);
    5928:	88 e2       	ldi	r24, 0x28	; 40
    592a:	0e 94 a6 2c 	call	0x594c	; 0x594c <LCD_VidSendCommand>
	LCD_VidSendCommand(0x0C);
    592e:	8c e0       	ldi	r24, 0x0C	; 12
    5930:	0e 94 a6 2c 	call	0x594c	; 0x594c <LCD_VidSendCommand>
	LCD_VidSendCommand(0x01);
    5934:	81 e0       	ldi	r24, 0x01	; 1
    5936:	0e 94 a6 2c 	call	0x594c	; 0x594c <LCD_VidSendCommand>
}
    593a:	6c 96       	adiw	r28, 0x1c	; 28
    593c:	0f b6       	in	r0, 0x3f	; 63
    593e:	f8 94       	cli
    5940:	de bf       	out	0x3e, r29	; 62
    5942:	0f be       	out	0x3f, r0	; 63
    5944:	cd bf       	out	0x3d, r28	; 61
    5946:	cf 91       	pop	r28
    5948:	df 91       	pop	r29
    594a:	08 95       	ret

0000594c <LCD_VidSendCommand>:

void LCD_VidSendCommand(u8 Copy_u8Command)
{
    594c:	0f 93       	push	r16
    594e:	1f 93       	push	r17
    5950:	df 93       	push	r29
    5952:	cf 93       	push	r28
    5954:	cd b7       	in	r28, 0x3d	; 61
    5956:	de b7       	in	r29, 0x3e	; 62
    5958:	c5 59       	subi	r28, 0x95	; 149
    595a:	d0 40       	sbci	r29, 0x00	; 0
    595c:	0f b6       	in	r0, 0x3f	; 63
    595e:	f8 94       	cli
    5960:	de bf       	out	0x3e, r29	; 62
    5962:	0f be       	out	0x3f, r0	; 63
    5964:	cd bf       	out	0x3d, r28	; 61
    5966:	fe 01       	movw	r30, r28
    5968:	eb 56       	subi	r30, 0x6B	; 107
    596a:	ff 4f       	sbci	r31, 0xFF	; 255
    596c:	80 83       	st	Z, r24

	//Clear RS
	DIO_VidSetPinValue(LCD_PORT,LCD_RS,PinLow);
    596e:	80 e0       	ldi	r24, 0x00	; 0
    5970:	61 e0       	ldi	r22, 0x01	; 1
    5972:	40 e0       	ldi	r20, 0x00	; 0
    5974:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    5978:	fe 01       	movw	r30, r28
    597a:	ef 56       	subi	r30, 0x6F	; 111
    597c:	ff 4f       	sbci	r31, 0xFF	; 255
    597e:	80 e0       	ldi	r24, 0x00	; 0
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	a0 e8       	ldi	r26, 0x80	; 128
    5984:	bf e3       	ldi	r27, 0x3F	; 63
    5986:	80 83       	st	Z, r24
    5988:	91 83       	std	Z+1, r25	; 0x01
    598a:	a2 83       	std	Z+2, r26	; 0x02
    598c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    598e:	8e 01       	movw	r16, r28
    5990:	03 57       	subi	r16, 0x73	; 115
    5992:	1f 4f       	sbci	r17, 0xFF	; 255
    5994:	fe 01       	movw	r30, r28
    5996:	ef 56       	subi	r30, 0x6F	; 111
    5998:	ff 4f       	sbci	r31, 0xFF	; 255
    599a:	60 81       	ld	r22, Z
    599c:	71 81       	ldd	r23, Z+1	; 0x01
    599e:	82 81       	ldd	r24, Z+2	; 0x02
    59a0:	93 81       	ldd	r25, Z+3	; 0x03
    59a2:	2b ea       	ldi	r18, 0xAB	; 171
    59a4:	3a ea       	ldi	r19, 0xAA	; 170
    59a6:	4a e2       	ldi	r20, 0x2A	; 42
    59a8:	50 e4       	ldi	r21, 0x40	; 64
    59aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    59ae:	dc 01       	movw	r26, r24
    59b0:	cb 01       	movw	r24, r22
    59b2:	f8 01       	movw	r30, r16
    59b4:	80 83       	st	Z, r24
    59b6:	91 83       	std	Z+1, r25	; 0x01
    59b8:	a2 83       	std	Z+2, r26	; 0x02
    59ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    59bc:	fe 01       	movw	r30, r28
    59be:	e3 57       	subi	r30, 0x73	; 115
    59c0:	ff 4f       	sbci	r31, 0xFF	; 255
    59c2:	60 81       	ld	r22, Z
    59c4:	71 81       	ldd	r23, Z+1	; 0x01
    59c6:	82 81       	ldd	r24, Z+2	; 0x02
    59c8:	93 81       	ldd	r25, Z+3	; 0x03
    59ca:	20 e0       	ldi	r18, 0x00	; 0
    59cc:	30 e0       	ldi	r19, 0x00	; 0
    59ce:	40 e8       	ldi	r20, 0x80	; 128
    59d0:	5f e3       	ldi	r21, 0x3F	; 63
    59d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    59d6:	88 23       	and	r24, r24
    59d8:	34 f4       	brge	.+12     	; 0x59e6 <LCD_VidSendCommand+0x9a>
		__ticks = 1;
    59da:	fe 01       	movw	r30, r28
    59dc:	e4 57       	subi	r30, 0x74	; 116
    59de:	ff 4f       	sbci	r31, 0xFF	; 255
    59e0:	81 e0       	ldi	r24, 0x01	; 1
    59e2:	80 83       	st	Z, r24
    59e4:	e0 c0       	rjmp	.+448    	; 0x5ba6 <LCD_VidSendCommand+0x25a>
	else if (__tmp > 255)
    59e6:	fe 01       	movw	r30, r28
    59e8:	e3 57       	subi	r30, 0x73	; 115
    59ea:	ff 4f       	sbci	r31, 0xFF	; 255
    59ec:	60 81       	ld	r22, Z
    59ee:	71 81       	ldd	r23, Z+1	; 0x01
    59f0:	82 81       	ldd	r24, Z+2	; 0x02
    59f2:	93 81       	ldd	r25, Z+3	; 0x03
    59f4:	20 e0       	ldi	r18, 0x00	; 0
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	4f e7       	ldi	r20, 0x7F	; 127
    59fa:	53 e4       	ldi	r21, 0x43	; 67
    59fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5a00:	18 16       	cp	r1, r24
    5a02:	0c f0       	brlt	.+2      	; 0x5a06 <LCD_VidSendCommand+0xba>
    5a04:	c0 c0       	rjmp	.+384    	; 0x5b86 <LCD_VidSendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    5a06:	fe 01       	movw	r30, r28
    5a08:	ef 56       	subi	r30, 0x6F	; 111
    5a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a0c:	60 81       	ld	r22, Z
    5a0e:	71 81       	ldd	r23, Z+1	; 0x01
    5a10:	82 81       	ldd	r24, Z+2	; 0x02
    5a12:	93 81       	ldd	r25, Z+3	; 0x03
    5a14:	20 e0       	ldi	r18, 0x00	; 0
    5a16:	30 e0       	ldi	r19, 0x00	; 0
    5a18:	4a e7       	ldi	r20, 0x7A	; 122
    5a1a:	54 e4       	ldi	r21, 0x44	; 68
    5a1c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    5a20:	dc 01       	movw	r26, r24
    5a22:	cb 01       	movw	r24, r22
    5a24:	fe 01       	movw	r30, r28
    5a26:	e8 57       	subi	r30, 0x78	; 120
    5a28:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2a:	80 83       	st	Z, r24
    5a2c:	91 83       	std	Z+1, r25	; 0x01
    5a2e:	a2 83       	std	Z+2, r26	; 0x02
    5a30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a32:	8e 01       	movw	r16, r28
    5a34:	0c 57       	subi	r16, 0x7C	; 124
    5a36:	1f 4f       	sbci	r17, 0xFF	; 255
    5a38:	fe 01       	movw	r30, r28
    5a3a:	e8 57       	subi	r30, 0x78	; 120
    5a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3e:	60 81       	ld	r22, Z
    5a40:	71 81       	ldd	r23, Z+1	; 0x01
    5a42:	82 81       	ldd	r24, Z+2	; 0x02
    5a44:	93 81       	ldd	r25, Z+3	; 0x03
    5a46:	20 e0       	ldi	r18, 0x00	; 0
    5a48:	30 e0       	ldi	r19, 0x00	; 0
    5a4a:	4a ef       	ldi	r20, 0xFA	; 250
    5a4c:	54 e4       	ldi	r21, 0x44	; 68
    5a4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5a52:	dc 01       	movw	r26, r24
    5a54:	cb 01       	movw	r24, r22
    5a56:	f8 01       	movw	r30, r16
    5a58:	80 83       	st	Z, r24
    5a5a:	91 83       	std	Z+1, r25	; 0x01
    5a5c:	a2 83       	std	Z+2, r26	; 0x02
    5a5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a60:	fe 01       	movw	r30, r28
    5a62:	ec 57       	subi	r30, 0x7C	; 124
    5a64:	ff 4f       	sbci	r31, 0xFF	; 255
    5a66:	60 81       	ld	r22, Z
    5a68:	71 81       	ldd	r23, Z+1	; 0x01
    5a6a:	82 81       	ldd	r24, Z+2	; 0x02
    5a6c:	93 81       	ldd	r25, Z+3	; 0x03
    5a6e:	20 e0       	ldi	r18, 0x00	; 0
    5a70:	30 e0       	ldi	r19, 0x00	; 0
    5a72:	40 e8       	ldi	r20, 0x80	; 128
    5a74:	5f e3       	ldi	r21, 0x3F	; 63
    5a76:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5a7a:	88 23       	and	r24, r24
    5a7c:	44 f4       	brge	.+16     	; 0x5a8e <LCD_VidSendCommand+0x142>
		__ticks = 1;
    5a7e:	fe 01       	movw	r30, r28
    5a80:	ee 57       	subi	r30, 0x7E	; 126
    5a82:	ff 4f       	sbci	r31, 0xFF	; 255
    5a84:	81 e0       	ldi	r24, 0x01	; 1
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	91 83       	std	Z+1, r25	; 0x01
    5a8a:	80 83       	st	Z, r24
    5a8c:	64 c0       	rjmp	.+200    	; 0x5b56 <LCD_VidSendCommand+0x20a>
	else if (__tmp > 65535)
    5a8e:	fe 01       	movw	r30, r28
    5a90:	ec 57       	subi	r30, 0x7C	; 124
    5a92:	ff 4f       	sbci	r31, 0xFF	; 255
    5a94:	60 81       	ld	r22, Z
    5a96:	71 81       	ldd	r23, Z+1	; 0x01
    5a98:	82 81       	ldd	r24, Z+2	; 0x02
    5a9a:	93 81       	ldd	r25, Z+3	; 0x03
    5a9c:	20 e0       	ldi	r18, 0x00	; 0
    5a9e:	3f ef       	ldi	r19, 0xFF	; 255
    5aa0:	4f e7       	ldi	r20, 0x7F	; 127
    5aa2:	57 e4       	ldi	r21, 0x47	; 71
    5aa4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5aa8:	18 16       	cp	r1, r24
    5aaa:	0c f0       	brlt	.+2      	; 0x5aae <LCD_VidSendCommand+0x162>
    5aac:	43 c0       	rjmp	.+134    	; 0x5b34 <LCD_VidSendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5aae:	fe 01       	movw	r30, r28
    5ab0:	e8 57       	subi	r30, 0x78	; 120
    5ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab4:	60 81       	ld	r22, Z
    5ab6:	71 81       	ldd	r23, Z+1	; 0x01
    5ab8:	82 81       	ldd	r24, Z+2	; 0x02
    5aba:	93 81       	ldd	r25, Z+3	; 0x03
    5abc:	20 e0       	ldi	r18, 0x00	; 0
    5abe:	30 e0       	ldi	r19, 0x00	; 0
    5ac0:	40 e2       	ldi	r20, 0x20	; 32
    5ac2:	51 e4       	ldi	r21, 0x41	; 65
    5ac4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5ac8:	dc 01       	movw	r26, r24
    5aca:	cb 01       	movw	r24, r22
    5acc:	8e 01       	movw	r16, r28
    5ace:	0e 57       	subi	r16, 0x7E	; 126
    5ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    5ad2:	bc 01       	movw	r22, r24
    5ad4:	cd 01       	movw	r24, r26
    5ad6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5ada:	dc 01       	movw	r26, r24
    5adc:	cb 01       	movw	r24, r22
    5ade:	f8 01       	movw	r30, r16
    5ae0:	91 83       	std	Z+1, r25	; 0x01
    5ae2:	80 83       	st	Z, r24
    5ae4:	1f c0       	rjmp	.+62     	; 0x5b24 <LCD_VidSendCommand+0x1d8>
    5ae6:	fe 01       	movw	r30, r28
    5ae8:	e0 58       	subi	r30, 0x80	; 128
    5aea:	ff 4f       	sbci	r31, 0xFF	; 255
    5aec:	88 ec       	ldi	r24, 0xC8	; 200
    5aee:	90 e0       	ldi	r25, 0x00	; 0
    5af0:	91 83       	std	Z+1, r25	; 0x01
    5af2:	80 83       	st	Z, r24
    5af4:	fe 01       	movw	r30, r28
    5af6:	e0 58       	subi	r30, 0x80	; 128
    5af8:	ff 4f       	sbci	r31, 0xFF	; 255
    5afa:	80 81       	ld	r24, Z
    5afc:	91 81       	ldd	r25, Z+1	; 0x01
    5afe:	01 97       	sbiw	r24, 0x01	; 1
    5b00:	f1 f7       	brne	.-4      	; 0x5afe <LCD_VidSendCommand+0x1b2>
    5b02:	fe 01       	movw	r30, r28
    5b04:	e0 58       	subi	r30, 0x80	; 128
    5b06:	ff 4f       	sbci	r31, 0xFF	; 255
    5b08:	91 83       	std	Z+1, r25	; 0x01
    5b0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b0c:	de 01       	movw	r26, r28
    5b0e:	ae 57       	subi	r26, 0x7E	; 126
    5b10:	bf 4f       	sbci	r27, 0xFF	; 255
    5b12:	fe 01       	movw	r30, r28
    5b14:	ee 57       	subi	r30, 0x7E	; 126
    5b16:	ff 4f       	sbci	r31, 0xFF	; 255
    5b18:	80 81       	ld	r24, Z
    5b1a:	91 81       	ldd	r25, Z+1	; 0x01
    5b1c:	01 97       	sbiw	r24, 0x01	; 1
    5b1e:	11 96       	adiw	r26, 0x01	; 1
    5b20:	9c 93       	st	X, r25
    5b22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b24:	fe 01       	movw	r30, r28
    5b26:	ee 57       	subi	r30, 0x7E	; 126
    5b28:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2a:	80 81       	ld	r24, Z
    5b2c:	91 81       	ldd	r25, Z+1	; 0x01
    5b2e:	00 97       	sbiw	r24, 0x00	; 0
    5b30:	d1 f6       	brne	.-76     	; 0x5ae6 <LCD_VidSendCommand+0x19a>
    5b32:	4b c0       	rjmp	.+150    	; 0x5bca <LCD_VidSendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b34:	8e 01       	movw	r16, r28
    5b36:	0e 57       	subi	r16, 0x7E	; 126
    5b38:	1f 4f       	sbci	r17, 0xFF	; 255
    5b3a:	fe 01       	movw	r30, r28
    5b3c:	ec 57       	subi	r30, 0x7C	; 124
    5b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b40:	60 81       	ld	r22, Z
    5b42:	71 81       	ldd	r23, Z+1	; 0x01
    5b44:	82 81       	ldd	r24, Z+2	; 0x02
    5b46:	93 81       	ldd	r25, Z+3	; 0x03
    5b48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5b4c:	dc 01       	movw	r26, r24
    5b4e:	cb 01       	movw	r24, r22
    5b50:	f8 01       	movw	r30, r16
    5b52:	91 83       	std	Z+1, r25	; 0x01
    5b54:	80 83       	st	Z, r24
    5b56:	de 01       	movw	r26, r28
    5b58:	a2 58       	subi	r26, 0x82	; 130
    5b5a:	bf 4f       	sbci	r27, 0xFF	; 255
    5b5c:	fe 01       	movw	r30, r28
    5b5e:	ee 57       	subi	r30, 0x7E	; 126
    5b60:	ff 4f       	sbci	r31, 0xFF	; 255
    5b62:	80 81       	ld	r24, Z
    5b64:	91 81       	ldd	r25, Z+1	; 0x01
    5b66:	11 96       	adiw	r26, 0x01	; 1
    5b68:	9c 93       	st	X, r25
    5b6a:	8e 93       	st	-X, r24
    5b6c:	fe 01       	movw	r30, r28
    5b6e:	e2 58       	subi	r30, 0x82	; 130
    5b70:	ff 4f       	sbci	r31, 0xFF	; 255
    5b72:	80 81       	ld	r24, Z
    5b74:	91 81       	ldd	r25, Z+1	; 0x01
    5b76:	01 97       	sbiw	r24, 0x01	; 1
    5b78:	f1 f7       	brne	.-4      	; 0x5b76 <LCD_VidSendCommand+0x22a>
    5b7a:	fe 01       	movw	r30, r28
    5b7c:	e2 58       	subi	r30, 0x82	; 130
    5b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b80:	91 83       	std	Z+1, r25	; 0x01
    5b82:	80 83       	st	Z, r24
    5b84:	22 c0       	rjmp	.+68     	; 0x5bca <LCD_VidSendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5b86:	8e 01       	movw	r16, r28
    5b88:	04 57       	subi	r16, 0x74	; 116
    5b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    5b8c:	fe 01       	movw	r30, r28
    5b8e:	e3 57       	subi	r30, 0x73	; 115
    5b90:	ff 4f       	sbci	r31, 0xFF	; 255
    5b92:	60 81       	ld	r22, Z
    5b94:	71 81       	ldd	r23, Z+1	; 0x01
    5b96:	82 81       	ldd	r24, Z+2	; 0x02
    5b98:	93 81       	ldd	r25, Z+3	; 0x03
    5b9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5b9e:	dc 01       	movw	r26, r24
    5ba0:	cb 01       	movw	r24, r22
    5ba2:	f8 01       	movw	r30, r16
    5ba4:	80 83       	st	Z, r24
    5ba6:	de 01       	movw	r26, r28
    5ba8:	a3 58       	subi	r26, 0x83	; 131
    5baa:	bf 4f       	sbci	r27, 0xFF	; 255
    5bac:	fe 01       	movw	r30, r28
    5bae:	e4 57       	subi	r30, 0x74	; 116
    5bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb2:	80 81       	ld	r24, Z
    5bb4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5bb6:	fe 01       	movw	r30, r28
    5bb8:	e3 58       	subi	r30, 0x83	; 131
    5bba:	ff 4f       	sbci	r31, 0xFF	; 255
    5bbc:	80 81       	ld	r24, Z
    5bbe:	8a 95       	dec	r24
    5bc0:	f1 f7       	brne	.-4      	; 0x5bbe <LCD_VidSendCommand+0x272>
    5bc2:	fe 01       	movw	r30, r28
    5bc4:	e3 58       	subi	r30, 0x83	; 131
    5bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc8:	80 83       	st	Z, r24
	_delay_us(1);

	//Set Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinHigh);
    5bca:	80 e0       	ldi	r24, 0x00	; 0
    5bcc:	62 e0       	ldi	r22, 0x02	; 2
    5bce:	41 e0       	ldi	r20, 0x01	; 1
    5bd0:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    5bd4:	fe 01       	movw	r30, r28
    5bd6:	e7 58       	subi	r30, 0x87	; 135
    5bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bda:	80 e0       	ldi	r24, 0x00	; 0
    5bdc:	90 e0       	ldi	r25, 0x00	; 0
    5bde:	a0 e8       	ldi	r26, 0x80	; 128
    5be0:	bf e3       	ldi	r27, 0x3F	; 63
    5be2:	80 83       	st	Z, r24
    5be4:	91 83       	std	Z+1, r25	; 0x01
    5be6:	a2 83       	std	Z+2, r26	; 0x02
    5be8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5bea:	8e 01       	movw	r16, r28
    5bec:	0b 58       	subi	r16, 0x8B	; 139
    5bee:	1f 4f       	sbci	r17, 0xFF	; 255
    5bf0:	fe 01       	movw	r30, r28
    5bf2:	e7 58       	subi	r30, 0x87	; 135
    5bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf6:	60 81       	ld	r22, Z
    5bf8:	71 81       	ldd	r23, Z+1	; 0x01
    5bfa:	82 81       	ldd	r24, Z+2	; 0x02
    5bfc:	93 81       	ldd	r25, Z+3	; 0x03
    5bfe:	2b ea       	ldi	r18, 0xAB	; 171
    5c00:	3a ea       	ldi	r19, 0xAA	; 170
    5c02:	4a e2       	ldi	r20, 0x2A	; 42
    5c04:	50 e4       	ldi	r21, 0x40	; 64
    5c06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5c0a:	dc 01       	movw	r26, r24
    5c0c:	cb 01       	movw	r24, r22
    5c0e:	f8 01       	movw	r30, r16
    5c10:	80 83       	st	Z, r24
    5c12:	91 83       	std	Z+1, r25	; 0x01
    5c14:	a2 83       	std	Z+2, r26	; 0x02
    5c16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c18:	fe 01       	movw	r30, r28
    5c1a:	eb 58       	subi	r30, 0x8B	; 139
    5c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c1e:	60 81       	ld	r22, Z
    5c20:	71 81       	ldd	r23, Z+1	; 0x01
    5c22:	82 81       	ldd	r24, Z+2	; 0x02
    5c24:	93 81       	ldd	r25, Z+3	; 0x03
    5c26:	20 e0       	ldi	r18, 0x00	; 0
    5c28:	30 e0       	ldi	r19, 0x00	; 0
    5c2a:	40 e8       	ldi	r20, 0x80	; 128
    5c2c:	5f e3       	ldi	r21, 0x3F	; 63
    5c2e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5c32:	88 23       	and	r24, r24
    5c34:	34 f4       	brge	.+12     	; 0x5c42 <LCD_VidSendCommand+0x2f6>
		__ticks = 1;
    5c36:	fe 01       	movw	r30, r28
    5c38:	ec 58       	subi	r30, 0x8C	; 140
    5c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c3c:	81 e0       	ldi	r24, 0x01	; 1
    5c3e:	80 83       	st	Z, r24
    5c40:	e0 c0       	rjmp	.+448    	; 0x5e02 <LCD_VidSendCommand+0x4b6>
	else if (__tmp > 255)
    5c42:	fe 01       	movw	r30, r28
    5c44:	eb 58       	subi	r30, 0x8B	; 139
    5c46:	ff 4f       	sbci	r31, 0xFF	; 255
    5c48:	60 81       	ld	r22, Z
    5c4a:	71 81       	ldd	r23, Z+1	; 0x01
    5c4c:	82 81       	ldd	r24, Z+2	; 0x02
    5c4e:	93 81       	ldd	r25, Z+3	; 0x03
    5c50:	20 e0       	ldi	r18, 0x00	; 0
    5c52:	30 e0       	ldi	r19, 0x00	; 0
    5c54:	4f e7       	ldi	r20, 0x7F	; 127
    5c56:	53 e4       	ldi	r21, 0x43	; 67
    5c58:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5c5c:	18 16       	cp	r1, r24
    5c5e:	0c f0       	brlt	.+2      	; 0x5c62 <LCD_VidSendCommand+0x316>
    5c60:	c0 c0       	rjmp	.+384    	; 0x5de2 <LCD_VidSendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    5c62:	fe 01       	movw	r30, r28
    5c64:	e7 58       	subi	r30, 0x87	; 135
    5c66:	ff 4f       	sbci	r31, 0xFF	; 255
    5c68:	60 81       	ld	r22, Z
    5c6a:	71 81       	ldd	r23, Z+1	; 0x01
    5c6c:	82 81       	ldd	r24, Z+2	; 0x02
    5c6e:	93 81       	ldd	r25, Z+3	; 0x03
    5c70:	20 e0       	ldi	r18, 0x00	; 0
    5c72:	30 e0       	ldi	r19, 0x00	; 0
    5c74:	4a e7       	ldi	r20, 0x7A	; 122
    5c76:	54 e4       	ldi	r21, 0x44	; 68
    5c78:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    5c7c:	dc 01       	movw	r26, r24
    5c7e:	cb 01       	movw	r24, r22
    5c80:	fe 01       	movw	r30, r28
    5c82:	e0 59       	subi	r30, 0x90	; 144
    5c84:	ff 4f       	sbci	r31, 0xFF	; 255
    5c86:	80 83       	st	Z, r24
    5c88:	91 83       	std	Z+1, r25	; 0x01
    5c8a:	a2 83       	std	Z+2, r26	; 0x02
    5c8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c8e:	8e 01       	movw	r16, r28
    5c90:	04 59       	subi	r16, 0x94	; 148
    5c92:	1f 4f       	sbci	r17, 0xFF	; 255
    5c94:	fe 01       	movw	r30, r28
    5c96:	e0 59       	subi	r30, 0x90	; 144
    5c98:	ff 4f       	sbci	r31, 0xFF	; 255
    5c9a:	60 81       	ld	r22, Z
    5c9c:	71 81       	ldd	r23, Z+1	; 0x01
    5c9e:	82 81       	ldd	r24, Z+2	; 0x02
    5ca0:	93 81       	ldd	r25, Z+3	; 0x03
    5ca2:	20 e0       	ldi	r18, 0x00	; 0
    5ca4:	30 e0       	ldi	r19, 0x00	; 0
    5ca6:	4a ef       	ldi	r20, 0xFA	; 250
    5ca8:	54 e4       	ldi	r21, 0x44	; 68
    5caa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5cae:	dc 01       	movw	r26, r24
    5cb0:	cb 01       	movw	r24, r22
    5cb2:	f8 01       	movw	r30, r16
    5cb4:	80 83       	st	Z, r24
    5cb6:	91 83       	std	Z+1, r25	; 0x01
    5cb8:	a2 83       	std	Z+2, r26	; 0x02
    5cba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5cbc:	fe 01       	movw	r30, r28
    5cbe:	e4 59       	subi	r30, 0x94	; 148
    5cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc2:	60 81       	ld	r22, Z
    5cc4:	71 81       	ldd	r23, Z+1	; 0x01
    5cc6:	82 81       	ldd	r24, Z+2	; 0x02
    5cc8:	93 81       	ldd	r25, Z+3	; 0x03
    5cca:	20 e0       	ldi	r18, 0x00	; 0
    5ccc:	30 e0       	ldi	r19, 0x00	; 0
    5cce:	40 e8       	ldi	r20, 0x80	; 128
    5cd0:	5f e3       	ldi	r21, 0x3F	; 63
    5cd2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5cd6:	88 23       	and	r24, r24
    5cd8:	44 f4       	brge	.+16     	; 0x5cea <LCD_VidSendCommand+0x39e>
		__ticks = 1;
    5cda:	fe 01       	movw	r30, r28
    5cdc:	e6 59       	subi	r30, 0x96	; 150
    5cde:	ff 4f       	sbci	r31, 0xFF	; 255
    5ce0:	81 e0       	ldi	r24, 0x01	; 1
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	91 83       	std	Z+1, r25	; 0x01
    5ce6:	80 83       	st	Z, r24
    5ce8:	64 c0       	rjmp	.+200    	; 0x5db2 <LCD_VidSendCommand+0x466>
	else if (__tmp > 65535)
    5cea:	fe 01       	movw	r30, r28
    5cec:	e4 59       	subi	r30, 0x94	; 148
    5cee:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf0:	60 81       	ld	r22, Z
    5cf2:	71 81       	ldd	r23, Z+1	; 0x01
    5cf4:	82 81       	ldd	r24, Z+2	; 0x02
    5cf6:	93 81       	ldd	r25, Z+3	; 0x03
    5cf8:	20 e0       	ldi	r18, 0x00	; 0
    5cfa:	3f ef       	ldi	r19, 0xFF	; 255
    5cfc:	4f e7       	ldi	r20, 0x7F	; 127
    5cfe:	57 e4       	ldi	r21, 0x47	; 71
    5d00:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5d04:	18 16       	cp	r1, r24
    5d06:	0c f0       	brlt	.+2      	; 0x5d0a <LCD_VidSendCommand+0x3be>
    5d08:	43 c0       	rjmp	.+134    	; 0x5d90 <LCD_VidSendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d0a:	fe 01       	movw	r30, r28
    5d0c:	e0 59       	subi	r30, 0x90	; 144
    5d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d10:	60 81       	ld	r22, Z
    5d12:	71 81       	ldd	r23, Z+1	; 0x01
    5d14:	82 81       	ldd	r24, Z+2	; 0x02
    5d16:	93 81       	ldd	r25, Z+3	; 0x03
    5d18:	20 e0       	ldi	r18, 0x00	; 0
    5d1a:	30 e0       	ldi	r19, 0x00	; 0
    5d1c:	40 e2       	ldi	r20, 0x20	; 32
    5d1e:	51 e4       	ldi	r21, 0x41	; 65
    5d20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5d24:	dc 01       	movw	r26, r24
    5d26:	cb 01       	movw	r24, r22
    5d28:	8e 01       	movw	r16, r28
    5d2a:	06 59       	subi	r16, 0x96	; 150
    5d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d2e:	bc 01       	movw	r22, r24
    5d30:	cd 01       	movw	r24, r26
    5d32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5d36:	dc 01       	movw	r26, r24
    5d38:	cb 01       	movw	r24, r22
    5d3a:	f8 01       	movw	r30, r16
    5d3c:	91 83       	std	Z+1, r25	; 0x01
    5d3e:	80 83       	st	Z, r24
    5d40:	1f c0       	rjmp	.+62     	; 0x5d80 <LCD_VidSendCommand+0x434>
    5d42:	fe 01       	movw	r30, r28
    5d44:	e8 59       	subi	r30, 0x98	; 152
    5d46:	ff 4f       	sbci	r31, 0xFF	; 255
    5d48:	88 ec       	ldi	r24, 0xC8	; 200
    5d4a:	90 e0       	ldi	r25, 0x00	; 0
    5d4c:	91 83       	std	Z+1, r25	; 0x01
    5d4e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5d50:	fe 01       	movw	r30, r28
    5d52:	e8 59       	subi	r30, 0x98	; 152
    5d54:	ff 4f       	sbci	r31, 0xFF	; 255
    5d56:	80 81       	ld	r24, Z
    5d58:	91 81       	ldd	r25, Z+1	; 0x01
    5d5a:	01 97       	sbiw	r24, 0x01	; 1
    5d5c:	f1 f7       	brne	.-4      	; 0x5d5a <LCD_VidSendCommand+0x40e>
    5d5e:	fe 01       	movw	r30, r28
    5d60:	e8 59       	subi	r30, 0x98	; 152
    5d62:	ff 4f       	sbci	r31, 0xFF	; 255
    5d64:	91 83       	std	Z+1, r25	; 0x01
    5d66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d68:	de 01       	movw	r26, r28
    5d6a:	a6 59       	subi	r26, 0x96	; 150
    5d6c:	bf 4f       	sbci	r27, 0xFF	; 255
    5d6e:	fe 01       	movw	r30, r28
    5d70:	e6 59       	subi	r30, 0x96	; 150
    5d72:	ff 4f       	sbci	r31, 0xFF	; 255
    5d74:	80 81       	ld	r24, Z
    5d76:	91 81       	ldd	r25, Z+1	; 0x01
    5d78:	01 97       	sbiw	r24, 0x01	; 1
    5d7a:	11 96       	adiw	r26, 0x01	; 1
    5d7c:	9c 93       	st	X, r25
    5d7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d80:	fe 01       	movw	r30, r28
    5d82:	e6 59       	subi	r30, 0x96	; 150
    5d84:	ff 4f       	sbci	r31, 0xFF	; 255
    5d86:	80 81       	ld	r24, Z
    5d88:	91 81       	ldd	r25, Z+1	; 0x01
    5d8a:	00 97       	sbiw	r24, 0x00	; 0
    5d8c:	d1 f6       	brne	.-76     	; 0x5d42 <LCD_VidSendCommand+0x3f6>
    5d8e:	4b c0       	rjmp	.+150    	; 0x5e26 <LCD_VidSendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d90:	8e 01       	movw	r16, r28
    5d92:	06 59       	subi	r16, 0x96	; 150
    5d94:	1f 4f       	sbci	r17, 0xFF	; 255
    5d96:	fe 01       	movw	r30, r28
    5d98:	e4 59       	subi	r30, 0x94	; 148
    5d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d9c:	60 81       	ld	r22, Z
    5d9e:	71 81       	ldd	r23, Z+1	; 0x01
    5da0:	82 81       	ldd	r24, Z+2	; 0x02
    5da2:	93 81       	ldd	r25, Z+3	; 0x03
    5da4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5da8:	dc 01       	movw	r26, r24
    5daa:	cb 01       	movw	r24, r22
    5dac:	f8 01       	movw	r30, r16
    5dae:	91 83       	std	Z+1, r25	; 0x01
    5db0:	80 83       	st	Z, r24
    5db2:	de 01       	movw	r26, r28
    5db4:	aa 59       	subi	r26, 0x9A	; 154
    5db6:	bf 4f       	sbci	r27, 0xFF	; 255
    5db8:	fe 01       	movw	r30, r28
    5dba:	e6 59       	subi	r30, 0x96	; 150
    5dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dbe:	80 81       	ld	r24, Z
    5dc0:	91 81       	ldd	r25, Z+1	; 0x01
    5dc2:	11 96       	adiw	r26, 0x01	; 1
    5dc4:	9c 93       	st	X, r25
    5dc6:	8e 93       	st	-X, r24
    5dc8:	fe 01       	movw	r30, r28
    5dca:	ea 59       	subi	r30, 0x9A	; 154
    5dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dce:	80 81       	ld	r24, Z
    5dd0:	91 81       	ldd	r25, Z+1	; 0x01
    5dd2:	01 97       	sbiw	r24, 0x01	; 1
    5dd4:	f1 f7       	brne	.-4      	; 0x5dd2 <LCD_VidSendCommand+0x486>
    5dd6:	fe 01       	movw	r30, r28
    5dd8:	ea 59       	subi	r30, 0x9A	; 154
    5dda:	ff 4f       	sbci	r31, 0xFF	; 255
    5ddc:	91 83       	std	Z+1, r25	; 0x01
    5dde:	80 83       	st	Z, r24
    5de0:	22 c0       	rjmp	.+68     	; 0x5e26 <LCD_VidSendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5de2:	8e 01       	movw	r16, r28
    5de4:	0c 58       	subi	r16, 0x8C	; 140
    5de6:	1f 4f       	sbci	r17, 0xFF	; 255
    5de8:	fe 01       	movw	r30, r28
    5dea:	eb 58       	subi	r30, 0x8B	; 139
    5dec:	ff 4f       	sbci	r31, 0xFF	; 255
    5dee:	60 81       	ld	r22, Z
    5df0:	71 81       	ldd	r23, Z+1	; 0x01
    5df2:	82 81       	ldd	r24, Z+2	; 0x02
    5df4:	93 81       	ldd	r25, Z+3	; 0x03
    5df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5dfa:	dc 01       	movw	r26, r24
    5dfc:	cb 01       	movw	r24, r22
    5dfe:	f8 01       	movw	r30, r16
    5e00:	80 83       	st	Z, r24
    5e02:	de 01       	movw	r26, r28
    5e04:	ab 59       	subi	r26, 0x9B	; 155
    5e06:	bf 4f       	sbci	r27, 0xFF	; 255
    5e08:	fe 01       	movw	r30, r28
    5e0a:	ec 58       	subi	r30, 0x8C	; 140
    5e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e0e:	80 81       	ld	r24, Z
    5e10:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5e12:	fe 01       	movw	r30, r28
    5e14:	eb 59       	subi	r30, 0x9B	; 155
    5e16:	ff 4f       	sbci	r31, 0xFF	; 255
    5e18:	80 81       	ld	r24, Z
    5e1a:	8a 95       	dec	r24
    5e1c:	f1 f7       	brne	.-4      	; 0x5e1a <LCD_VidSendCommand+0x4ce>
    5e1e:	fe 01       	movw	r30, r28
    5e20:	eb 59       	subi	r30, 0x9B	; 155
    5e22:	ff 4f       	sbci	r31, 0xFF	; 255
    5e24:	80 83       	st	Z, r24
	_delay_us(1);

	//Send MSB Command
	DIO_VidSetPinValue(LCD_PORT,Pin3,GET_BIT(Copy_u8Command,Pin4));
    5e26:	fe 01       	movw	r30, r28
    5e28:	eb 56       	subi	r30, 0x6B	; 107
    5e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e2c:	80 81       	ld	r24, Z
    5e2e:	82 95       	swap	r24
    5e30:	8f 70       	andi	r24, 0x0F	; 15
    5e32:	98 2f       	mov	r25, r24
    5e34:	91 70       	andi	r25, 0x01	; 1
    5e36:	80 e0       	ldi	r24, 0x00	; 0
    5e38:	63 e0       	ldi	r22, 0x03	; 3
    5e3a:	49 2f       	mov	r20, r25
    5e3c:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin4,GET_BIT(Copy_u8Command,Pin5));
    5e40:	fe 01       	movw	r30, r28
    5e42:	eb 56       	subi	r30, 0x6B	; 107
    5e44:	ff 4f       	sbci	r31, 0xFF	; 255
    5e46:	80 81       	ld	r24, Z
    5e48:	82 95       	swap	r24
    5e4a:	86 95       	lsr	r24
    5e4c:	87 70       	andi	r24, 0x07	; 7
    5e4e:	98 2f       	mov	r25, r24
    5e50:	91 70       	andi	r25, 0x01	; 1
    5e52:	80 e0       	ldi	r24, 0x00	; 0
    5e54:	64 e0       	ldi	r22, 0x04	; 4
    5e56:	49 2f       	mov	r20, r25
    5e58:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin5,GET_BIT(Copy_u8Command,Pin6));
    5e5c:	fe 01       	movw	r30, r28
    5e5e:	eb 56       	subi	r30, 0x6B	; 107
    5e60:	ff 4f       	sbci	r31, 0xFF	; 255
    5e62:	80 81       	ld	r24, Z
    5e64:	82 95       	swap	r24
    5e66:	86 95       	lsr	r24
    5e68:	86 95       	lsr	r24
    5e6a:	83 70       	andi	r24, 0x03	; 3
    5e6c:	98 2f       	mov	r25, r24
    5e6e:	91 70       	andi	r25, 0x01	; 1
    5e70:	80 e0       	ldi	r24, 0x00	; 0
    5e72:	65 e0       	ldi	r22, 0x05	; 5
    5e74:	49 2f       	mov	r20, r25
    5e76:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin6,GET_BIT(Copy_u8Command,Pin7));
    5e7a:	fe 01       	movw	r30, r28
    5e7c:	eb 56       	subi	r30, 0x6B	; 107
    5e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e80:	80 81       	ld	r24, Z
    5e82:	98 2f       	mov	r25, r24
    5e84:	99 1f       	adc	r25, r25
    5e86:	99 27       	eor	r25, r25
    5e88:	99 1f       	adc	r25, r25
    5e8a:	80 e0       	ldi	r24, 0x00	; 0
    5e8c:	66 e0       	ldi	r22, 0x06	; 6
    5e8e:	49 2f       	mov	r20, r25
    5e90:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    5e94:	fe 01       	movw	r30, r28
    5e96:	ef 59       	subi	r30, 0x9F	; 159
    5e98:	ff 4f       	sbci	r31, 0xFF	; 255
    5e9a:	80 e0       	ldi	r24, 0x00	; 0
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	a0 e8       	ldi	r26, 0x80	; 128
    5ea0:	bf e3       	ldi	r27, 0x3F	; 63
    5ea2:	80 83       	st	Z, r24
    5ea4:	91 83       	std	Z+1, r25	; 0x01
    5ea6:	a2 83       	std	Z+2, r26	; 0x02
    5ea8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5eaa:	8e 01       	movw	r16, r28
    5eac:	03 5a       	subi	r16, 0xA3	; 163
    5eae:	1f 4f       	sbci	r17, 0xFF	; 255
    5eb0:	fe 01       	movw	r30, r28
    5eb2:	ef 59       	subi	r30, 0x9F	; 159
    5eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb6:	60 81       	ld	r22, Z
    5eb8:	71 81       	ldd	r23, Z+1	; 0x01
    5eba:	82 81       	ldd	r24, Z+2	; 0x02
    5ebc:	93 81       	ldd	r25, Z+3	; 0x03
    5ebe:	20 e0       	ldi	r18, 0x00	; 0
    5ec0:	30 e0       	ldi	r19, 0x00	; 0
    5ec2:	4a ef       	ldi	r20, 0xFA	; 250
    5ec4:	54 e4       	ldi	r21, 0x44	; 68
    5ec6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5eca:	dc 01       	movw	r26, r24
    5ecc:	cb 01       	movw	r24, r22
    5ece:	f8 01       	movw	r30, r16
    5ed0:	80 83       	st	Z, r24
    5ed2:	91 83       	std	Z+1, r25	; 0x01
    5ed4:	a2 83       	std	Z+2, r26	; 0x02
    5ed6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5ed8:	fe 01       	movw	r30, r28
    5eda:	e3 5a       	subi	r30, 0xA3	; 163
    5edc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ede:	60 81       	ld	r22, Z
    5ee0:	71 81       	ldd	r23, Z+1	; 0x01
    5ee2:	82 81       	ldd	r24, Z+2	; 0x02
    5ee4:	93 81       	ldd	r25, Z+3	; 0x03
    5ee6:	20 e0       	ldi	r18, 0x00	; 0
    5ee8:	30 e0       	ldi	r19, 0x00	; 0
    5eea:	40 e8       	ldi	r20, 0x80	; 128
    5eec:	5f e3       	ldi	r21, 0x3F	; 63
    5eee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5ef2:	88 23       	and	r24, r24
    5ef4:	44 f4       	brge	.+16     	; 0x5f06 <LCD_VidSendCommand+0x5ba>
		__ticks = 1;
    5ef6:	fe 01       	movw	r30, r28
    5ef8:	e5 5a       	subi	r30, 0xA5	; 165
    5efa:	ff 4f       	sbci	r31, 0xFF	; 255
    5efc:	81 e0       	ldi	r24, 0x01	; 1
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	91 83       	std	Z+1, r25	; 0x01
    5f02:	80 83       	st	Z, r24
    5f04:	64 c0       	rjmp	.+200    	; 0x5fce <LCD_VidSendCommand+0x682>
	else if (__tmp > 65535)
    5f06:	fe 01       	movw	r30, r28
    5f08:	e3 5a       	subi	r30, 0xA3	; 163
    5f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f0c:	60 81       	ld	r22, Z
    5f0e:	71 81       	ldd	r23, Z+1	; 0x01
    5f10:	82 81       	ldd	r24, Z+2	; 0x02
    5f12:	93 81       	ldd	r25, Z+3	; 0x03
    5f14:	20 e0       	ldi	r18, 0x00	; 0
    5f16:	3f ef       	ldi	r19, 0xFF	; 255
    5f18:	4f e7       	ldi	r20, 0x7F	; 127
    5f1a:	57 e4       	ldi	r21, 0x47	; 71
    5f1c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5f20:	18 16       	cp	r1, r24
    5f22:	0c f0       	brlt	.+2      	; 0x5f26 <LCD_VidSendCommand+0x5da>
    5f24:	43 c0       	rjmp	.+134    	; 0x5fac <LCD_VidSendCommand+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f26:	fe 01       	movw	r30, r28
    5f28:	ef 59       	subi	r30, 0x9F	; 159
    5f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f2c:	60 81       	ld	r22, Z
    5f2e:	71 81       	ldd	r23, Z+1	; 0x01
    5f30:	82 81       	ldd	r24, Z+2	; 0x02
    5f32:	93 81       	ldd	r25, Z+3	; 0x03
    5f34:	20 e0       	ldi	r18, 0x00	; 0
    5f36:	30 e0       	ldi	r19, 0x00	; 0
    5f38:	40 e2       	ldi	r20, 0x20	; 32
    5f3a:	51 e4       	ldi	r21, 0x41	; 65
    5f3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5f40:	dc 01       	movw	r26, r24
    5f42:	cb 01       	movw	r24, r22
    5f44:	8e 01       	movw	r16, r28
    5f46:	05 5a       	subi	r16, 0xA5	; 165
    5f48:	1f 4f       	sbci	r17, 0xFF	; 255
    5f4a:	bc 01       	movw	r22, r24
    5f4c:	cd 01       	movw	r24, r26
    5f4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5f52:	dc 01       	movw	r26, r24
    5f54:	cb 01       	movw	r24, r22
    5f56:	f8 01       	movw	r30, r16
    5f58:	91 83       	std	Z+1, r25	; 0x01
    5f5a:	80 83       	st	Z, r24
    5f5c:	1f c0       	rjmp	.+62     	; 0x5f9c <LCD_VidSendCommand+0x650>
    5f5e:	fe 01       	movw	r30, r28
    5f60:	e7 5a       	subi	r30, 0xA7	; 167
    5f62:	ff 4f       	sbci	r31, 0xFF	; 255
    5f64:	88 ec       	ldi	r24, 0xC8	; 200
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	91 83       	std	Z+1, r25	; 0x01
    5f6a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5f6c:	fe 01       	movw	r30, r28
    5f6e:	e7 5a       	subi	r30, 0xA7	; 167
    5f70:	ff 4f       	sbci	r31, 0xFF	; 255
    5f72:	80 81       	ld	r24, Z
    5f74:	91 81       	ldd	r25, Z+1	; 0x01
    5f76:	01 97       	sbiw	r24, 0x01	; 1
    5f78:	f1 f7       	brne	.-4      	; 0x5f76 <LCD_VidSendCommand+0x62a>
    5f7a:	fe 01       	movw	r30, r28
    5f7c:	e7 5a       	subi	r30, 0xA7	; 167
    5f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f80:	91 83       	std	Z+1, r25	; 0x01
    5f82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f84:	de 01       	movw	r26, r28
    5f86:	a5 5a       	subi	r26, 0xA5	; 165
    5f88:	bf 4f       	sbci	r27, 0xFF	; 255
    5f8a:	fe 01       	movw	r30, r28
    5f8c:	e5 5a       	subi	r30, 0xA5	; 165
    5f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f90:	80 81       	ld	r24, Z
    5f92:	91 81       	ldd	r25, Z+1	; 0x01
    5f94:	01 97       	sbiw	r24, 0x01	; 1
    5f96:	11 96       	adiw	r26, 0x01	; 1
    5f98:	9c 93       	st	X, r25
    5f9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f9c:	fe 01       	movw	r30, r28
    5f9e:	e5 5a       	subi	r30, 0xA5	; 165
    5fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    5fa2:	80 81       	ld	r24, Z
    5fa4:	91 81       	ldd	r25, Z+1	; 0x01
    5fa6:	00 97       	sbiw	r24, 0x00	; 0
    5fa8:	d1 f6       	brne	.-76     	; 0x5f5e <LCD_VidSendCommand+0x612>
    5faa:	27 c0       	rjmp	.+78     	; 0x5ffa <LCD_VidSendCommand+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fac:	8e 01       	movw	r16, r28
    5fae:	05 5a       	subi	r16, 0xA5	; 165
    5fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    5fb2:	fe 01       	movw	r30, r28
    5fb4:	e3 5a       	subi	r30, 0xA3	; 163
    5fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb8:	60 81       	ld	r22, Z
    5fba:	71 81       	ldd	r23, Z+1	; 0x01
    5fbc:	82 81       	ldd	r24, Z+2	; 0x02
    5fbe:	93 81       	ldd	r25, Z+3	; 0x03
    5fc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5fc4:	dc 01       	movw	r26, r24
    5fc6:	cb 01       	movw	r24, r22
    5fc8:	f8 01       	movw	r30, r16
    5fca:	91 83       	std	Z+1, r25	; 0x01
    5fcc:	80 83       	st	Z, r24
    5fce:	de 01       	movw	r26, r28
    5fd0:	a9 5a       	subi	r26, 0xA9	; 169
    5fd2:	bf 4f       	sbci	r27, 0xFF	; 255
    5fd4:	fe 01       	movw	r30, r28
    5fd6:	e5 5a       	subi	r30, 0xA5	; 165
    5fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5fda:	80 81       	ld	r24, Z
    5fdc:	91 81       	ldd	r25, Z+1	; 0x01
    5fde:	8d 93       	st	X+, r24
    5fe0:	9c 93       	st	X, r25
    5fe2:	fe 01       	movw	r30, r28
    5fe4:	e9 5a       	subi	r30, 0xA9	; 169
    5fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    5fe8:	80 81       	ld	r24, Z
    5fea:	91 81       	ldd	r25, Z+1	; 0x01
    5fec:	01 97       	sbiw	r24, 0x01	; 1
    5fee:	f1 f7       	brne	.-4      	; 0x5fec <LCD_VidSendCommand+0x6a0>
    5ff0:	fe 01       	movw	r30, r28
    5ff2:	e9 5a       	subi	r30, 0xA9	; 169
    5ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff6:	91 83       	std	Z+1, r25	; 0x01
    5ff8:	80 83       	st	Z, r24
	_delay_ms(1);

	//Clear Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinLow);
    5ffa:	80 e0       	ldi	r24, 0x00	; 0
    5ffc:	62 e0       	ldi	r22, 0x02	; 2
    5ffe:	40 e0       	ldi	r20, 0x00	; 0
    6000:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    6004:	fe 01       	movw	r30, r28
    6006:	ed 5a       	subi	r30, 0xAD	; 173
    6008:	ff 4f       	sbci	r31, 0xFF	; 255
    600a:	80 e0       	ldi	r24, 0x00	; 0
    600c:	90 e0       	ldi	r25, 0x00	; 0
    600e:	a0 e8       	ldi	r26, 0x80	; 128
    6010:	bf e3       	ldi	r27, 0x3F	; 63
    6012:	80 83       	st	Z, r24
    6014:	91 83       	std	Z+1, r25	; 0x01
    6016:	a2 83       	std	Z+2, r26	; 0x02
    6018:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    601a:	8e 01       	movw	r16, r28
    601c:	01 5b       	subi	r16, 0xB1	; 177
    601e:	1f 4f       	sbci	r17, 0xFF	; 255
    6020:	fe 01       	movw	r30, r28
    6022:	ed 5a       	subi	r30, 0xAD	; 173
    6024:	ff 4f       	sbci	r31, 0xFF	; 255
    6026:	60 81       	ld	r22, Z
    6028:	71 81       	ldd	r23, Z+1	; 0x01
    602a:	82 81       	ldd	r24, Z+2	; 0x02
    602c:	93 81       	ldd	r25, Z+3	; 0x03
    602e:	2b ea       	ldi	r18, 0xAB	; 171
    6030:	3a ea       	ldi	r19, 0xAA	; 170
    6032:	4a e2       	ldi	r20, 0x2A	; 42
    6034:	50 e4       	ldi	r21, 0x40	; 64
    6036:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    603a:	dc 01       	movw	r26, r24
    603c:	cb 01       	movw	r24, r22
    603e:	f8 01       	movw	r30, r16
    6040:	80 83       	st	Z, r24
    6042:	91 83       	std	Z+1, r25	; 0x01
    6044:	a2 83       	std	Z+2, r26	; 0x02
    6046:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6048:	fe 01       	movw	r30, r28
    604a:	e1 5b       	subi	r30, 0xB1	; 177
    604c:	ff 4f       	sbci	r31, 0xFF	; 255
    604e:	60 81       	ld	r22, Z
    6050:	71 81       	ldd	r23, Z+1	; 0x01
    6052:	82 81       	ldd	r24, Z+2	; 0x02
    6054:	93 81       	ldd	r25, Z+3	; 0x03
    6056:	20 e0       	ldi	r18, 0x00	; 0
    6058:	30 e0       	ldi	r19, 0x00	; 0
    605a:	40 e8       	ldi	r20, 0x80	; 128
    605c:	5f e3       	ldi	r21, 0x3F	; 63
    605e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6062:	88 23       	and	r24, r24
    6064:	34 f4       	brge	.+12     	; 0x6072 <LCD_VidSendCommand+0x726>
		__ticks = 1;
    6066:	fe 01       	movw	r30, r28
    6068:	e2 5b       	subi	r30, 0xB2	; 178
    606a:	ff 4f       	sbci	r31, 0xFF	; 255
    606c:	81 e0       	ldi	r24, 0x01	; 1
    606e:	80 83       	st	Z, r24
    6070:	e0 c0       	rjmp	.+448    	; 0x6232 <LCD_VidSendCommand+0x8e6>
	else if (__tmp > 255)
    6072:	fe 01       	movw	r30, r28
    6074:	e1 5b       	subi	r30, 0xB1	; 177
    6076:	ff 4f       	sbci	r31, 0xFF	; 255
    6078:	60 81       	ld	r22, Z
    607a:	71 81       	ldd	r23, Z+1	; 0x01
    607c:	82 81       	ldd	r24, Z+2	; 0x02
    607e:	93 81       	ldd	r25, Z+3	; 0x03
    6080:	20 e0       	ldi	r18, 0x00	; 0
    6082:	30 e0       	ldi	r19, 0x00	; 0
    6084:	4f e7       	ldi	r20, 0x7F	; 127
    6086:	53 e4       	ldi	r21, 0x43	; 67
    6088:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    608c:	18 16       	cp	r1, r24
    608e:	0c f0       	brlt	.+2      	; 0x6092 <LCD_VidSendCommand+0x746>
    6090:	c0 c0       	rjmp	.+384    	; 0x6212 <LCD_VidSendCommand+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    6092:	fe 01       	movw	r30, r28
    6094:	ed 5a       	subi	r30, 0xAD	; 173
    6096:	ff 4f       	sbci	r31, 0xFF	; 255
    6098:	60 81       	ld	r22, Z
    609a:	71 81       	ldd	r23, Z+1	; 0x01
    609c:	82 81       	ldd	r24, Z+2	; 0x02
    609e:	93 81       	ldd	r25, Z+3	; 0x03
    60a0:	20 e0       	ldi	r18, 0x00	; 0
    60a2:	30 e0       	ldi	r19, 0x00	; 0
    60a4:	4a e7       	ldi	r20, 0x7A	; 122
    60a6:	54 e4       	ldi	r21, 0x44	; 68
    60a8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    60ac:	dc 01       	movw	r26, r24
    60ae:	cb 01       	movw	r24, r22
    60b0:	fe 01       	movw	r30, r28
    60b2:	e6 5b       	subi	r30, 0xB6	; 182
    60b4:	ff 4f       	sbci	r31, 0xFF	; 255
    60b6:	80 83       	st	Z, r24
    60b8:	91 83       	std	Z+1, r25	; 0x01
    60ba:	a2 83       	std	Z+2, r26	; 0x02
    60bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60be:	8e 01       	movw	r16, r28
    60c0:	0a 5b       	subi	r16, 0xBA	; 186
    60c2:	1f 4f       	sbci	r17, 0xFF	; 255
    60c4:	fe 01       	movw	r30, r28
    60c6:	e6 5b       	subi	r30, 0xB6	; 182
    60c8:	ff 4f       	sbci	r31, 0xFF	; 255
    60ca:	60 81       	ld	r22, Z
    60cc:	71 81       	ldd	r23, Z+1	; 0x01
    60ce:	82 81       	ldd	r24, Z+2	; 0x02
    60d0:	93 81       	ldd	r25, Z+3	; 0x03
    60d2:	20 e0       	ldi	r18, 0x00	; 0
    60d4:	30 e0       	ldi	r19, 0x00	; 0
    60d6:	4a ef       	ldi	r20, 0xFA	; 250
    60d8:	54 e4       	ldi	r21, 0x44	; 68
    60da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    60de:	dc 01       	movw	r26, r24
    60e0:	cb 01       	movw	r24, r22
    60e2:	f8 01       	movw	r30, r16
    60e4:	80 83       	st	Z, r24
    60e6:	91 83       	std	Z+1, r25	; 0x01
    60e8:	a2 83       	std	Z+2, r26	; 0x02
    60ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    60ec:	fe 01       	movw	r30, r28
    60ee:	ea 5b       	subi	r30, 0xBA	; 186
    60f0:	ff 4f       	sbci	r31, 0xFF	; 255
    60f2:	60 81       	ld	r22, Z
    60f4:	71 81       	ldd	r23, Z+1	; 0x01
    60f6:	82 81       	ldd	r24, Z+2	; 0x02
    60f8:	93 81       	ldd	r25, Z+3	; 0x03
    60fa:	20 e0       	ldi	r18, 0x00	; 0
    60fc:	30 e0       	ldi	r19, 0x00	; 0
    60fe:	40 e8       	ldi	r20, 0x80	; 128
    6100:	5f e3       	ldi	r21, 0x3F	; 63
    6102:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6106:	88 23       	and	r24, r24
    6108:	44 f4       	brge	.+16     	; 0x611a <LCD_VidSendCommand+0x7ce>
		__ticks = 1;
    610a:	fe 01       	movw	r30, r28
    610c:	ec 5b       	subi	r30, 0xBC	; 188
    610e:	ff 4f       	sbci	r31, 0xFF	; 255
    6110:	81 e0       	ldi	r24, 0x01	; 1
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	91 83       	std	Z+1, r25	; 0x01
    6116:	80 83       	st	Z, r24
    6118:	64 c0       	rjmp	.+200    	; 0x61e2 <LCD_VidSendCommand+0x896>
	else if (__tmp > 65535)
    611a:	fe 01       	movw	r30, r28
    611c:	ea 5b       	subi	r30, 0xBA	; 186
    611e:	ff 4f       	sbci	r31, 0xFF	; 255
    6120:	60 81       	ld	r22, Z
    6122:	71 81       	ldd	r23, Z+1	; 0x01
    6124:	82 81       	ldd	r24, Z+2	; 0x02
    6126:	93 81       	ldd	r25, Z+3	; 0x03
    6128:	20 e0       	ldi	r18, 0x00	; 0
    612a:	3f ef       	ldi	r19, 0xFF	; 255
    612c:	4f e7       	ldi	r20, 0x7F	; 127
    612e:	57 e4       	ldi	r21, 0x47	; 71
    6130:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6134:	18 16       	cp	r1, r24
    6136:	0c f0       	brlt	.+2      	; 0x613a <LCD_VidSendCommand+0x7ee>
    6138:	43 c0       	rjmp	.+134    	; 0x61c0 <LCD_VidSendCommand+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    613a:	fe 01       	movw	r30, r28
    613c:	e6 5b       	subi	r30, 0xB6	; 182
    613e:	ff 4f       	sbci	r31, 0xFF	; 255
    6140:	60 81       	ld	r22, Z
    6142:	71 81       	ldd	r23, Z+1	; 0x01
    6144:	82 81       	ldd	r24, Z+2	; 0x02
    6146:	93 81       	ldd	r25, Z+3	; 0x03
    6148:	20 e0       	ldi	r18, 0x00	; 0
    614a:	30 e0       	ldi	r19, 0x00	; 0
    614c:	40 e2       	ldi	r20, 0x20	; 32
    614e:	51 e4       	ldi	r21, 0x41	; 65
    6150:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6154:	dc 01       	movw	r26, r24
    6156:	cb 01       	movw	r24, r22
    6158:	8e 01       	movw	r16, r28
    615a:	0c 5b       	subi	r16, 0xBC	; 188
    615c:	1f 4f       	sbci	r17, 0xFF	; 255
    615e:	bc 01       	movw	r22, r24
    6160:	cd 01       	movw	r24, r26
    6162:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6166:	dc 01       	movw	r26, r24
    6168:	cb 01       	movw	r24, r22
    616a:	f8 01       	movw	r30, r16
    616c:	91 83       	std	Z+1, r25	; 0x01
    616e:	80 83       	st	Z, r24
    6170:	1f c0       	rjmp	.+62     	; 0x61b0 <LCD_VidSendCommand+0x864>
    6172:	fe 01       	movw	r30, r28
    6174:	ee 5b       	subi	r30, 0xBE	; 190
    6176:	ff 4f       	sbci	r31, 0xFF	; 255
    6178:	88 ec       	ldi	r24, 0xC8	; 200
    617a:	90 e0       	ldi	r25, 0x00	; 0
    617c:	91 83       	std	Z+1, r25	; 0x01
    617e:	80 83       	st	Z, r24
    6180:	fe 01       	movw	r30, r28
    6182:	ee 5b       	subi	r30, 0xBE	; 190
    6184:	ff 4f       	sbci	r31, 0xFF	; 255
    6186:	80 81       	ld	r24, Z
    6188:	91 81       	ldd	r25, Z+1	; 0x01
    618a:	01 97       	sbiw	r24, 0x01	; 1
    618c:	f1 f7       	brne	.-4      	; 0x618a <LCD_VidSendCommand+0x83e>
    618e:	fe 01       	movw	r30, r28
    6190:	ee 5b       	subi	r30, 0xBE	; 190
    6192:	ff 4f       	sbci	r31, 0xFF	; 255
    6194:	91 83       	std	Z+1, r25	; 0x01
    6196:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6198:	de 01       	movw	r26, r28
    619a:	ac 5b       	subi	r26, 0xBC	; 188
    619c:	bf 4f       	sbci	r27, 0xFF	; 255
    619e:	fe 01       	movw	r30, r28
    61a0:	ec 5b       	subi	r30, 0xBC	; 188
    61a2:	ff 4f       	sbci	r31, 0xFF	; 255
    61a4:	80 81       	ld	r24, Z
    61a6:	91 81       	ldd	r25, Z+1	; 0x01
    61a8:	01 97       	sbiw	r24, 0x01	; 1
    61aa:	11 96       	adiw	r26, 0x01	; 1
    61ac:	9c 93       	st	X, r25
    61ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61b0:	fe 01       	movw	r30, r28
    61b2:	ec 5b       	subi	r30, 0xBC	; 188
    61b4:	ff 4f       	sbci	r31, 0xFF	; 255
    61b6:	80 81       	ld	r24, Z
    61b8:	91 81       	ldd	r25, Z+1	; 0x01
    61ba:	00 97       	sbiw	r24, 0x00	; 0
    61bc:	d1 f6       	brne	.-76     	; 0x6172 <LCD_VidSendCommand+0x826>
    61be:	42 c0       	rjmp	.+132    	; 0x6244 <LCD_VidSendCommand+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61c0:	8e 01       	movw	r16, r28
    61c2:	0c 5b       	subi	r16, 0xBC	; 188
    61c4:	1f 4f       	sbci	r17, 0xFF	; 255
    61c6:	fe 01       	movw	r30, r28
    61c8:	ea 5b       	subi	r30, 0xBA	; 186
    61ca:	ff 4f       	sbci	r31, 0xFF	; 255
    61cc:	60 81       	ld	r22, Z
    61ce:	71 81       	ldd	r23, Z+1	; 0x01
    61d0:	82 81       	ldd	r24, Z+2	; 0x02
    61d2:	93 81       	ldd	r25, Z+3	; 0x03
    61d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    61d8:	dc 01       	movw	r26, r24
    61da:	cb 01       	movw	r24, r22
    61dc:	f8 01       	movw	r30, r16
    61de:	91 83       	std	Z+1, r25	; 0x01
    61e0:	80 83       	st	Z, r24
    61e2:	de 01       	movw	r26, r28
    61e4:	a0 5c       	subi	r26, 0xC0	; 192
    61e6:	bf 4f       	sbci	r27, 0xFF	; 255
    61e8:	fe 01       	movw	r30, r28
    61ea:	ec 5b       	subi	r30, 0xBC	; 188
    61ec:	ff 4f       	sbci	r31, 0xFF	; 255
    61ee:	80 81       	ld	r24, Z
    61f0:	91 81       	ldd	r25, Z+1	; 0x01
    61f2:	11 96       	adiw	r26, 0x01	; 1
    61f4:	9c 93       	st	X, r25
    61f6:	8e 93       	st	-X, r24
    61f8:	fe 01       	movw	r30, r28
    61fa:	e0 5c       	subi	r30, 0xC0	; 192
    61fc:	ff 4f       	sbci	r31, 0xFF	; 255
    61fe:	80 81       	ld	r24, Z
    6200:	91 81       	ldd	r25, Z+1	; 0x01
    6202:	01 97       	sbiw	r24, 0x01	; 1
    6204:	f1 f7       	brne	.-4      	; 0x6202 <LCD_VidSendCommand+0x8b6>
    6206:	fe 01       	movw	r30, r28
    6208:	e0 5c       	subi	r30, 0xC0	; 192
    620a:	ff 4f       	sbci	r31, 0xFF	; 255
    620c:	91 83       	std	Z+1, r25	; 0x01
    620e:	80 83       	st	Z, r24
    6210:	19 c0       	rjmp	.+50     	; 0x6244 <LCD_VidSendCommand+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6212:	8e 01       	movw	r16, r28
    6214:	02 5b       	subi	r16, 0xB2	; 178
    6216:	1f 4f       	sbci	r17, 0xFF	; 255
    6218:	fe 01       	movw	r30, r28
    621a:	e1 5b       	subi	r30, 0xB1	; 177
    621c:	ff 4f       	sbci	r31, 0xFF	; 255
    621e:	60 81       	ld	r22, Z
    6220:	71 81       	ldd	r23, Z+1	; 0x01
    6222:	82 81       	ldd	r24, Z+2	; 0x02
    6224:	93 81       	ldd	r25, Z+3	; 0x03
    6226:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    622a:	dc 01       	movw	r26, r24
    622c:	cb 01       	movw	r24, r22
    622e:	f8 01       	movw	r30, r16
    6230:	80 83       	st	Z, r24
    6232:	fe 01       	movw	r30, r28
    6234:	e2 5b       	subi	r30, 0xB2	; 178
    6236:	ff 4f       	sbci	r31, 0xFF	; 255
    6238:	80 81       	ld	r24, Z
    623a:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    623c:	8f ad       	ldd	r24, Y+63	; 0x3f
    623e:	8a 95       	dec	r24
    6240:	f1 f7       	brne	.-4      	; 0x623e <LCD_VidSendCommand+0x8f2>
    6242:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);

	//Set Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinHigh);
    6244:	80 e0       	ldi	r24, 0x00	; 0
    6246:	62 e0       	ldi	r22, 0x02	; 2
    6248:	41 e0       	ldi	r20, 0x01	; 1
    624a:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    624e:	80 e0       	ldi	r24, 0x00	; 0
    6250:	90 e0       	ldi	r25, 0x00	; 0
    6252:	a0 e8       	ldi	r26, 0x80	; 128
    6254:	bf e3       	ldi	r27, 0x3F	; 63
    6256:	8b af       	std	Y+59, r24	; 0x3b
    6258:	9c af       	std	Y+60, r25	; 0x3c
    625a:	ad af       	std	Y+61, r26	; 0x3d
    625c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    625e:	6b ad       	ldd	r22, Y+59	; 0x3b
    6260:	7c ad       	ldd	r23, Y+60	; 0x3c
    6262:	8d ad       	ldd	r24, Y+61	; 0x3d
    6264:	9e ad       	ldd	r25, Y+62	; 0x3e
    6266:	2b ea       	ldi	r18, 0xAB	; 171
    6268:	3a ea       	ldi	r19, 0xAA	; 170
    626a:	4a e2       	ldi	r20, 0x2A	; 42
    626c:	50 e4       	ldi	r21, 0x40	; 64
    626e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6272:	dc 01       	movw	r26, r24
    6274:	cb 01       	movw	r24, r22
    6276:	8f ab       	std	Y+55, r24	; 0x37
    6278:	98 af       	std	Y+56, r25	; 0x38
    627a:	a9 af       	std	Y+57, r26	; 0x39
    627c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    627e:	6f a9       	ldd	r22, Y+55	; 0x37
    6280:	78 ad       	ldd	r23, Y+56	; 0x38
    6282:	89 ad       	ldd	r24, Y+57	; 0x39
    6284:	9a ad       	ldd	r25, Y+58	; 0x3a
    6286:	20 e0       	ldi	r18, 0x00	; 0
    6288:	30 e0       	ldi	r19, 0x00	; 0
    628a:	40 e8       	ldi	r20, 0x80	; 128
    628c:	5f e3       	ldi	r21, 0x3F	; 63
    628e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6292:	88 23       	and	r24, r24
    6294:	1c f4       	brge	.+6      	; 0x629c <LCD_VidSendCommand+0x950>
		__ticks = 1;
    6296:	81 e0       	ldi	r24, 0x01	; 1
    6298:	8e ab       	std	Y+54, r24	; 0x36
    629a:	91 c0       	rjmp	.+290    	; 0x63be <LCD_VidSendCommand+0xa72>
	else if (__tmp > 255)
    629c:	6f a9       	ldd	r22, Y+55	; 0x37
    629e:	78 ad       	ldd	r23, Y+56	; 0x38
    62a0:	89 ad       	ldd	r24, Y+57	; 0x39
    62a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    62a4:	20 e0       	ldi	r18, 0x00	; 0
    62a6:	30 e0       	ldi	r19, 0x00	; 0
    62a8:	4f e7       	ldi	r20, 0x7F	; 127
    62aa:	53 e4       	ldi	r21, 0x43	; 67
    62ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    62b0:	18 16       	cp	r1, r24
    62b2:	0c f0       	brlt	.+2      	; 0x62b6 <LCD_VidSendCommand+0x96a>
    62b4:	7b c0       	rjmp	.+246    	; 0x63ac <LCD_VidSendCommand+0xa60>
	{
		_delay_ms(__us / 1000.0);
    62b6:	6b ad       	ldd	r22, Y+59	; 0x3b
    62b8:	7c ad       	ldd	r23, Y+60	; 0x3c
    62ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    62bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    62be:	20 e0       	ldi	r18, 0x00	; 0
    62c0:	30 e0       	ldi	r19, 0x00	; 0
    62c2:	4a e7       	ldi	r20, 0x7A	; 122
    62c4:	54 e4       	ldi	r21, 0x44	; 68
    62c6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    62ca:	dc 01       	movw	r26, r24
    62cc:	cb 01       	movw	r24, r22
    62ce:	8a ab       	std	Y+50, r24	; 0x32
    62d0:	9b ab       	std	Y+51, r25	; 0x33
    62d2:	ac ab       	std	Y+52, r26	; 0x34
    62d4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62d6:	6a a9       	ldd	r22, Y+50	; 0x32
    62d8:	7b a9       	ldd	r23, Y+51	; 0x33
    62da:	8c a9       	ldd	r24, Y+52	; 0x34
    62dc:	9d a9       	ldd	r25, Y+53	; 0x35
    62de:	20 e0       	ldi	r18, 0x00	; 0
    62e0:	30 e0       	ldi	r19, 0x00	; 0
    62e2:	4a ef       	ldi	r20, 0xFA	; 250
    62e4:	54 e4       	ldi	r21, 0x44	; 68
    62e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    62ea:	dc 01       	movw	r26, r24
    62ec:	cb 01       	movw	r24, r22
    62ee:	8e a7       	std	Y+46, r24	; 0x2e
    62f0:	9f a7       	std	Y+47, r25	; 0x2f
    62f2:	a8 ab       	std	Y+48, r26	; 0x30
    62f4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    62f6:	6e a5       	ldd	r22, Y+46	; 0x2e
    62f8:	7f a5       	ldd	r23, Y+47	; 0x2f
    62fa:	88 a9       	ldd	r24, Y+48	; 0x30
    62fc:	99 a9       	ldd	r25, Y+49	; 0x31
    62fe:	20 e0       	ldi	r18, 0x00	; 0
    6300:	30 e0       	ldi	r19, 0x00	; 0
    6302:	40 e8       	ldi	r20, 0x80	; 128
    6304:	5f e3       	ldi	r21, 0x3F	; 63
    6306:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    630a:	88 23       	and	r24, r24
    630c:	2c f4       	brge	.+10     	; 0x6318 <LCD_VidSendCommand+0x9cc>
		__ticks = 1;
    630e:	81 e0       	ldi	r24, 0x01	; 1
    6310:	90 e0       	ldi	r25, 0x00	; 0
    6312:	9d a7       	std	Y+45, r25	; 0x2d
    6314:	8c a7       	std	Y+44, r24	; 0x2c
    6316:	3f c0       	rjmp	.+126    	; 0x6396 <LCD_VidSendCommand+0xa4a>
	else if (__tmp > 65535)
    6318:	6e a5       	ldd	r22, Y+46	; 0x2e
    631a:	7f a5       	ldd	r23, Y+47	; 0x2f
    631c:	88 a9       	ldd	r24, Y+48	; 0x30
    631e:	99 a9       	ldd	r25, Y+49	; 0x31
    6320:	20 e0       	ldi	r18, 0x00	; 0
    6322:	3f ef       	ldi	r19, 0xFF	; 255
    6324:	4f e7       	ldi	r20, 0x7F	; 127
    6326:	57 e4       	ldi	r21, 0x47	; 71
    6328:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    632c:	18 16       	cp	r1, r24
    632e:	4c f5       	brge	.+82     	; 0x6382 <LCD_VidSendCommand+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6330:	6a a9       	ldd	r22, Y+50	; 0x32
    6332:	7b a9       	ldd	r23, Y+51	; 0x33
    6334:	8c a9       	ldd	r24, Y+52	; 0x34
    6336:	9d a9       	ldd	r25, Y+53	; 0x35
    6338:	20 e0       	ldi	r18, 0x00	; 0
    633a:	30 e0       	ldi	r19, 0x00	; 0
    633c:	40 e2       	ldi	r20, 0x20	; 32
    633e:	51 e4       	ldi	r21, 0x41	; 65
    6340:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6344:	dc 01       	movw	r26, r24
    6346:	cb 01       	movw	r24, r22
    6348:	bc 01       	movw	r22, r24
    634a:	cd 01       	movw	r24, r26
    634c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6350:	dc 01       	movw	r26, r24
    6352:	cb 01       	movw	r24, r22
    6354:	9d a7       	std	Y+45, r25	; 0x2d
    6356:	8c a7       	std	Y+44, r24	; 0x2c
    6358:	0f c0       	rjmp	.+30     	; 0x6378 <LCD_VidSendCommand+0xa2c>
    635a:	88 ec       	ldi	r24, 0xC8	; 200
    635c:	90 e0       	ldi	r25, 0x00	; 0
    635e:	9b a7       	std	Y+43, r25	; 0x2b
    6360:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6362:	8a a5       	ldd	r24, Y+42	; 0x2a
    6364:	9b a5       	ldd	r25, Y+43	; 0x2b
    6366:	01 97       	sbiw	r24, 0x01	; 1
    6368:	f1 f7       	brne	.-4      	; 0x6366 <LCD_VidSendCommand+0xa1a>
    636a:	9b a7       	std	Y+43, r25	; 0x2b
    636c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    636e:	8c a5       	ldd	r24, Y+44	; 0x2c
    6370:	9d a5       	ldd	r25, Y+45	; 0x2d
    6372:	01 97       	sbiw	r24, 0x01	; 1
    6374:	9d a7       	std	Y+45, r25	; 0x2d
    6376:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6378:	8c a5       	ldd	r24, Y+44	; 0x2c
    637a:	9d a5       	ldd	r25, Y+45	; 0x2d
    637c:	00 97       	sbiw	r24, 0x00	; 0
    637e:	69 f7       	brne	.-38     	; 0x635a <LCD_VidSendCommand+0xa0e>
    6380:	24 c0       	rjmp	.+72     	; 0x63ca <LCD_VidSendCommand+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6382:	6e a5       	ldd	r22, Y+46	; 0x2e
    6384:	7f a5       	ldd	r23, Y+47	; 0x2f
    6386:	88 a9       	ldd	r24, Y+48	; 0x30
    6388:	99 a9       	ldd	r25, Y+49	; 0x31
    638a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    638e:	dc 01       	movw	r26, r24
    6390:	cb 01       	movw	r24, r22
    6392:	9d a7       	std	Y+45, r25	; 0x2d
    6394:	8c a7       	std	Y+44, r24	; 0x2c
    6396:	8c a5       	ldd	r24, Y+44	; 0x2c
    6398:	9d a5       	ldd	r25, Y+45	; 0x2d
    639a:	99 a7       	std	Y+41, r25	; 0x29
    639c:	88 a7       	std	Y+40, r24	; 0x28
    639e:	88 a5       	ldd	r24, Y+40	; 0x28
    63a0:	99 a5       	ldd	r25, Y+41	; 0x29
    63a2:	01 97       	sbiw	r24, 0x01	; 1
    63a4:	f1 f7       	brne	.-4      	; 0x63a2 <LCD_VidSendCommand+0xa56>
    63a6:	99 a7       	std	Y+41, r25	; 0x29
    63a8:	88 a7       	std	Y+40, r24	; 0x28
    63aa:	0f c0       	rjmp	.+30     	; 0x63ca <LCD_VidSendCommand+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    63ac:	6f a9       	ldd	r22, Y+55	; 0x37
    63ae:	78 ad       	ldd	r23, Y+56	; 0x38
    63b0:	89 ad       	ldd	r24, Y+57	; 0x39
    63b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    63b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    63b8:	dc 01       	movw	r26, r24
    63ba:	cb 01       	movw	r24, r22
    63bc:	8e ab       	std	Y+54, r24	; 0x36
    63be:	8e a9       	ldd	r24, Y+54	; 0x36
    63c0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    63c2:	8f a1       	ldd	r24, Y+39	; 0x27
    63c4:	8a 95       	dec	r24
    63c6:	f1 f7       	brne	.-4      	; 0x63c4 <LCD_VidSendCommand+0xa78>
    63c8:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);

	//Send LSB Command
	DIO_VidSetPinValue(LCD_PORT,Pin3,GET_BIT(Copy_u8Command,Pin0));
    63ca:	fe 01       	movw	r30, r28
    63cc:	eb 56       	subi	r30, 0x6B	; 107
    63ce:	ff 4f       	sbci	r31, 0xFF	; 255
    63d0:	80 81       	ld	r24, Z
    63d2:	98 2f       	mov	r25, r24
    63d4:	91 70       	andi	r25, 0x01	; 1
    63d6:	80 e0       	ldi	r24, 0x00	; 0
    63d8:	63 e0       	ldi	r22, 0x03	; 3
    63da:	49 2f       	mov	r20, r25
    63dc:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin4,GET_BIT(Copy_u8Command,Pin1));
    63e0:	fe 01       	movw	r30, r28
    63e2:	eb 56       	subi	r30, 0x6B	; 107
    63e4:	ff 4f       	sbci	r31, 0xFF	; 255
    63e6:	80 81       	ld	r24, Z
    63e8:	86 95       	lsr	r24
    63ea:	98 2f       	mov	r25, r24
    63ec:	91 70       	andi	r25, 0x01	; 1
    63ee:	80 e0       	ldi	r24, 0x00	; 0
    63f0:	64 e0       	ldi	r22, 0x04	; 4
    63f2:	49 2f       	mov	r20, r25
    63f4:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin5,GET_BIT(Copy_u8Command,Pin2));
    63f8:	fe 01       	movw	r30, r28
    63fa:	eb 56       	subi	r30, 0x6B	; 107
    63fc:	ff 4f       	sbci	r31, 0xFF	; 255
    63fe:	80 81       	ld	r24, Z
    6400:	86 95       	lsr	r24
    6402:	86 95       	lsr	r24
    6404:	98 2f       	mov	r25, r24
    6406:	91 70       	andi	r25, 0x01	; 1
    6408:	80 e0       	ldi	r24, 0x00	; 0
    640a:	65 e0       	ldi	r22, 0x05	; 5
    640c:	49 2f       	mov	r20, r25
    640e:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin6,GET_BIT(Copy_u8Command,Pin3));
    6412:	fe 01       	movw	r30, r28
    6414:	eb 56       	subi	r30, 0x6B	; 107
    6416:	ff 4f       	sbci	r31, 0xFF	; 255
    6418:	80 81       	ld	r24, Z
    641a:	86 95       	lsr	r24
    641c:	86 95       	lsr	r24
    641e:	86 95       	lsr	r24
    6420:	98 2f       	mov	r25, r24
    6422:	91 70       	andi	r25, 0x01	; 1
    6424:	80 e0       	ldi	r24, 0x00	; 0
    6426:	66 e0       	ldi	r22, 0x06	; 6
    6428:	49 2f       	mov	r20, r25
    642a:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    642e:	80 e0       	ldi	r24, 0x00	; 0
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	a0 e8       	ldi	r26, 0x80	; 128
    6434:	bf e3       	ldi	r27, 0x3F	; 63
    6436:	8b a3       	std	Y+35, r24	; 0x23
    6438:	9c a3       	std	Y+36, r25	; 0x24
    643a:	ad a3       	std	Y+37, r26	; 0x25
    643c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    643e:	6b a1       	ldd	r22, Y+35	; 0x23
    6440:	7c a1       	ldd	r23, Y+36	; 0x24
    6442:	8d a1       	ldd	r24, Y+37	; 0x25
    6444:	9e a1       	ldd	r25, Y+38	; 0x26
    6446:	20 e0       	ldi	r18, 0x00	; 0
    6448:	30 e0       	ldi	r19, 0x00	; 0
    644a:	4a ef       	ldi	r20, 0xFA	; 250
    644c:	54 e4       	ldi	r21, 0x44	; 68
    644e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6452:	dc 01       	movw	r26, r24
    6454:	cb 01       	movw	r24, r22
    6456:	8f 8f       	std	Y+31, r24	; 0x1f
    6458:	98 a3       	std	Y+32, r25	; 0x20
    645a:	a9 a3       	std	Y+33, r26	; 0x21
    645c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    645e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    6460:	78 a1       	ldd	r23, Y+32	; 0x20
    6462:	89 a1       	ldd	r24, Y+33	; 0x21
    6464:	9a a1       	ldd	r25, Y+34	; 0x22
    6466:	20 e0       	ldi	r18, 0x00	; 0
    6468:	30 e0       	ldi	r19, 0x00	; 0
    646a:	40 e8       	ldi	r20, 0x80	; 128
    646c:	5f e3       	ldi	r21, 0x3F	; 63
    646e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6472:	88 23       	and	r24, r24
    6474:	2c f4       	brge	.+10     	; 0x6480 <LCD_VidSendCommand+0xb34>
		__ticks = 1;
    6476:	81 e0       	ldi	r24, 0x01	; 1
    6478:	90 e0       	ldi	r25, 0x00	; 0
    647a:	9e 8f       	std	Y+30, r25	; 0x1e
    647c:	8d 8f       	std	Y+29, r24	; 0x1d
    647e:	3f c0       	rjmp	.+126    	; 0x64fe <LCD_VidSendCommand+0xbb2>
	else if (__tmp > 65535)
    6480:	6f 8d       	ldd	r22, Y+31	; 0x1f
    6482:	78 a1       	ldd	r23, Y+32	; 0x20
    6484:	89 a1       	ldd	r24, Y+33	; 0x21
    6486:	9a a1       	ldd	r25, Y+34	; 0x22
    6488:	20 e0       	ldi	r18, 0x00	; 0
    648a:	3f ef       	ldi	r19, 0xFF	; 255
    648c:	4f e7       	ldi	r20, 0x7F	; 127
    648e:	57 e4       	ldi	r21, 0x47	; 71
    6490:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6494:	18 16       	cp	r1, r24
    6496:	4c f5       	brge	.+82     	; 0x64ea <LCD_VidSendCommand+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6498:	6b a1       	ldd	r22, Y+35	; 0x23
    649a:	7c a1       	ldd	r23, Y+36	; 0x24
    649c:	8d a1       	ldd	r24, Y+37	; 0x25
    649e:	9e a1       	ldd	r25, Y+38	; 0x26
    64a0:	20 e0       	ldi	r18, 0x00	; 0
    64a2:	30 e0       	ldi	r19, 0x00	; 0
    64a4:	40 e2       	ldi	r20, 0x20	; 32
    64a6:	51 e4       	ldi	r21, 0x41	; 65
    64a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    64ac:	dc 01       	movw	r26, r24
    64ae:	cb 01       	movw	r24, r22
    64b0:	bc 01       	movw	r22, r24
    64b2:	cd 01       	movw	r24, r26
    64b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    64b8:	dc 01       	movw	r26, r24
    64ba:	cb 01       	movw	r24, r22
    64bc:	9e 8f       	std	Y+30, r25	; 0x1e
    64be:	8d 8f       	std	Y+29, r24	; 0x1d
    64c0:	0f c0       	rjmp	.+30     	; 0x64e0 <LCD_VidSendCommand+0xb94>
    64c2:	88 ec       	ldi	r24, 0xC8	; 200
    64c4:	90 e0       	ldi	r25, 0x00	; 0
    64c6:	9c 8f       	std	Y+28, r25	; 0x1c
    64c8:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    64ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    64cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    64ce:	01 97       	sbiw	r24, 0x01	; 1
    64d0:	f1 f7       	brne	.-4      	; 0x64ce <LCD_VidSendCommand+0xb82>
    64d2:	9c 8f       	std	Y+28, r25	; 0x1c
    64d4:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    64d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    64da:	01 97       	sbiw	r24, 0x01	; 1
    64dc:	9e 8f       	std	Y+30, r25	; 0x1e
    64de:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    64e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    64e4:	00 97       	sbiw	r24, 0x00	; 0
    64e6:	69 f7       	brne	.-38     	; 0x64c2 <LCD_VidSendCommand+0xb76>
    64e8:	14 c0       	rjmp	.+40     	; 0x6512 <LCD_VidSendCommand+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64ea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    64ec:	78 a1       	ldd	r23, Y+32	; 0x20
    64ee:	89 a1       	ldd	r24, Y+33	; 0x21
    64f0:	9a a1       	ldd	r25, Y+34	; 0x22
    64f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    64f6:	dc 01       	movw	r26, r24
    64f8:	cb 01       	movw	r24, r22
    64fa:	9e 8f       	std	Y+30, r25	; 0x1e
    64fc:	8d 8f       	std	Y+29, r24	; 0x1d
    64fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6500:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6502:	9a 8f       	std	Y+26, r25	; 0x1a
    6504:	89 8f       	std	Y+25, r24	; 0x19
    6506:	89 8d       	ldd	r24, Y+25	; 0x19
    6508:	9a 8d       	ldd	r25, Y+26	; 0x1a
    650a:	01 97       	sbiw	r24, 0x01	; 1
    650c:	f1 f7       	brne	.-4      	; 0x650a <LCD_VidSendCommand+0xbbe>
    650e:	9a 8f       	std	Y+26, r25	; 0x1a
    6510:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	//Clear Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinLow);
    6512:	80 e0       	ldi	r24, 0x00	; 0
    6514:	62 e0       	ldi	r22, 0x02	; 2
    6516:	40 e0       	ldi	r20, 0x00	; 0
    6518:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    651c:	80 e0       	ldi	r24, 0x00	; 0
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	a0 e8       	ldi	r26, 0x80	; 128
    6522:	bf e3       	ldi	r27, 0x3F	; 63
    6524:	8d 8b       	std	Y+21, r24	; 0x15
    6526:	9e 8b       	std	Y+22, r25	; 0x16
    6528:	af 8b       	std	Y+23, r26	; 0x17
    652a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    652c:	6d 89       	ldd	r22, Y+21	; 0x15
    652e:	7e 89       	ldd	r23, Y+22	; 0x16
    6530:	8f 89       	ldd	r24, Y+23	; 0x17
    6532:	98 8d       	ldd	r25, Y+24	; 0x18
    6534:	2b ea       	ldi	r18, 0xAB	; 171
    6536:	3a ea       	ldi	r19, 0xAA	; 170
    6538:	4a e2       	ldi	r20, 0x2A	; 42
    653a:	50 e4       	ldi	r21, 0x40	; 64
    653c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6540:	dc 01       	movw	r26, r24
    6542:	cb 01       	movw	r24, r22
    6544:	89 8b       	std	Y+17, r24	; 0x11
    6546:	9a 8b       	std	Y+18, r25	; 0x12
    6548:	ab 8b       	std	Y+19, r26	; 0x13
    654a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    654c:	69 89       	ldd	r22, Y+17	; 0x11
    654e:	7a 89       	ldd	r23, Y+18	; 0x12
    6550:	8b 89       	ldd	r24, Y+19	; 0x13
    6552:	9c 89       	ldd	r25, Y+20	; 0x14
    6554:	20 e0       	ldi	r18, 0x00	; 0
    6556:	30 e0       	ldi	r19, 0x00	; 0
    6558:	40 e8       	ldi	r20, 0x80	; 128
    655a:	5f e3       	ldi	r21, 0x3F	; 63
    655c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6560:	88 23       	and	r24, r24
    6562:	1c f4       	brge	.+6      	; 0x656a <LCD_VidSendCommand+0xc1e>
		__ticks = 1;
    6564:	81 e0       	ldi	r24, 0x01	; 1
    6566:	88 8b       	std	Y+16, r24	; 0x10
    6568:	91 c0       	rjmp	.+290    	; 0x668c <LCD_VidSendCommand+0xd40>
	else if (__tmp > 255)
    656a:	69 89       	ldd	r22, Y+17	; 0x11
    656c:	7a 89       	ldd	r23, Y+18	; 0x12
    656e:	8b 89       	ldd	r24, Y+19	; 0x13
    6570:	9c 89       	ldd	r25, Y+20	; 0x14
    6572:	20 e0       	ldi	r18, 0x00	; 0
    6574:	30 e0       	ldi	r19, 0x00	; 0
    6576:	4f e7       	ldi	r20, 0x7F	; 127
    6578:	53 e4       	ldi	r21, 0x43	; 67
    657a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    657e:	18 16       	cp	r1, r24
    6580:	0c f0       	brlt	.+2      	; 0x6584 <LCD_VidSendCommand+0xc38>
    6582:	7b c0       	rjmp	.+246    	; 0x667a <LCD_VidSendCommand+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    6584:	6d 89       	ldd	r22, Y+21	; 0x15
    6586:	7e 89       	ldd	r23, Y+22	; 0x16
    6588:	8f 89       	ldd	r24, Y+23	; 0x17
    658a:	98 8d       	ldd	r25, Y+24	; 0x18
    658c:	20 e0       	ldi	r18, 0x00	; 0
    658e:	30 e0       	ldi	r19, 0x00	; 0
    6590:	4a e7       	ldi	r20, 0x7A	; 122
    6592:	54 e4       	ldi	r21, 0x44	; 68
    6594:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    6598:	dc 01       	movw	r26, r24
    659a:	cb 01       	movw	r24, r22
    659c:	8c 87       	std	Y+12, r24	; 0x0c
    659e:	9d 87       	std	Y+13, r25	; 0x0d
    65a0:	ae 87       	std	Y+14, r26	; 0x0e
    65a2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    65a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    65a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    65aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    65ac:	20 e0       	ldi	r18, 0x00	; 0
    65ae:	30 e0       	ldi	r19, 0x00	; 0
    65b0:	4a ef       	ldi	r20, 0xFA	; 250
    65b2:	54 e4       	ldi	r21, 0x44	; 68
    65b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    65b8:	dc 01       	movw	r26, r24
    65ba:	cb 01       	movw	r24, r22
    65bc:	88 87       	std	Y+8, r24	; 0x08
    65be:	99 87       	std	Y+9, r25	; 0x09
    65c0:	aa 87       	std	Y+10, r26	; 0x0a
    65c2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    65c4:	68 85       	ldd	r22, Y+8	; 0x08
    65c6:	79 85       	ldd	r23, Y+9	; 0x09
    65c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    65ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    65cc:	20 e0       	ldi	r18, 0x00	; 0
    65ce:	30 e0       	ldi	r19, 0x00	; 0
    65d0:	40 e8       	ldi	r20, 0x80	; 128
    65d2:	5f e3       	ldi	r21, 0x3F	; 63
    65d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    65d8:	88 23       	and	r24, r24
    65da:	2c f4       	brge	.+10     	; 0x65e6 <LCD_VidSendCommand+0xc9a>
		__ticks = 1;
    65dc:	81 e0       	ldi	r24, 0x01	; 1
    65de:	90 e0       	ldi	r25, 0x00	; 0
    65e0:	9f 83       	std	Y+7, r25	; 0x07
    65e2:	8e 83       	std	Y+6, r24	; 0x06
    65e4:	3f c0       	rjmp	.+126    	; 0x6664 <LCD_VidSendCommand+0xd18>
	else if (__tmp > 65535)
    65e6:	68 85       	ldd	r22, Y+8	; 0x08
    65e8:	79 85       	ldd	r23, Y+9	; 0x09
    65ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    65ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    65ee:	20 e0       	ldi	r18, 0x00	; 0
    65f0:	3f ef       	ldi	r19, 0xFF	; 255
    65f2:	4f e7       	ldi	r20, 0x7F	; 127
    65f4:	57 e4       	ldi	r21, 0x47	; 71
    65f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    65fa:	18 16       	cp	r1, r24
    65fc:	4c f5       	brge	.+82     	; 0x6650 <LCD_VidSendCommand+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    6600:	7d 85       	ldd	r23, Y+13	; 0x0d
    6602:	8e 85       	ldd	r24, Y+14	; 0x0e
    6604:	9f 85       	ldd	r25, Y+15	; 0x0f
    6606:	20 e0       	ldi	r18, 0x00	; 0
    6608:	30 e0       	ldi	r19, 0x00	; 0
    660a:	40 e2       	ldi	r20, 0x20	; 32
    660c:	51 e4       	ldi	r21, 0x41	; 65
    660e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6612:	dc 01       	movw	r26, r24
    6614:	cb 01       	movw	r24, r22
    6616:	bc 01       	movw	r22, r24
    6618:	cd 01       	movw	r24, r26
    661a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    661e:	dc 01       	movw	r26, r24
    6620:	cb 01       	movw	r24, r22
    6622:	9f 83       	std	Y+7, r25	; 0x07
    6624:	8e 83       	std	Y+6, r24	; 0x06
    6626:	0f c0       	rjmp	.+30     	; 0x6646 <LCD_VidSendCommand+0xcfa>
    6628:	88 ec       	ldi	r24, 0xC8	; 200
    662a:	90 e0       	ldi	r25, 0x00	; 0
    662c:	9d 83       	std	Y+5, r25	; 0x05
    662e:	8c 83       	std	Y+4, r24	; 0x04
    6630:	8c 81       	ldd	r24, Y+4	; 0x04
    6632:	9d 81       	ldd	r25, Y+5	; 0x05
    6634:	01 97       	sbiw	r24, 0x01	; 1
    6636:	f1 f7       	brne	.-4      	; 0x6634 <LCD_VidSendCommand+0xce8>
    6638:	9d 83       	std	Y+5, r25	; 0x05
    663a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    663c:	8e 81       	ldd	r24, Y+6	; 0x06
    663e:	9f 81       	ldd	r25, Y+7	; 0x07
    6640:	01 97       	sbiw	r24, 0x01	; 1
    6642:	9f 83       	std	Y+7, r25	; 0x07
    6644:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6646:	8e 81       	ldd	r24, Y+6	; 0x06
    6648:	9f 81       	ldd	r25, Y+7	; 0x07
    664a:	00 97       	sbiw	r24, 0x00	; 0
    664c:	69 f7       	brne	.-38     	; 0x6628 <LCD_VidSendCommand+0xcdc>
    664e:	24 c0       	rjmp	.+72     	; 0x6698 <LCD_VidSendCommand+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6650:	68 85       	ldd	r22, Y+8	; 0x08
    6652:	79 85       	ldd	r23, Y+9	; 0x09
    6654:	8a 85       	ldd	r24, Y+10	; 0x0a
    6656:	9b 85       	ldd	r25, Y+11	; 0x0b
    6658:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    665c:	dc 01       	movw	r26, r24
    665e:	cb 01       	movw	r24, r22
    6660:	9f 83       	std	Y+7, r25	; 0x07
    6662:	8e 83       	std	Y+6, r24	; 0x06
    6664:	8e 81       	ldd	r24, Y+6	; 0x06
    6666:	9f 81       	ldd	r25, Y+7	; 0x07
    6668:	9b 83       	std	Y+3, r25	; 0x03
    666a:	8a 83       	std	Y+2, r24	; 0x02
    666c:	8a 81       	ldd	r24, Y+2	; 0x02
    666e:	9b 81       	ldd	r25, Y+3	; 0x03
    6670:	01 97       	sbiw	r24, 0x01	; 1
    6672:	f1 f7       	brne	.-4      	; 0x6670 <LCD_VidSendCommand+0xd24>
    6674:	9b 83       	std	Y+3, r25	; 0x03
    6676:	8a 83       	std	Y+2, r24	; 0x02
    6678:	0f c0       	rjmp	.+30     	; 0x6698 <LCD_VidSendCommand+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    667a:	69 89       	ldd	r22, Y+17	; 0x11
    667c:	7a 89       	ldd	r23, Y+18	; 0x12
    667e:	8b 89       	ldd	r24, Y+19	; 0x13
    6680:	9c 89       	ldd	r25, Y+20	; 0x14
    6682:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6686:	dc 01       	movw	r26, r24
    6688:	cb 01       	movw	r24, r22
    668a:	88 8b       	std	Y+16, r24	; 0x10
    668c:	88 89       	ldd	r24, Y+16	; 0x10
    668e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6690:	89 81       	ldd	r24, Y+1	; 0x01
    6692:	8a 95       	dec	r24
    6694:	f1 f7       	brne	.-4      	; 0x6692 <LCD_VidSendCommand+0xd46>
    6696:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    6698:	cb 56       	subi	r28, 0x6B	; 107
    669a:	df 4f       	sbci	r29, 0xFF	; 255
    669c:	0f b6       	in	r0, 0x3f	; 63
    669e:	f8 94       	cli
    66a0:	de bf       	out	0x3e, r29	; 62
    66a2:	0f be       	out	0x3f, r0	; 63
    66a4:	cd bf       	out	0x3d, r28	; 61
    66a6:	cf 91       	pop	r28
    66a8:	df 91       	pop	r29
    66aa:	1f 91       	pop	r17
    66ac:	0f 91       	pop	r16
    66ae:	08 95       	ret

000066b0 <LCD_VidSendChar>:

void LCD_VidSendChar(u8 Copy_u8Data)
{
    66b0:	0f 93       	push	r16
    66b2:	1f 93       	push	r17
    66b4:	df 93       	push	r29
    66b6:	cf 93       	push	r28
    66b8:	cd b7       	in	r28, 0x3d	; 61
    66ba:	de b7       	in	r29, 0x3e	; 62
    66bc:	c5 59       	subi	r28, 0x95	; 149
    66be:	d0 40       	sbci	r29, 0x00	; 0
    66c0:	0f b6       	in	r0, 0x3f	; 63
    66c2:	f8 94       	cli
    66c4:	de bf       	out	0x3e, r29	; 62
    66c6:	0f be       	out	0x3f, r0	; 63
    66c8:	cd bf       	out	0x3d, r28	; 61
    66ca:	fe 01       	movw	r30, r28
    66cc:	eb 56       	subi	r30, 0x6B	; 107
    66ce:	ff 4f       	sbci	r31, 0xFF	; 255
    66d0:	80 83       	st	Z, r24

	//Set RS
	DIO_VidSetPinValue(LCD_PORT,LCD_RS,PinHigh);
    66d2:	80 e0       	ldi	r24, 0x00	; 0
    66d4:	61 e0       	ldi	r22, 0x01	; 1
    66d6:	41 e0       	ldi	r20, 0x01	; 1
    66d8:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    66dc:	fe 01       	movw	r30, r28
    66de:	ef 56       	subi	r30, 0x6F	; 111
    66e0:	ff 4f       	sbci	r31, 0xFF	; 255
    66e2:	80 e0       	ldi	r24, 0x00	; 0
    66e4:	90 e0       	ldi	r25, 0x00	; 0
    66e6:	a0 e8       	ldi	r26, 0x80	; 128
    66e8:	bf e3       	ldi	r27, 0x3F	; 63
    66ea:	80 83       	st	Z, r24
    66ec:	91 83       	std	Z+1, r25	; 0x01
    66ee:	a2 83       	std	Z+2, r26	; 0x02
    66f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    66f2:	8e 01       	movw	r16, r28
    66f4:	03 57       	subi	r16, 0x73	; 115
    66f6:	1f 4f       	sbci	r17, 0xFF	; 255
    66f8:	fe 01       	movw	r30, r28
    66fa:	ef 56       	subi	r30, 0x6F	; 111
    66fc:	ff 4f       	sbci	r31, 0xFF	; 255
    66fe:	60 81       	ld	r22, Z
    6700:	71 81       	ldd	r23, Z+1	; 0x01
    6702:	82 81       	ldd	r24, Z+2	; 0x02
    6704:	93 81       	ldd	r25, Z+3	; 0x03
    6706:	2b ea       	ldi	r18, 0xAB	; 171
    6708:	3a ea       	ldi	r19, 0xAA	; 170
    670a:	4a e2       	ldi	r20, 0x2A	; 42
    670c:	50 e4       	ldi	r21, 0x40	; 64
    670e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6712:	dc 01       	movw	r26, r24
    6714:	cb 01       	movw	r24, r22
    6716:	f8 01       	movw	r30, r16
    6718:	80 83       	st	Z, r24
    671a:	91 83       	std	Z+1, r25	; 0x01
    671c:	a2 83       	std	Z+2, r26	; 0x02
    671e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6720:	fe 01       	movw	r30, r28
    6722:	e3 57       	subi	r30, 0x73	; 115
    6724:	ff 4f       	sbci	r31, 0xFF	; 255
    6726:	60 81       	ld	r22, Z
    6728:	71 81       	ldd	r23, Z+1	; 0x01
    672a:	82 81       	ldd	r24, Z+2	; 0x02
    672c:	93 81       	ldd	r25, Z+3	; 0x03
    672e:	20 e0       	ldi	r18, 0x00	; 0
    6730:	30 e0       	ldi	r19, 0x00	; 0
    6732:	40 e8       	ldi	r20, 0x80	; 128
    6734:	5f e3       	ldi	r21, 0x3F	; 63
    6736:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    673a:	88 23       	and	r24, r24
    673c:	34 f4       	brge	.+12     	; 0x674a <LCD_VidSendChar+0x9a>
		__ticks = 1;
    673e:	fe 01       	movw	r30, r28
    6740:	e4 57       	subi	r30, 0x74	; 116
    6742:	ff 4f       	sbci	r31, 0xFF	; 255
    6744:	81 e0       	ldi	r24, 0x01	; 1
    6746:	80 83       	st	Z, r24
    6748:	e0 c0       	rjmp	.+448    	; 0x690a <LCD_VidSendChar+0x25a>
	else if (__tmp > 255)
    674a:	fe 01       	movw	r30, r28
    674c:	e3 57       	subi	r30, 0x73	; 115
    674e:	ff 4f       	sbci	r31, 0xFF	; 255
    6750:	60 81       	ld	r22, Z
    6752:	71 81       	ldd	r23, Z+1	; 0x01
    6754:	82 81       	ldd	r24, Z+2	; 0x02
    6756:	93 81       	ldd	r25, Z+3	; 0x03
    6758:	20 e0       	ldi	r18, 0x00	; 0
    675a:	30 e0       	ldi	r19, 0x00	; 0
    675c:	4f e7       	ldi	r20, 0x7F	; 127
    675e:	53 e4       	ldi	r21, 0x43	; 67
    6760:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6764:	18 16       	cp	r1, r24
    6766:	0c f0       	brlt	.+2      	; 0x676a <LCD_VidSendChar+0xba>
    6768:	c0 c0       	rjmp	.+384    	; 0x68ea <LCD_VidSendChar+0x23a>
	{
		_delay_ms(__us / 1000.0);
    676a:	fe 01       	movw	r30, r28
    676c:	ef 56       	subi	r30, 0x6F	; 111
    676e:	ff 4f       	sbci	r31, 0xFF	; 255
    6770:	60 81       	ld	r22, Z
    6772:	71 81       	ldd	r23, Z+1	; 0x01
    6774:	82 81       	ldd	r24, Z+2	; 0x02
    6776:	93 81       	ldd	r25, Z+3	; 0x03
    6778:	20 e0       	ldi	r18, 0x00	; 0
    677a:	30 e0       	ldi	r19, 0x00	; 0
    677c:	4a e7       	ldi	r20, 0x7A	; 122
    677e:	54 e4       	ldi	r21, 0x44	; 68
    6780:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    6784:	dc 01       	movw	r26, r24
    6786:	cb 01       	movw	r24, r22
    6788:	fe 01       	movw	r30, r28
    678a:	e8 57       	subi	r30, 0x78	; 120
    678c:	ff 4f       	sbci	r31, 0xFF	; 255
    678e:	80 83       	st	Z, r24
    6790:	91 83       	std	Z+1, r25	; 0x01
    6792:	a2 83       	std	Z+2, r26	; 0x02
    6794:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6796:	8e 01       	movw	r16, r28
    6798:	0c 57       	subi	r16, 0x7C	; 124
    679a:	1f 4f       	sbci	r17, 0xFF	; 255
    679c:	fe 01       	movw	r30, r28
    679e:	e8 57       	subi	r30, 0x78	; 120
    67a0:	ff 4f       	sbci	r31, 0xFF	; 255
    67a2:	60 81       	ld	r22, Z
    67a4:	71 81       	ldd	r23, Z+1	; 0x01
    67a6:	82 81       	ldd	r24, Z+2	; 0x02
    67a8:	93 81       	ldd	r25, Z+3	; 0x03
    67aa:	20 e0       	ldi	r18, 0x00	; 0
    67ac:	30 e0       	ldi	r19, 0x00	; 0
    67ae:	4a ef       	ldi	r20, 0xFA	; 250
    67b0:	54 e4       	ldi	r21, 0x44	; 68
    67b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    67b6:	dc 01       	movw	r26, r24
    67b8:	cb 01       	movw	r24, r22
    67ba:	f8 01       	movw	r30, r16
    67bc:	80 83       	st	Z, r24
    67be:	91 83       	std	Z+1, r25	; 0x01
    67c0:	a2 83       	std	Z+2, r26	; 0x02
    67c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    67c4:	fe 01       	movw	r30, r28
    67c6:	ec 57       	subi	r30, 0x7C	; 124
    67c8:	ff 4f       	sbci	r31, 0xFF	; 255
    67ca:	60 81       	ld	r22, Z
    67cc:	71 81       	ldd	r23, Z+1	; 0x01
    67ce:	82 81       	ldd	r24, Z+2	; 0x02
    67d0:	93 81       	ldd	r25, Z+3	; 0x03
    67d2:	20 e0       	ldi	r18, 0x00	; 0
    67d4:	30 e0       	ldi	r19, 0x00	; 0
    67d6:	40 e8       	ldi	r20, 0x80	; 128
    67d8:	5f e3       	ldi	r21, 0x3F	; 63
    67da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    67de:	88 23       	and	r24, r24
    67e0:	44 f4       	brge	.+16     	; 0x67f2 <LCD_VidSendChar+0x142>
		__ticks = 1;
    67e2:	fe 01       	movw	r30, r28
    67e4:	ee 57       	subi	r30, 0x7E	; 126
    67e6:	ff 4f       	sbci	r31, 0xFF	; 255
    67e8:	81 e0       	ldi	r24, 0x01	; 1
    67ea:	90 e0       	ldi	r25, 0x00	; 0
    67ec:	91 83       	std	Z+1, r25	; 0x01
    67ee:	80 83       	st	Z, r24
    67f0:	64 c0       	rjmp	.+200    	; 0x68ba <LCD_VidSendChar+0x20a>
	else if (__tmp > 65535)
    67f2:	fe 01       	movw	r30, r28
    67f4:	ec 57       	subi	r30, 0x7C	; 124
    67f6:	ff 4f       	sbci	r31, 0xFF	; 255
    67f8:	60 81       	ld	r22, Z
    67fa:	71 81       	ldd	r23, Z+1	; 0x01
    67fc:	82 81       	ldd	r24, Z+2	; 0x02
    67fe:	93 81       	ldd	r25, Z+3	; 0x03
    6800:	20 e0       	ldi	r18, 0x00	; 0
    6802:	3f ef       	ldi	r19, 0xFF	; 255
    6804:	4f e7       	ldi	r20, 0x7F	; 127
    6806:	57 e4       	ldi	r21, 0x47	; 71
    6808:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    680c:	18 16       	cp	r1, r24
    680e:	0c f0       	brlt	.+2      	; 0x6812 <LCD_VidSendChar+0x162>
    6810:	43 c0       	rjmp	.+134    	; 0x6898 <LCD_VidSendChar+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6812:	fe 01       	movw	r30, r28
    6814:	e8 57       	subi	r30, 0x78	; 120
    6816:	ff 4f       	sbci	r31, 0xFF	; 255
    6818:	60 81       	ld	r22, Z
    681a:	71 81       	ldd	r23, Z+1	; 0x01
    681c:	82 81       	ldd	r24, Z+2	; 0x02
    681e:	93 81       	ldd	r25, Z+3	; 0x03
    6820:	20 e0       	ldi	r18, 0x00	; 0
    6822:	30 e0       	ldi	r19, 0x00	; 0
    6824:	40 e2       	ldi	r20, 0x20	; 32
    6826:	51 e4       	ldi	r21, 0x41	; 65
    6828:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    682c:	dc 01       	movw	r26, r24
    682e:	cb 01       	movw	r24, r22
    6830:	8e 01       	movw	r16, r28
    6832:	0e 57       	subi	r16, 0x7E	; 126
    6834:	1f 4f       	sbci	r17, 0xFF	; 255
    6836:	bc 01       	movw	r22, r24
    6838:	cd 01       	movw	r24, r26
    683a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    683e:	dc 01       	movw	r26, r24
    6840:	cb 01       	movw	r24, r22
    6842:	f8 01       	movw	r30, r16
    6844:	91 83       	std	Z+1, r25	; 0x01
    6846:	80 83       	st	Z, r24
    6848:	1f c0       	rjmp	.+62     	; 0x6888 <LCD_VidSendChar+0x1d8>
    684a:	fe 01       	movw	r30, r28
    684c:	e0 58       	subi	r30, 0x80	; 128
    684e:	ff 4f       	sbci	r31, 0xFF	; 255
    6850:	88 ec       	ldi	r24, 0xC8	; 200
    6852:	90 e0       	ldi	r25, 0x00	; 0
    6854:	91 83       	std	Z+1, r25	; 0x01
    6856:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6858:	fe 01       	movw	r30, r28
    685a:	e0 58       	subi	r30, 0x80	; 128
    685c:	ff 4f       	sbci	r31, 0xFF	; 255
    685e:	80 81       	ld	r24, Z
    6860:	91 81       	ldd	r25, Z+1	; 0x01
    6862:	01 97       	sbiw	r24, 0x01	; 1
    6864:	f1 f7       	brne	.-4      	; 0x6862 <LCD_VidSendChar+0x1b2>
    6866:	fe 01       	movw	r30, r28
    6868:	e0 58       	subi	r30, 0x80	; 128
    686a:	ff 4f       	sbci	r31, 0xFF	; 255
    686c:	91 83       	std	Z+1, r25	; 0x01
    686e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6870:	de 01       	movw	r26, r28
    6872:	ae 57       	subi	r26, 0x7E	; 126
    6874:	bf 4f       	sbci	r27, 0xFF	; 255
    6876:	fe 01       	movw	r30, r28
    6878:	ee 57       	subi	r30, 0x7E	; 126
    687a:	ff 4f       	sbci	r31, 0xFF	; 255
    687c:	80 81       	ld	r24, Z
    687e:	91 81       	ldd	r25, Z+1	; 0x01
    6880:	01 97       	sbiw	r24, 0x01	; 1
    6882:	11 96       	adiw	r26, 0x01	; 1
    6884:	9c 93       	st	X, r25
    6886:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6888:	fe 01       	movw	r30, r28
    688a:	ee 57       	subi	r30, 0x7E	; 126
    688c:	ff 4f       	sbci	r31, 0xFF	; 255
    688e:	80 81       	ld	r24, Z
    6890:	91 81       	ldd	r25, Z+1	; 0x01
    6892:	00 97       	sbiw	r24, 0x00	; 0
    6894:	d1 f6       	brne	.-76     	; 0x684a <LCD_VidSendChar+0x19a>
    6896:	4b c0       	rjmp	.+150    	; 0x692e <LCD_VidSendChar+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6898:	8e 01       	movw	r16, r28
    689a:	0e 57       	subi	r16, 0x7E	; 126
    689c:	1f 4f       	sbci	r17, 0xFF	; 255
    689e:	fe 01       	movw	r30, r28
    68a0:	ec 57       	subi	r30, 0x7C	; 124
    68a2:	ff 4f       	sbci	r31, 0xFF	; 255
    68a4:	60 81       	ld	r22, Z
    68a6:	71 81       	ldd	r23, Z+1	; 0x01
    68a8:	82 81       	ldd	r24, Z+2	; 0x02
    68aa:	93 81       	ldd	r25, Z+3	; 0x03
    68ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    68b0:	dc 01       	movw	r26, r24
    68b2:	cb 01       	movw	r24, r22
    68b4:	f8 01       	movw	r30, r16
    68b6:	91 83       	std	Z+1, r25	; 0x01
    68b8:	80 83       	st	Z, r24
    68ba:	de 01       	movw	r26, r28
    68bc:	a2 58       	subi	r26, 0x82	; 130
    68be:	bf 4f       	sbci	r27, 0xFF	; 255
    68c0:	fe 01       	movw	r30, r28
    68c2:	ee 57       	subi	r30, 0x7E	; 126
    68c4:	ff 4f       	sbci	r31, 0xFF	; 255
    68c6:	80 81       	ld	r24, Z
    68c8:	91 81       	ldd	r25, Z+1	; 0x01
    68ca:	11 96       	adiw	r26, 0x01	; 1
    68cc:	9c 93       	st	X, r25
    68ce:	8e 93       	st	-X, r24
    68d0:	fe 01       	movw	r30, r28
    68d2:	e2 58       	subi	r30, 0x82	; 130
    68d4:	ff 4f       	sbci	r31, 0xFF	; 255
    68d6:	80 81       	ld	r24, Z
    68d8:	91 81       	ldd	r25, Z+1	; 0x01
    68da:	01 97       	sbiw	r24, 0x01	; 1
    68dc:	f1 f7       	brne	.-4      	; 0x68da <LCD_VidSendChar+0x22a>
    68de:	fe 01       	movw	r30, r28
    68e0:	e2 58       	subi	r30, 0x82	; 130
    68e2:	ff 4f       	sbci	r31, 0xFF	; 255
    68e4:	91 83       	std	Z+1, r25	; 0x01
    68e6:	80 83       	st	Z, r24
    68e8:	22 c0       	rjmp	.+68     	; 0x692e <LCD_VidSendChar+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    68ea:	8e 01       	movw	r16, r28
    68ec:	04 57       	subi	r16, 0x74	; 116
    68ee:	1f 4f       	sbci	r17, 0xFF	; 255
    68f0:	fe 01       	movw	r30, r28
    68f2:	e3 57       	subi	r30, 0x73	; 115
    68f4:	ff 4f       	sbci	r31, 0xFF	; 255
    68f6:	60 81       	ld	r22, Z
    68f8:	71 81       	ldd	r23, Z+1	; 0x01
    68fa:	82 81       	ldd	r24, Z+2	; 0x02
    68fc:	93 81       	ldd	r25, Z+3	; 0x03
    68fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6902:	dc 01       	movw	r26, r24
    6904:	cb 01       	movw	r24, r22
    6906:	f8 01       	movw	r30, r16
    6908:	80 83       	st	Z, r24
    690a:	de 01       	movw	r26, r28
    690c:	a3 58       	subi	r26, 0x83	; 131
    690e:	bf 4f       	sbci	r27, 0xFF	; 255
    6910:	fe 01       	movw	r30, r28
    6912:	e4 57       	subi	r30, 0x74	; 116
    6914:	ff 4f       	sbci	r31, 0xFF	; 255
    6916:	80 81       	ld	r24, Z
    6918:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    691a:	fe 01       	movw	r30, r28
    691c:	e3 58       	subi	r30, 0x83	; 131
    691e:	ff 4f       	sbci	r31, 0xFF	; 255
    6920:	80 81       	ld	r24, Z
    6922:	8a 95       	dec	r24
    6924:	f1 f7       	brne	.-4      	; 0x6922 <LCD_VidSendChar+0x272>
    6926:	fe 01       	movw	r30, r28
    6928:	e3 58       	subi	r30, 0x83	; 131
    692a:	ff 4f       	sbci	r31, 0xFF	; 255
    692c:	80 83       	st	Z, r24
	_delay_us(1);

	//Set Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinHigh);
    692e:	80 e0       	ldi	r24, 0x00	; 0
    6930:	62 e0       	ldi	r22, 0x02	; 2
    6932:	41 e0       	ldi	r20, 0x01	; 1
    6934:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    6938:	fe 01       	movw	r30, r28
    693a:	e7 58       	subi	r30, 0x87	; 135
    693c:	ff 4f       	sbci	r31, 0xFF	; 255
    693e:	80 e0       	ldi	r24, 0x00	; 0
    6940:	90 e0       	ldi	r25, 0x00	; 0
    6942:	a0 e8       	ldi	r26, 0x80	; 128
    6944:	bf e3       	ldi	r27, 0x3F	; 63
    6946:	80 83       	st	Z, r24
    6948:	91 83       	std	Z+1, r25	; 0x01
    694a:	a2 83       	std	Z+2, r26	; 0x02
    694c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    694e:	8e 01       	movw	r16, r28
    6950:	0b 58       	subi	r16, 0x8B	; 139
    6952:	1f 4f       	sbci	r17, 0xFF	; 255
    6954:	fe 01       	movw	r30, r28
    6956:	e7 58       	subi	r30, 0x87	; 135
    6958:	ff 4f       	sbci	r31, 0xFF	; 255
    695a:	60 81       	ld	r22, Z
    695c:	71 81       	ldd	r23, Z+1	; 0x01
    695e:	82 81       	ldd	r24, Z+2	; 0x02
    6960:	93 81       	ldd	r25, Z+3	; 0x03
    6962:	2b ea       	ldi	r18, 0xAB	; 171
    6964:	3a ea       	ldi	r19, 0xAA	; 170
    6966:	4a e2       	ldi	r20, 0x2A	; 42
    6968:	50 e4       	ldi	r21, 0x40	; 64
    696a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    696e:	dc 01       	movw	r26, r24
    6970:	cb 01       	movw	r24, r22
    6972:	f8 01       	movw	r30, r16
    6974:	80 83       	st	Z, r24
    6976:	91 83       	std	Z+1, r25	; 0x01
    6978:	a2 83       	std	Z+2, r26	; 0x02
    697a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    697c:	fe 01       	movw	r30, r28
    697e:	eb 58       	subi	r30, 0x8B	; 139
    6980:	ff 4f       	sbci	r31, 0xFF	; 255
    6982:	60 81       	ld	r22, Z
    6984:	71 81       	ldd	r23, Z+1	; 0x01
    6986:	82 81       	ldd	r24, Z+2	; 0x02
    6988:	93 81       	ldd	r25, Z+3	; 0x03
    698a:	20 e0       	ldi	r18, 0x00	; 0
    698c:	30 e0       	ldi	r19, 0x00	; 0
    698e:	40 e8       	ldi	r20, 0x80	; 128
    6990:	5f e3       	ldi	r21, 0x3F	; 63
    6992:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6996:	88 23       	and	r24, r24
    6998:	34 f4       	brge	.+12     	; 0x69a6 <LCD_VidSendChar+0x2f6>
		__ticks = 1;
    699a:	fe 01       	movw	r30, r28
    699c:	ec 58       	subi	r30, 0x8C	; 140
    699e:	ff 4f       	sbci	r31, 0xFF	; 255
    69a0:	81 e0       	ldi	r24, 0x01	; 1
    69a2:	80 83       	st	Z, r24
    69a4:	e0 c0       	rjmp	.+448    	; 0x6b66 <LCD_VidSendChar+0x4b6>
	else if (__tmp > 255)
    69a6:	fe 01       	movw	r30, r28
    69a8:	eb 58       	subi	r30, 0x8B	; 139
    69aa:	ff 4f       	sbci	r31, 0xFF	; 255
    69ac:	60 81       	ld	r22, Z
    69ae:	71 81       	ldd	r23, Z+1	; 0x01
    69b0:	82 81       	ldd	r24, Z+2	; 0x02
    69b2:	93 81       	ldd	r25, Z+3	; 0x03
    69b4:	20 e0       	ldi	r18, 0x00	; 0
    69b6:	30 e0       	ldi	r19, 0x00	; 0
    69b8:	4f e7       	ldi	r20, 0x7F	; 127
    69ba:	53 e4       	ldi	r21, 0x43	; 67
    69bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    69c0:	18 16       	cp	r1, r24
    69c2:	0c f0       	brlt	.+2      	; 0x69c6 <LCD_VidSendChar+0x316>
    69c4:	c0 c0       	rjmp	.+384    	; 0x6b46 <LCD_VidSendChar+0x496>
	{
		_delay_ms(__us / 1000.0);
    69c6:	fe 01       	movw	r30, r28
    69c8:	e7 58       	subi	r30, 0x87	; 135
    69ca:	ff 4f       	sbci	r31, 0xFF	; 255
    69cc:	60 81       	ld	r22, Z
    69ce:	71 81       	ldd	r23, Z+1	; 0x01
    69d0:	82 81       	ldd	r24, Z+2	; 0x02
    69d2:	93 81       	ldd	r25, Z+3	; 0x03
    69d4:	20 e0       	ldi	r18, 0x00	; 0
    69d6:	30 e0       	ldi	r19, 0x00	; 0
    69d8:	4a e7       	ldi	r20, 0x7A	; 122
    69da:	54 e4       	ldi	r21, 0x44	; 68
    69dc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    69e0:	dc 01       	movw	r26, r24
    69e2:	cb 01       	movw	r24, r22
    69e4:	fe 01       	movw	r30, r28
    69e6:	e0 59       	subi	r30, 0x90	; 144
    69e8:	ff 4f       	sbci	r31, 0xFF	; 255
    69ea:	80 83       	st	Z, r24
    69ec:	91 83       	std	Z+1, r25	; 0x01
    69ee:	a2 83       	std	Z+2, r26	; 0x02
    69f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69f2:	8e 01       	movw	r16, r28
    69f4:	04 59       	subi	r16, 0x94	; 148
    69f6:	1f 4f       	sbci	r17, 0xFF	; 255
    69f8:	fe 01       	movw	r30, r28
    69fa:	e0 59       	subi	r30, 0x90	; 144
    69fc:	ff 4f       	sbci	r31, 0xFF	; 255
    69fe:	60 81       	ld	r22, Z
    6a00:	71 81       	ldd	r23, Z+1	; 0x01
    6a02:	82 81       	ldd	r24, Z+2	; 0x02
    6a04:	93 81       	ldd	r25, Z+3	; 0x03
    6a06:	20 e0       	ldi	r18, 0x00	; 0
    6a08:	30 e0       	ldi	r19, 0x00	; 0
    6a0a:	4a ef       	ldi	r20, 0xFA	; 250
    6a0c:	54 e4       	ldi	r21, 0x44	; 68
    6a0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6a12:	dc 01       	movw	r26, r24
    6a14:	cb 01       	movw	r24, r22
    6a16:	f8 01       	movw	r30, r16
    6a18:	80 83       	st	Z, r24
    6a1a:	91 83       	std	Z+1, r25	; 0x01
    6a1c:	a2 83       	std	Z+2, r26	; 0x02
    6a1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6a20:	fe 01       	movw	r30, r28
    6a22:	e4 59       	subi	r30, 0x94	; 148
    6a24:	ff 4f       	sbci	r31, 0xFF	; 255
    6a26:	60 81       	ld	r22, Z
    6a28:	71 81       	ldd	r23, Z+1	; 0x01
    6a2a:	82 81       	ldd	r24, Z+2	; 0x02
    6a2c:	93 81       	ldd	r25, Z+3	; 0x03
    6a2e:	20 e0       	ldi	r18, 0x00	; 0
    6a30:	30 e0       	ldi	r19, 0x00	; 0
    6a32:	40 e8       	ldi	r20, 0x80	; 128
    6a34:	5f e3       	ldi	r21, 0x3F	; 63
    6a36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6a3a:	88 23       	and	r24, r24
    6a3c:	44 f4       	brge	.+16     	; 0x6a4e <LCD_VidSendChar+0x39e>
		__ticks = 1;
    6a3e:	fe 01       	movw	r30, r28
    6a40:	e6 59       	subi	r30, 0x96	; 150
    6a42:	ff 4f       	sbci	r31, 0xFF	; 255
    6a44:	81 e0       	ldi	r24, 0x01	; 1
    6a46:	90 e0       	ldi	r25, 0x00	; 0
    6a48:	91 83       	std	Z+1, r25	; 0x01
    6a4a:	80 83       	st	Z, r24
    6a4c:	64 c0       	rjmp	.+200    	; 0x6b16 <LCD_VidSendChar+0x466>
	else if (__tmp > 65535)
    6a4e:	fe 01       	movw	r30, r28
    6a50:	e4 59       	subi	r30, 0x94	; 148
    6a52:	ff 4f       	sbci	r31, 0xFF	; 255
    6a54:	60 81       	ld	r22, Z
    6a56:	71 81       	ldd	r23, Z+1	; 0x01
    6a58:	82 81       	ldd	r24, Z+2	; 0x02
    6a5a:	93 81       	ldd	r25, Z+3	; 0x03
    6a5c:	20 e0       	ldi	r18, 0x00	; 0
    6a5e:	3f ef       	ldi	r19, 0xFF	; 255
    6a60:	4f e7       	ldi	r20, 0x7F	; 127
    6a62:	57 e4       	ldi	r21, 0x47	; 71
    6a64:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6a68:	18 16       	cp	r1, r24
    6a6a:	0c f0       	brlt	.+2      	; 0x6a6e <LCD_VidSendChar+0x3be>
    6a6c:	43 c0       	rjmp	.+134    	; 0x6af4 <LCD_VidSendChar+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a6e:	fe 01       	movw	r30, r28
    6a70:	e0 59       	subi	r30, 0x90	; 144
    6a72:	ff 4f       	sbci	r31, 0xFF	; 255
    6a74:	60 81       	ld	r22, Z
    6a76:	71 81       	ldd	r23, Z+1	; 0x01
    6a78:	82 81       	ldd	r24, Z+2	; 0x02
    6a7a:	93 81       	ldd	r25, Z+3	; 0x03
    6a7c:	20 e0       	ldi	r18, 0x00	; 0
    6a7e:	30 e0       	ldi	r19, 0x00	; 0
    6a80:	40 e2       	ldi	r20, 0x20	; 32
    6a82:	51 e4       	ldi	r21, 0x41	; 65
    6a84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6a88:	dc 01       	movw	r26, r24
    6a8a:	cb 01       	movw	r24, r22
    6a8c:	8e 01       	movw	r16, r28
    6a8e:	06 59       	subi	r16, 0x96	; 150
    6a90:	1f 4f       	sbci	r17, 0xFF	; 255
    6a92:	bc 01       	movw	r22, r24
    6a94:	cd 01       	movw	r24, r26
    6a96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6a9a:	dc 01       	movw	r26, r24
    6a9c:	cb 01       	movw	r24, r22
    6a9e:	f8 01       	movw	r30, r16
    6aa0:	91 83       	std	Z+1, r25	; 0x01
    6aa2:	80 83       	st	Z, r24
    6aa4:	1f c0       	rjmp	.+62     	; 0x6ae4 <LCD_VidSendChar+0x434>
    6aa6:	fe 01       	movw	r30, r28
    6aa8:	e8 59       	subi	r30, 0x98	; 152
    6aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    6aac:	88 ec       	ldi	r24, 0xC8	; 200
    6aae:	90 e0       	ldi	r25, 0x00	; 0
    6ab0:	91 83       	std	Z+1, r25	; 0x01
    6ab2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6ab4:	fe 01       	movw	r30, r28
    6ab6:	e8 59       	subi	r30, 0x98	; 152
    6ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    6aba:	80 81       	ld	r24, Z
    6abc:	91 81       	ldd	r25, Z+1	; 0x01
    6abe:	01 97       	sbiw	r24, 0x01	; 1
    6ac0:	f1 f7       	brne	.-4      	; 0x6abe <LCD_VidSendChar+0x40e>
    6ac2:	fe 01       	movw	r30, r28
    6ac4:	e8 59       	subi	r30, 0x98	; 152
    6ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ac8:	91 83       	std	Z+1, r25	; 0x01
    6aca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6acc:	de 01       	movw	r26, r28
    6ace:	a6 59       	subi	r26, 0x96	; 150
    6ad0:	bf 4f       	sbci	r27, 0xFF	; 255
    6ad2:	fe 01       	movw	r30, r28
    6ad4:	e6 59       	subi	r30, 0x96	; 150
    6ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ad8:	80 81       	ld	r24, Z
    6ada:	91 81       	ldd	r25, Z+1	; 0x01
    6adc:	01 97       	sbiw	r24, 0x01	; 1
    6ade:	11 96       	adiw	r26, 0x01	; 1
    6ae0:	9c 93       	st	X, r25
    6ae2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ae4:	fe 01       	movw	r30, r28
    6ae6:	e6 59       	subi	r30, 0x96	; 150
    6ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    6aea:	80 81       	ld	r24, Z
    6aec:	91 81       	ldd	r25, Z+1	; 0x01
    6aee:	00 97       	sbiw	r24, 0x00	; 0
    6af0:	d1 f6       	brne	.-76     	; 0x6aa6 <LCD_VidSendChar+0x3f6>
    6af2:	4b c0       	rjmp	.+150    	; 0x6b8a <LCD_VidSendChar+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6af4:	8e 01       	movw	r16, r28
    6af6:	06 59       	subi	r16, 0x96	; 150
    6af8:	1f 4f       	sbci	r17, 0xFF	; 255
    6afa:	fe 01       	movw	r30, r28
    6afc:	e4 59       	subi	r30, 0x94	; 148
    6afe:	ff 4f       	sbci	r31, 0xFF	; 255
    6b00:	60 81       	ld	r22, Z
    6b02:	71 81       	ldd	r23, Z+1	; 0x01
    6b04:	82 81       	ldd	r24, Z+2	; 0x02
    6b06:	93 81       	ldd	r25, Z+3	; 0x03
    6b08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6b0c:	dc 01       	movw	r26, r24
    6b0e:	cb 01       	movw	r24, r22
    6b10:	f8 01       	movw	r30, r16
    6b12:	91 83       	std	Z+1, r25	; 0x01
    6b14:	80 83       	st	Z, r24
    6b16:	de 01       	movw	r26, r28
    6b18:	aa 59       	subi	r26, 0x9A	; 154
    6b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    6b1c:	fe 01       	movw	r30, r28
    6b1e:	e6 59       	subi	r30, 0x96	; 150
    6b20:	ff 4f       	sbci	r31, 0xFF	; 255
    6b22:	80 81       	ld	r24, Z
    6b24:	91 81       	ldd	r25, Z+1	; 0x01
    6b26:	11 96       	adiw	r26, 0x01	; 1
    6b28:	9c 93       	st	X, r25
    6b2a:	8e 93       	st	-X, r24
    6b2c:	fe 01       	movw	r30, r28
    6b2e:	ea 59       	subi	r30, 0x9A	; 154
    6b30:	ff 4f       	sbci	r31, 0xFF	; 255
    6b32:	80 81       	ld	r24, Z
    6b34:	91 81       	ldd	r25, Z+1	; 0x01
    6b36:	01 97       	sbiw	r24, 0x01	; 1
    6b38:	f1 f7       	brne	.-4      	; 0x6b36 <LCD_VidSendChar+0x486>
    6b3a:	fe 01       	movw	r30, r28
    6b3c:	ea 59       	subi	r30, 0x9A	; 154
    6b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b40:	91 83       	std	Z+1, r25	; 0x01
    6b42:	80 83       	st	Z, r24
    6b44:	22 c0       	rjmp	.+68     	; 0x6b8a <LCD_VidSendChar+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6b46:	8e 01       	movw	r16, r28
    6b48:	0c 58       	subi	r16, 0x8C	; 140
    6b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    6b4c:	fe 01       	movw	r30, r28
    6b4e:	eb 58       	subi	r30, 0x8B	; 139
    6b50:	ff 4f       	sbci	r31, 0xFF	; 255
    6b52:	60 81       	ld	r22, Z
    6b54:	71 81       	ldd	r23, Z+1	; 0x01
    6b56:	82 81       	ldd	r24, Z+2	; 0x02
    6b58:	93 81       	ldd	r25, Z+3	; 0x03
    6b5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6b5e:	dc 01       	movw	r26, r24
    6b60:	cb 01       	movw	r24, r22
    6b62:	f8 01       	movw	r30, r16
    6b64:	80 83       	st	Z, r24
    6b66:	de 01       	movw	r26, r28
    6b68:	ab 59       	subi	r26, 0x9B	; 155
    6b6a:	bf 4f       	sbci	r27, 0xFF	; 255
    6b6c:	fe 01       	movw	r30, r28
    6b6e:	ec 58       	subi	r30, 0x8C	; 140
    6b70:	ff 4f       	sbci	r31, 0xFF	; 255
    6b72:	80 81       	ld	r24, Z
    6b74:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6b76:	fe 01       	movw	r30, r28
    6b78:	eb 59       	subi	r30, 0x9B	; 155
    6b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    6b7c:	80 81       	ld	r24, Z
    6b7e:	8a 95       	dec	r24
    6b80:	f1 f7       	brne	.-4      	; 0x6b7e <LCD_VidSendChar+0x4ce>
    6b82:	fe 01       	movw	r30, r28
    6b84:	eb 59       	subi	r30, 0x9B	; 155
    6b86:	ff 4f       	sbci	r31, 0xFF	; 255
    6b88:	80 83       	st	Z, r24
	_delay_us(1);

	//Send MSB Command
	DIO_VidSetPinValue(LCD_PORT,Pin3,GET_BIT(Copy_u8Data,Pin4));
    6b8a:	fe 01       	movw	r30, r28
    6b8c:	eb 56       	subi	r30, 0x6B	; 107
    6b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b90:	80 81       	ld	r24, Z
    6b92:	82 95       	swap	r24
    6b94:	8f 70       	andi	r24, 0x0F	; 15
    6b96:	98 2f       	mov	r25, r24
    6b98:	91 70       	andi	r25, 0x01	; 1
    6b9a:	80 e0       	ldi	r24, 0x00	; 0
    6b9c:	63 e0       	ldi	r22, 0x03	; 3
    6b9e:	49 2f       	mov	r20, r25
    6ba0:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin4,GET_BIT(Copy_u8Data,Pin5));
    6ba4:	fe 01       	movw	r30, r28
    6ba6:	eb 56       	subi	r30, 0x6B	; 107
    6ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    6baa:	80 81       	ld	r24, Z
    6bac:	82 95       	swap	r24
    6bae:	86 95       	lsr	r24
    6bb0:	87 70       	andi	r24, 0x07	; 7
    6bb2:	98 2f       	mov	r25, r24
    6bb4:	91 70       	andi	r25, 0x01	; 1
    6bb6:	80 e0       	ldi	r24, 0x00	; 0
    6bb8:	64 e0       	ldi	r22, 0x04	; 4
    6bba:	49 2f       	mov	r20, r25
    6bbc:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin5,GET_BIT(Copy_u8Data,Pin6));
    6bc0:	fe 01       	movw	r30, r28
    6bc2:	eb 56       	subi	r30, 0x6B	; 107
    6bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    6bc6:	80 81       	ld	r24, Z
    6bc8:	82 95       	swap	r24
    6bca:	86 95       	lsr	r24
    6bcc:	86 95       	lsr	r24
    6bce:	83 70       	andi	r24, 0x03	; 3
    6bd0:	98 2f       	mov	r25, r24
    6bd2:	91 70       	andi	r25, 0x01	; 1
    6bd4:	80 e0       	ldi	r24, 0x00	; 0
    6bd6:	65 e0       	ldi	r22, 0x05	; 5
    6bd8:	49 2f       	mov	r20, r25
    6bda:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin6,GET_BIT(Copy_u8Data,Pin7));
    6bde:	fe 01       	movw	r30, r28
    6be0:	eb 56       	subi	r30, 0x6B	; 107
    6be2:	ff 4f       	sbci	r31, 0xFF	; 255
    6be4:	80 81       	ld	r24, Z
    6be6:	98 2f       	mov	r25, r24
    6be8:	99 1f       	adc	r25, r25
    6bea:	99 27       	eor	r25, r25
    6bec:	99 1f       	adc	r25, r25
    6bee:	80 e0       	ldi	r24, 0x00	; 0
    6bf0:	66 e0       	ldi	r22, 0x06	; 6
    6bf2:	49 2f       	mov	r20, r25
    6bf4:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    6bf8:	fe 01       	movw	r30, r28
    6bfa:	ef 59       	subi	r30, 0x9F	; 159
    6bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    6bfe:	80 e0       	ldi	r24, 0x00	; 0
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	a0 e8       	ldi	r26, 0x80	; 128
    6c04:	bf e3       	ldi	r27, 0x3F	; 63
    6c06:	80 83       	st	Z, r24
    6c08:	91 83       	std	Z+1, r25	; 0x01
    6c0a:	a2 83       	std	Z+2, r26	; 0x02
    6c0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c0e:	8e 01       	movw	r16, r28
    6c10:	03 5a       	subi	r16, 0xA3	; 163
    6c12:	1f 4f       	sbci	r17, 0xFF	; 255
    6c14:	fe 01       	movw	r30, r28
    6c16:	ef 59       	subi	r30, 0x9F	; 159
    6c18:	ff 4f       	sbci	r31, 0xFF	; 255
    6c1a:	60 81       	ld	r22, Z
    6c1c:	71 81       	ldd	r23, Z+1	; 0x01
    6c1e:	82 81       	ldd	r24, Z+2	; 0x02
    6c20:	93 81       	ldd	r25, Z+3	; 0x03
    6c22:	20 e0       	ldi	r18, 0x00	; 0
    6c24:	30 e0       	ldi	r19, 0x00	; 0
    6c26:	4a ef       	ldi	r20, 0xFA	; 250
    6c28:	54 e4       	ldi	r21, 0x44	; 68
    6c2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6c2e:	dc 01       	movw	r26, r24
    6c30:	cb 01       	movw	r24, r22
    6c32:	f8 01       	movw	r30, r16
    6c34:	80 83       	st	Z, r24
    6c36:	91 83       	std	Z+1, r25	; 0x01
    6c38:	a2 83       	std	Z+2, r26	; 0x02
    6c3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6c3c:	fe 01       	movw	r30, r28
    6c3e:	e3 5a       	subi	r30, 0xA3	; 163
    6c40:	ff 4f       	sbci	r31, 0xFF	; 255
    6c42:	60 81       	ld	r22, Z
    6c44:	71 81       	ldd	r23, Z+1	; 0x01
    6c46:	82 81       	ldd	r24, Z+2	; 0x02
    6c48:	93 81       	ldd	r25, Z+3	; 0x03
    6c4a:	20 e0       	ldi	r18, 0x00	; 0
    6c4c:	30 e0       	ldi	r19, 0x00	; 0
    6c4e:	40 e8       	ldi	r20, 0x80	; 128
    6c50:	5f e3       	ldi	r21, 0x3F	; 63
    6c52:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6c56:	88 23       	and	r24, r24
    6c58:	44 f4       	brge	.+16     	; 0x6c6a <LCD_VidSendChar+0x5ba>
		__ticks = 1;
    6c5a:	fe 01       	movw	r30, r28
    6c5c:	e5 5a       	subi	r30, 0xA5	; 165
    6c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c60:	81 e0       	ldi	r24, 0x01	; 1
    6c62:	90 e0       	ldi	r25, 0x00	; 0
    6c64:	91 83       	std	Z+1, r25	; 0x01
    6c66:	80 83       	st	Z, r24
    6c68:	64 c0       	rjmp	.+200    	; 0x6d32 <LCD_VidSendChar+0x682>
	else if (__tmp > 65535)
    6c6a:	fe 01       	movw	r30, r28
    6c6c:	e3 5a       	subi	r30, 0xA3	; 163
    6c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c70:	60 81       	ld	r22, Z
    6c72:	71 81       	ldd	r23, Z+1	; 0x01
    6c74:	82 81       	ldd	r24, Z+2	; 0x02
    6c76:	93 81       	ldd	r25, Z+3	; 0x03
    6c78:	20 e0       	ldi	r18, 0x00	; 0
    6c7a:	3f ef       	ldi	r19, 0xFF	; 255
    6c7c:	4f e7       	ldi	r20, 0x7F	; 127
    6c7e:	57 e4       	ldi	r21, 0x47	; 71
    6c80:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6c84:	18 16       	cp	r1, r24
    6c86:	0c f0       	brlt	.+2      	; 0x6c8a <LCD_VidSendChar+0x5da>
    6c88:	43 c0       	rjmp	.+134    	; 0x6d10 <LCD_VidSendChar+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c8a:	fe 01       	movw	r30, r28
    6c8c:	ef 59       	subi	r30, 0x9F	; 159
    6c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c90:	60 81       	ld	r22, Z
    6c92:	71 81       	ldd	r23, Z+1	; 0x01
    6c94:	82 81       	ldd	r24, Z+2	; 0x02
    6c96:	93 81       	ldd	r25, Z+3	; 0x03
    6c98:	20 e0       	ldi	r18, 0x00	; 0
    6c9a:	30 e0       	ldi	r19, 0x00	; 0
    6c9c:	40 e2       	ldi	r20, 0x20	; 32
    6c9e:	51 e4       	ldi	r21, 0x41	; 65
    6ca0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6ca4:	dc 01       	movw	r26, r24
    6ca6:	cb 01       	movw	r24, r22
    6ca8:	8e 01       	movw	r16, r28
    6caa:	05 5a       	subi	r16, 0xA5	; 165
    6cac:	1f 4f       	sbci	r17, 0xFF	; 255
    6cae:	bc 01       	movw	r22, r24
    6cb0:	cd 01       	movw	r24, r26
    6cb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6cb6:	dc 01       	movw	r26, r24
    6cb8:	cb 01       	movw	r24, r22
    6cba:	f8 01       	movw	r30, r16
    6cbc:	91 83       	std	Z+1, r25	; 0x01
    6cbe:	80 83       	st	Z, r24
    6cc0:	1f c0       	rjmp	.+62     	; 0x6d00 <LCD_VidSendChar+0x650>
    6cc2:	fe 01       	movw	r30, r28
    6cc4:	e7 5a       	subi	r30, 0xA7	; 167
    6cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    6cc8:	88 ec       	ldi	r24, 0xC8	; 200
    6cca:	90 e0       	ldi	r25, 0x00	; 0
    6ccc:	91 83       	std	Z+1, r25	; 0x01
    6cce:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6cd0:	fe 01       	movw	r30, r28
    6cd2:	e7 5a       	subi	r30, 0xA7	; 167
    6cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    6cd6:	80 81       	ld	r24, Z
    6cd8:	91 81       	ldd	r25, Z+1	; 0x01
    6cda:	01 97       	sbiw	r24, 0x01	; 1
    6cdc:	f1 f7       	brne	.-4      	; 0x6cda <LCD_VidSendChar+0x62a>
    6cde:	fe 01       	movw	r30, r28
    6ce0:	e7 5a       	subi	r30, 0xA7	; 167
    6ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    6ce4:	91 83       	std	Z+1, r25	; 0x01
    6ce6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ce8:	de 01       	movw	r26, r28
    6cea:	a5 5a       	subi	r26, 0xA5	; 165
    6cec:	bf 4f       	sbci	r27, 0xFF	; 255
    6cee:	fe 01       	movw	r30, r28
    6cf0:	e5 5a       	subi	r30, 0xA5	; 165
    6cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    6cf4:	80 81       	ld	r24, Z
    6cf6:	91 81       	ldd	r25, Z+1	; 0x01
    6cf8:	01 97       	sbiw	r24, 0x01	; 1
    6cfa:	11 96       	adiw	r26, 0x01	; 1
    6cfc:	9c 93       	st	X, r25
    6cfe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d00:	fe 01       	movw	r30, r28
    6d02:	e5 5a       	subi	r30, 0xA5	; 165
    6d04:	ff 4f       	sbci	r31, 0xFF	; 255
    6d06:	80 81       	ld	r24, Z
    6d08:	91 81       	ldd	r25, Z+1	; 0x01
    6d0a:	00 97       	sbiw	r24, 0x00	; 0
    6d0c:	d1 f6       	brne	.-76     	; 0x6cc2 <LCD_VidSendChar+0x612>
    6d0e:	27 c0       	rjmp	.+78     	; 0x6d5e <LCD_VidSendChar+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d10:	8e 01       	movw	r16, r28
    6d12:	05 5a       	subi	r16, 0xA5	; 165
    6d14:	1f 4f       	sbci	r17, 0xFF	; 255
    6d16:	fe 01       	movw	r30, r28
    6d18:	e3 5a       	subi	r30, 0xA3	; 163
    6d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d1c:	60 81       	ld	r22, Z
    6d1e:	71 81       	ldd	r23, Z+1	; 0x01
    6d20:	82 81       	ldd	r24, Z+2	; 0x02
    6d22:	93 81       	ldd	r25, Z+3	; 0x03
    6d24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6d28:	dc 01       	movw	r26, r24
    6d2a:	cb 01       	movw	r24, r22
    6d2c:	f8 01       	movw	r30, r16
    6d2e:	91 83       	std	Z+1, r25	; 0x01
    6d30:	80 83       	st	Z, r24
    6d32:	de 01       	movw	r26, r28
    6d34:	a9 5a       	subi	r26, 0xA9	; 169
    6d36:	bf 4f       	sbci	r27, 0xFF	; 255
    6d38:	fe 01       	movw	r30, r28
    6d3a:	e5 5a       	subi	r30, 0xA5	; 165
    6d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d3e:	80 81       	ld	r24, Z
    6d40:	91 81       	ldd	r25, Z+1	; 0x01
    6d42:	8d 93       	st	X+, r24
    6d44:	9c 93       	st	X, r25
    6d46:	fe 01       	movw	r30, r28
    6d48:	e9 5a       	subi	r30, 0xA9	; 169
    6d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d4c:	80 81       	ld	r24, Z
    6d4e:	91 81       	ldd	r25, Z+1	; 0x01
    6d50:	01 97       	sbiw	r24, 0x01	; 1
    6d52:	f1 f7       	brne	.-4      	; 0x6d50 <LCD_VidSendChar+0x6a0>
    6d54:	fe 01       	movw	r30, r28
    6d56:	e9 5a       	subi	r30, 0xA9	; 169
    6d58:	ff 4f       	sbci	r31, 0xFF	; 255
    6d5a:	91 83       	std	Z+1, r25	; 0x01
    6d5c:	80 83       	st	Z, r24
	_delay_ms(1);

	//Clear Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinLow);
    6d5e:	80 e0       	ldi	r24, 0x00	; 0
    6d60:	62 e0       	ldi	r22, 0x02	; 2
    6d62:	40 e0       	ldi	r20, 0x00	; 0
    6d64:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    6d68:	fe 01       	movw	r30, r28
    6d6a:	ed 5a       	subi	r30, 0xAD	; 173
    6d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d6e:	80 e0       	ldi	r24, 0x00	; 0
    6d70:	90 e0       	ldi	r25, 0x00	; 0
    6d72:	a0 e8       	ldi	r26, 0x80	; 128
    6d74:	bf e3       	ldi	r27, 0x3F	; 63
    6d76:	80 83       	st	Z, r24
    6d78:	91 83       	std	Z+1, r25	; 0x01
    6d7a:	a2 83       	std	Z+2, r26	; 0x02
    6d7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    6d7e:	8e 01       	movw	r16, r28
    6d80:	01 5b       	subi	r16, 0xB1	; 177
    6d82:	1f 4f       	sbci	r17, 0xFF	; 255
    6d84:	fe 01       	movw	r30, r28
    6d86:	ed 5a       	subi	r30, 0xAD	; 173
    6d88:	ff 4f       	sbci	r31, 0xFF	; 255
    6d8a:	60 81       	ld	r22, Z
    6d8c:	71 81       	ldd	r23, Z+1	; 0x01
    6d8e:	82 81       	ldd	r24, Z+2	; 0x02
    6d90:	93 81       	ldd	r25, Z+3	; 0x03
    6d92:	2b ea       	ldi	r18, 0xAB	; 171
    6d94:	3a ea       	ldi	r19, 0xAA	; 170
    6d96:	4a e2       	ldi	r20, 0x2A	; 42
    6d98:	50 e4       	ldi	r21, 0x40	; 64
    6d9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6d9e:	dc 01       	movw	r26, r24
    6da0:	cb 01       	movw	r24, r22
    6da2:	f8 01       	movw	r30, r16
    6da4:	80 83       	st	Z, r24
    6da6:	91 83       	std	Z+1, r25	; 0x01
    6da8:	a2 83       	std	Z+2, r26	; 0x02
    6daa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6dac:	fe 01       	movw	r30, r28
    6dae:	e1 5b       	subi	r30, 0xB1	; 177
    6db0:	ff 4f       	sbci	r31, 0xFF	; 255
    6db2:	60 81       	ld	r22, Z
    6db4:	71 81       	ldd	r23, Z+1	; 0x01
    6db6:	82 81       	ldd	r24, Z+2	; 0x02
    6db8:	93 81       	ldd	r25, Z+3	; 0x03
    6dba:	20 e0       	ldi	r18, 0x00	; 0
    6dbc:	30 e0       	ldi	r19, 0x00	; 0
    6dbe:	40 e8       	ldi	r20, 0x80	; 128
    6dc0:	5f e3       	ldi	r21, 0x3F	; 63
    6dc2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6dc6:	88 23       	and	r24, r24
    6dc8:	34 f4       	brge	.+12     	; 0x6dd6 <LCD_VidSendChar+0x726>
		__ticks = 1;
    6dca:	fe 01       	movw	r30, r28
    6dcc:	e2 5b       	subi	r30, 0xB2	; 178
    6dce:	ff 4f       	sbci	r31, 0xFF	; 255
    6dd0:	81 e0       	ldi	r24, 0x01	; 1
    6dd2:	80 83       	st	Z, r24
    6dd4:	e0 c0       	rjmp	.+448    	; 0x6f96 <LCD_VidSendChar+0x8e6>
	else if (__tmp > 255)
    6dd6:	fe 01       	movw	r30, r28
    6dd8:	e1 5b       	subi	r30, 0xB1	; 177
    6dda:	ff 4f       	sbci	r31, 0xFF	; 255
    6ddc:	60 81       	ld	r22, Z
    6dde:	71 81       	ldd	r23, Z+1	; 0x01
    6de0:	82 81       	ldd	r24, Z+2	; 0x02
    6de2:	93 81       	ldd	r25, Z+3	; 0x03
    6de4:	20 e0       	ldi	r18, 0x00	; 0
    6de6:	30 e0       	ldi	r19, 0x00	; 0
    6de8:	4f e7       	ldi	r20, 0x7F	; 127
    6dea:	53 e4       	ldi	r21, 0x43	; 67
    6dec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6df0:	18 16       	cp	r1, r24
    6df2:	0c f0       	brlt	.+2      	; 0x6df6 <LCD_VidSendChar+0x746>
    6df4:	c0 c0       	rjmp	.+384    	; 0x6f76 <LCD_VidSendChar+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    6df6:	fe 01       	movw	r30, r28
    6df8:	ed 5a       	subi	r30, 0xAD	; 173
    6dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    6dfc:	60 81       	ld	r22, Z
    6dfe:	71 81       	ldd	r23, Z+1	; 0x01
    6e00:	82 81       	ldd	r24, Z+2	; 0x02
    6e02:	93 81       	ldd	r25, Z+3	; 0x03
    6e04:	20 e0       	ldi	r18, 0x00	; 0
    6e06:	30 e0       	ldi	r19, 0x00	; 0
    6e08:	4a e7       	ldi	r20, 0x7A	; 122
    6e0a:	54 e4       	ldi	r21, 0x44	; 68
    6e0c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    6e10:	dc 01       	movw	r26, r24
    6e12:	cb 01       	movw	r24, r22
    6e14:	fe 01       	movw	r30, r28
    6e16:	e6 5b       	subi	r30, 0xB6	; 182
    6e18:	ff 4f       	sbci	r31, 0xFF	; 255
    6e1a:	80 83       	st	Z, r24
    6e1c:	91 83       	std	Z+1, r25	; 0x01
    6e1e:	a2 83       	std	Z+2, r26	; 0x02
    6e20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e22:	8e 01       	movw	r16, r28
    6e24:	0a 5b       	subi	r16, 0xBA	; 186
    6e26:	1f 4f       	sbci	r17, 0xFF	; 255
    6e28:	fe 01       	movw	r30, r28
    6e2a:	e6 5b       	subi	r30, 0xB6	; 182
    6e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e2e:	60 81       	ld	r22, Z
    6e30:	71 81       	ldd	r23, Z+1	; 0x01
    6e32:	82 81       	ldd	r24, Z+2	; 0x02
    6e34:	93 81       	ldd	r25, Z+3	; 0x03
    6e36:	20 e0       	ldi	r18, 0x00	; 0
    6e38:	30 e0       	ldi	r19, 0x00	; 0
    6e3a:	4a ef       	ldi	r20, 0xFA	; 250
    6e3c:	54 e4       	ldi	r21, 0x44	; 68
    6e3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6e42:	dc 01       	movw	r26, r24
    6e44:	cb 01       	movw	r24, r22
    6e46:	f8 01       	movw	r30, r16
    6e48:	80 83       	st	Z, r24
    6e4a:	91 83       	std	Z+1, r25	; 0x01
    6e4c:	a2 83       	std	Z+2, r26	; 0x02
    6e4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6e50:	fe 01       	movw	r30, r28
    6e52:	ea 5b       	subi	r30, 0xBA	; 186
    6e54:	ff 4f       	sbci	r31, 0xFF	; 255
    6e56:	60 81       	ld	r22, Z
    6e58:	71 81       	ldd	r23, Z+1	; 0x01
    6e5a:	82 81       	ldd	r24, Z+2	; 0x02
    6e5c:	93 81       	ldd	r25, Z+3	; 0x03
    6e5e:	20 e0       	ldi	r18, 0x00	; 0
    6e60:	30 e0       	ldi	r19, 0x00	; 0
    6e62:	40 e8       	ldi	r20, 0x80	; 128
    6e64:	5f e3       	ldi	r21, 0x3F	; 63
    6e66:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6e6a:	88 23       	and	r24, r24
    6e6c:	44 f4       	brge	.+16     	; 0x6e7e <LCD_VidSendChar+0x7ce>
		__ticks = 1;
    6e6e:	fe 01       	movw	r30, r28
    6e70:	ec 5b       	subi	r30, 0xBC	; 188
    6e72:	ff 4f       	sbci	r31, 0xFF	; 255
    6e74:	81 e0       	ldi	r24, 0x01	; 1
    6e76:	90 e0       	ldi	r25, 0x00	; 0
    6e78:	91 83       	std	Z+1, r25	; 0x01
    6e7a:	80 83       	st	Z, r24
    6e7c:	64 c0       	rjmp	.+200    	; 0x6f46 <LCD_VidSendChar+0x896>
	else if (__tmp > 65535)
    6e7e:	fe 01       	movw	r30, r28
    6e80:	ea 5b       	subi	r30, 0xBA	; 186
    6e82:	ff 4f       	sbci	r31, 0xFF	; 255
    6e84:	60 81       	ld	r22, Z
    6e86:	71 81       	ldd	r23, Z+1	; 0x01
    6e88:	82 81       	ldd	r24, Z+2	; 0x02
    6e8a:	93 81       	ldd	r25, Z+3	; 0x03
    6e8c:	20 e0       	ldi	r18, 0x00	; 0
    6e8e:	3f ef       	ldi	r19, 0xFF	; 255
    6e90:	4f e7       	ldi	r20, 0x7F	; 127
    6e92:	57 e4       	ldi	r21, 0x47	; 71
    6e94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6e98:	18 16       	cp	r1, r24
    6e9a:	0c f0       	brlt	.+2      	; 0x6e9e <LCD_VidSendChar+0x7ee>
    6e9c:	43 c0       	rjmp	.+134    	; 0x6f24 <LCD_VidSendChar+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e9e:	fe 01       	movw	r30, r28
    6ea0:	e6 5b       	subi	r30, 0xB6	; 182
    6ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    6ea4:	60 81       	ld	r22, Z
    6ea6:	71 81       	ldd	r23, Z+1	; 0x01
    6ea8:	82 81       	ldd	r24, Z+2	; 0x02
    6eaa:	93 81       	ldd	r25, Z+3	; 0x03
    6eac:	20 e0       	ldi	r18, 0x00	; 0
    6eae:	30 e0       	ldi	r19, 0x00	; 0
    6eb0:	40 e2       	ldi	r20, 0x20	; 32
    6eb2:	51 e4       	ldi	r21, 0x41	; 65
    6eb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6eb8:	dc 01       	movw	r26, r24
    6eba:	cb 01       	movw	r24, r22
    6ebc:	8e 01       	movw	r16, r28
    6ebe:	0c 5b       	subi	r16, 0xBC	; 188
    6ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    6ec2:	bc 01       	movw	r22, r24
    6ec4:	cd 01       	movw	r24, r26
    6ec6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6eca:	dc 01       	movw	r26, r24
    6ecc:	cb 01       	movw	r24, r22
    6ece:	f8 01       	movw	r30, r16
    6ed0:	91 83       	std	Z+1, r25	; 0x01
    6ed2:	80 83       	st	Z, r24
    6ed4:	1f c0       	rjmp	.+62     	; 0x6f14 <LCD_VidSendChar+0x864>
    6ed6:	fe 01       	movw	r30, r28
    6ed8:	ee 5b       	subi	r30, 0xBE	; 190
    6eda:	ff 4f       	sbci	r31, 0xFF	; 255
    6edc:	88 ec       	ldi	r24, 0xC8	; 200
    6ede:	90 e0       	ldi	r25, 0x00	; 0
    6ee0:	91 83       	std	Z+1, r25	; 0x01
    6ee2:	80 83       	st	Z, r24
    6ee4:	fe 01       	movw	r30, r28
    6ee6:	ee 5b       	subi	r30, 0xBE	; 190
    6ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    6eea:	80 81       	ld	r24, Z
    6eec:	91 81       	ldd	r25, Z+1	; 0x01
    6eee:	01 97       	sbiw	r24, 0x01	; 1
    6ef0:	f1 f7       	brne	.-4      	; 0x6eee <LCD_VidSendChar+0x83e>
    6ef2:	fe 01       	movw	r30, r28
    6ef4:	ee 5b       	subi	r30, 0xBE	; 190
    6ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ef8:	91 83       	std	Z+1, r25	; 0x01
    6efa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6efc:	de 01       	movw	r26, r28
    6efe:	ac 5b       	subi	r26, 0xBC	; 188
    6f00:	bf 4f       	sbci	r27, 0xFF	; 255
    6f02:	fe 01       	movw	r30, r28
    6f04:	ec 5b       	subi	r30, 0xBC	; 188
    6f06:	ff 4f       	sbci	r31, 0xFF	; 255
    6f08:	80 81       	ld	r24, Z
    6f0a:	91 81       	ldd	r25, Z+1	; 0x01
    6f0c:	01 97       	sbiw	r24, 0x01	; 1
    6f0e:	11 96       	adiw	r26, 0x01	; 1
    6f10:	9c 93       	st	X, r25
    6f12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f14:	fe 01       	movw	r30, r28
    6f16:	ec 5b       	subi	r30, 0xBC	; 188
    6f18:	ff 4f       	sbci	r31, 0xFF	; 255
    6f1a:	80 81       	ld	r24, Z
    6f1c:	91 81       	ldd	r25, Z+1	; 0x01
    6f1e:	00 97       	sbiw	r24, 0x00	; 0
    6f20:	d1 f6       	brne	.-76     	; 0x6ed6 <LCD_VidSendChar+0x826>
    6f22:	42 c0       	rjmp	.+132    	; 0x6fa8 <LCD_VidSendChar+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f24:	8e 01       	movw	r16, r28
    6f26:	0c 5b       	subi	r16, 0xBC	; 188
    6f28:	1f 4f       	sbci	r17, 0xFF	; 255
    6f2a:	fe 01       	movw	r30, r28
    6f2c:	ea 5b       	subi	r30, 0xBA	; 186
    6f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    6f30:	60 81       	ld	r22, Z
    6f32:	71 81       	ldd	r23, Z+1	; 0x01
    6f34:	82 81       	ldd	r24, Z+2	; 0x02
    6f36:	93 81       	ldd	r25, Z+3	; 0x03
    6f38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6f3c:	dc 01       	movw	r26, r24
    6f3e:	cb 01       	movw	r24, r22
    6f40:	f8 01       	movw	r30, r16
    6f42:	91 83       	std	Z+1, r25	; 0x01
    6f44:	80 83       	st	Z, r24
    6f46:	de 01       	movw	r26, r28
    6f48:	a0 5c       	subi	r26, 0xC0	; 192
    6f4a:	bf 4f       	sbci	r27, 0xFF	; 255
    6f4c:	fe 01       	movw	r30, r28
    6f4e:	ec 5b       	subi	r30, 0xBC	; 188
    6f50:	ff 4f       	sbci	r31, 0xFF	; 255
    6f52:	80 81       	ld	r24, Z
    6f54:	91 81       	ldd	r25, Z+1	; 0x01
    6f56:	11 96       	adiw	r26, 0x01	; 1
    6f58:	9c 93       	st	X, r25
    6f5a:	8e 93       	st	-X, r24
    6f5c:	fe 01       	movw	r30, r28
    6f5e:	e0 5c       	subi	r30, 0xC0	; 192
    6f60:	ff 4f       	sbci	r31, 0xFF	; 255
    6f62:	80 81       	ld	r24, Z
    6f64:	91 81       	ldd	r25, Z+1	; 0x01
    6f66:	01 97       	sbiw	r24, 0x01	; 1
    6f68:	f1 f7       	brne	.-4      	; 0x6f66 <LCD_VidSendChar+0x8b6>
    6f6a:	fe 01       	movw	r30, r28
    6f6c:	e0 5c       	subi	r30, 0xC0	; 192
    6f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    6f70:	91 83       	std	Z+1, r25	; 0x01
    6f72:	80 83       	st	Z, r24
    6f74:	19 c0       	rjmp	.+50     	; 0x6fa8 <LCD_VidSendChar+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6f76:	8e 01       	movw	r16, r28
    6f78:	02 5b       	subi	r16, 0xB2	; 178
    6f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    6f7c:	fe 01       	movw	r30, r28
    6f7e:	e1 5b       	subi	r30, 0xB1	; 177
    6f80:	ff 4f       	sbci	r31, 0xFF	; 255
    6f82:	60 81       	ld	r22, Z
    6f84:	71 81       	ldd	r23, Z+1	; 0x01
    6f86:	82 81       	ldd	r24, Z+2	; 0x02
    6f88:	93 81       	ldd	r25, Z+3	; 0x03
    6f8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6f8e:	dc 01       	movw	r26, r24
    6f90:	cb 01       	movw	r24, r22
    6f92:	f8 01       	movw	r30, r16
    6f94:	80 83       	st	Z, r24
    6f96:	fe 01       	movw	r30, r28
    6f98:	e2 5b       	subi	r30, 0xB2	; 178
    6f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    6f9c:	80 81       	ld	r24, Z
    6f9e:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6fa0:	8f ad       	ldd	r24, Y+63	; 0x3f
    6fa2:	8a 95       	dec	r24
    6fa4:	f1 f7       	brne	.-4      	; 0x6fa2 <LCD_VidSendChar+0x8f2>
    6fa6:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);

	//Set Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinHigh);
    6fa8:	80 e0       	ldi	r24, 0x00	; 0
    6faa:	62 e0       	ldi	r22, 0x02	; 2
    6fac:	41 e0       	ldi	r20, 0x01	; 1
    6fae:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    6fb2:	80 e0       	ldi	r24, 0x00	; 0
    6fb4:	90 e0       	ldi	r25, 0x00	; 0
    6fb6:	a0 e8       	ldi	r26, 0x80	; 128
    6fb8:	bf e3       	ldi	r27, 0x3F	; 63
    6fba:	8b af       	std	Y+59, r24	; 0x3b
    6fbc:	9c af       	std	Y+60, r25	; 0x3c
    6fbe:	ad af       	std	Y+61, r26	; 0x3d
    6fc0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    6fc2:	6b ad       	ldd	r22, Y+59	; 0x3b
    6fc4:	7c ad       	ldd	r23, Y+60	; 0x3c
    6fc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    6fc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    6fca:	2b ea       	ldi	r18, 0xAB	; 171
    6fcc:	3a ea       	ldi	r19, 0xAA	; 170
    6fce:	4a e2       	ldi	r20, 0x2A	; 42
    6fd0:	50 e4       	ldi	r21, 0x40	; 64
    6fd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6fd6:	dc 01       	movw	r26, r24
    6fd8:	cb 01       	movw	r24, r22
    6fda:	8f ab       	std	Y+55, r24	; 0x37
    6fdc:	98 af       	std	Y+56, r25	; 0x38
    6fde:	a9 af       	std	Y+57, r26	; 0x39
    6fe0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    6fe2:	6f a9       	ldd	r22, Y+55	; 0x37
    6fe4:	78 ad       	ldd	r23, Y+56	; 0x38
    6fe6:	89 ad       	ldd	r24, Y+57	; 0x39
    6fe8:	9a ad       	ldd	r25, Y+58	; 0x3a
    6fea:	20 e0       	ldi	r18, 0x00	; 0
    6fec:	30 e0       	ldi	r19, 0x00	; 0
    6fee:	40 e8       	ldi	r20, 0x80	; 128
    6ff0:	5f e3       	ldi	r21, 0x3F	; 63
    6ff2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6ff6:	88 23       	and	r24, r24
    6ff8:	1c f4       	brge	.+6      	; 0x7000 <LCD_VidSendChar+0x950>
		__ticks = 1;
    6ffa:	81 e0       	ldi	r24, 0x01	; 1
    6ffc:	8e ab       	std	Y+54, r24	; 0x36
    6ffe:	91 c0       	rjmp	.+290    	; 0x7122 <LCD_VidSendChar+0xa72>
	else if (__tmp > 255)
    7000:	6f a9       	ldd	r22, Y+55	; 0x37
    7002:	78 ad       	ldd	r23, Y+56	; 0x38
    7004:	89 ad       	ldd	r24, Y+57	; 0x39
    7006:	9a ad       	ldd	r25, Y+58	; 0x3a
    7008:	20 e0       	ldi	r18, 0x00	; 0
    700a:	30 e0       	ldi	r19, 0x00	; 0
    700c:	4f e7       	ldi	r20, 0x7F	; 127
    700e:	53 e4       	ldi	r21, 0x43	; 67
    7010:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    7014:	18 16       	cp	r1, r24
    7016:	0c f0       	brlt	.+2      	; 0x701a <LCD_VidSendChar+0x96a>
    7018:	7b c0       	rjmp	.+246    	; 0x7110 <LCD_VidSendChar+0xa60>
	{
		_delay_ms(__us / 1000.0);
    701a:	6b ad       	ldd	r22, Y+59	; 0x3b
    701c:	7c ad       	ldd	r23, Y+60	; 0x3c
    701e:	8d ad       	ldd	r24, Y+61	; 0x3d
    7020:	9e ad       	ldd	r25, Y+62	; 0x3e
    7022:	20 e0       	ldi	r18, 0x00	; 0
    7024:	30 e0       	ldi	r19, 0x00	; 0
    7026:	4a e7       	ldi	r20, 0x7A	; 122
    7028:	54 e4       	ldi	r21, 0x44	; 68
    702a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    702e:	dc 01       	movw	r26, r24
    7030:	cb 01       	movw	r24, r22
    7032:	8a ab       	std	Y+50, r24	; 0x32
    7034:	9b ab       	std	Y+51, r25	; 0x33
    7036:	ac ab       	std	Y+52, r26	; 0x34
    7038:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    703a:	6a a9       	ldd	r22, Y+50	; 0x32
    703c:	7b a9       	ldd	r23, Y+51	; 0x33
    703e:	8c a9       	ldd	r24, Y+52	; 0x34
    7040:	9d a9       	ldd	r25, Y+53	; 0x35
    7042:	20 e0       	ldi	r18, 0x00	; 0
    7044:	30 e0       	ldi	r19, 0x00	; 0
    7046:	4a ef       	ldi	r20, 0xFA	; 250
    7048:	54 e4       	ldi	r21, 0x44	; 68
    704a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    704e:	dc 01       	movw	r26, r24
    7050:	cb 01       	movw	r24, r22
    7052:	8e a7       	std	Y+46, r24	; 0x2e
    7054:	9f a7       	std	Y+47, r25	; 0x2f
    7056:	a8 ab       	std	Y+48, r26	; 0x30
    7058:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    705a:	6e a5       	ldd	r22, Y+46	; 0x2e
    705c:	7f a5       	ldd	r23, Y+47	; 0x2f
    705e:	88 a9       	ldd	r24, Y+48	; 0x30
    7060:	99 a9       	ldd	r25, Y+49	; 0x31
    7062:	20 e0       	ldi	r18, 0x00	; 0
    7064:	30 e0       	ldi	r19, 0x00	; 0
    7066:	40 e8       	ldi	r20, 0x80	; 128
    7068:	5f e3       	ldi	r21, 0x3F	; 63
    706a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    706e:	88 23       	and	r24, r24
    7070:	2c f4       	brge	.+10     	; 0x707c <LCD_VidSendChar+0x9cc>
		__ticks = 1;
    7072:	81 e0       	ldi	r24, 0x01	; 1
    7074:	90 e0       	ldi	r25, 0x00	; 0
    7076:	9d a7       	std	Y+45, r25	; 0x2d
    7078:	8c a7       	std	Y+44, r24	; 0x2c
    707a:	3f c0       	rjmp	.+126    	; 0x70fa <LCD_VidSendChar+0xa4a>
	else if (__tmp > 65535)
    707c:	6e a5       	ldd	r22, Y+46	; 0x2e
    707e:	7f a5       	ldd	r23, Y+47	; 0x2f
    7080:	88 a9       	ldd	r24, Y+48	; 0x30
    7082:	99 a9       	ldd	r25, Y+49	; 0x31
    7084:	20 e0       	ldi	r18, 0x00	; 0
    7086:	3f ef       	ldi	r19, 0xFF	; 255
    7088:	4f e7       	ldi	r20, 0x7F	; 127
    708a:	57 e4       	ldi	r21, 0x47	; 71
    708c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    7090:	18 16       	cp	r1, r24
    7092:	4c f5       	brge	.+82     	; 0x70e6 <LCD_VidSendChar+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7094:	6a a9       	ldd	r22, Y+50	; 0x32
    7096:	7b a9       	ldd	r23, Y+51	; 0x33
    7098:	8c a9       	ldd	r24, Y+52	; 0x34
    709a:	9d a9       	ldd	r25, Y+53	; 0x35
    709c:	20 e0       	ldi	r18, 0x00	; 0
    709e:	30 e0       	ldi	r19, 0x00	; 0
    70a0:	40 e2       	ldi	r20, 0x20	; 32
    70a2:	51 e4       	ldi	r21, 0x41	; 65
    70a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    70a8:	dc 01       	movw	r26, r24
    70aa:	cb 01       	movw	r24, r22
    70ac:	bc 01       	movw	r22, r24
    70ae:	cd 01       	movw	r24, r26
    70b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    70b4:	dc 01       	movw	r26, r24
    70b6:	cb 01       	movw	r24, r22
    70b8:	9d a7       	std	Y+45, r25	; 0x2d
    70ba:	8c a7       	std	Y+44, r24	; 0x2c
    70bc:	0f c0       	rjmp	.+30     	; 0x70dc <LCD_VidSendChar+0xa2c>
    70be:	88 ec       	ldi	r24, 0xC8	; 200
    70c0:	90 e0       	ldi	r25, 0x00	; 0
    70c2:	9b a7       	std	Y+43, r25	; 0x2b
    70c4:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    70c6:	8a a5       	ldd	r24, Y+42	; 0x2a
    70c8:	9b a5       	ldd	r25, Y+43	; 0x2b
    70ca:	01 97       	sbiw	r24, 0x01	; 1
    70cc:	f1 f7       	brne	.-4      	; 0x70ca <LCD_VidSendChar+0xa1a>
    70ce:	9b a7       	std	Y+43, r25	; 0x2b
    70d0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    70d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    70d4:	9d a5       	ldd	r25, Y+45	; 0x2d
    70d6:	01 97       	sbiw	r24, 0x01	; 1
    70d8:	9d a7       	std	Y+45, r25	; 0x2d
    70da:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    70dc:	8c a5       	ldd	r24, Y+44	; 0x2c
    70de:	9d a5       	ldd	r25, Y+45	; 0x2d
    70e0:	00 97       	sbiw	r24, 0x00	; 0
    70e2:	69 f7       	brne	.-38     	; 0x70be <LCD_VidSendChar+0xa0e>
    70e4:	24 c0       	rjmp	.+72     	; 0x712e <LCD_VidSendChar+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    70e6:	6e a5       	ldd	r22, Y+46	; 0x2e
    70e8:	7f a5       	ldd	r23, Y+47	; 0x2f
    70ea:	88 a9       	ldd	r24, Y+48	; 0x30
    70ec:	99 a9       	ldd	r25, Y+49	; 0x31
    70ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    70f2:	dc 01       	movw	r26, r24
    70f4:	cb 01       	movw	r24, r22
    70f6:	9d a7       	std	Y+45, r25	; 0x2d
    70f8:	8c a7       	std	Y+44, r24	; 0x2c
    70fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    70fc:	9d a5       	ldd	r25, Y+45	; 0x2d
    70fe:	99 a7       	std	Y+41, r25	; 0x29
    7100:	88 a7       	std	Y+40, r24	; 0x28
    7102:	88 a5       	ldd	r24, Y+40	; 0x28
    7104:	99 a5       	ldd	r25, Y+41	; 0x29
    7106:	01 97       	sbiw	r24, 0x01	; 1
    7108:	f1 f7       	brne	.-4      	; 0x7106 <LCD_VidSendChar+0xa56>
    710a:	99 a7       	std	Y+41, r25	; 0x29
    710c:	88 a7       	std	Y+40, r24	; 0x28
    710e:	0f c0       	rjmp	.+30     	; 0x712e <LCD_VidSendChar+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    7110:	6f a9       	ldd	r22, Y+55	; 0x37
    7112:	78 ad       	ldd	r23, Y+56	; 0x38
    7114:	89 ad       	ldd	r24, Y+57	; 0x39
    7116:	9a ad       	ldd	r25, Y+58	; 0x3a
    7118:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    711c:	dc 01       	movw	r26, r24
    711e:	cb 01       	movw	r24, r22
    7120:	8e ab       	std	Y+54, r24	; 0x36
    7122:	8e a9       	ldd	r24, Y+54	; 0x36
    7124:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    7126:	8f a1       	ldd	r24, Y+39	; 0x27
    7128:	8a 95       	dec	r24
    712a:	f1 f7       	brne	.-4      	; 0x7128 <LCD_VidSendChar+0xa78>
    712c:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);

	//Send LSB Command
	DIO_VidSetPinValue(LCD_PORT,Pin3,GET_BIT(Copy_u8Data,Pin0));
    712e:	fe 01       	movw	r30, r28
    7130:	eb 56       	subi	r30, 0x6B	; 107
    7132:	ff 4f       	sbci	r31, 0xFF	; 255
    7134:	80 81       	ld	r24, Z
    7136:	98 2f       	mov	r25, r24
    7138:	91 70       	andi	r25, 0x01	; 1
    713a:	80 e0       	ldi	r24, 0x00	; 0
    713c:	63 e0       	ldi	r22, 0x03	; 3
    713e:	49 2f       	mov	r20, r25
    7140:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin4,GET_BIT(Copy_u8Data,Pin1));
    7144:	fe 01       	movw	r30, r28
    7146:	eb 56       	subi	r30, 0x6B	; 107
    7148:	ff 4f       	sbci	r31, 0xFF	; 255
    714a:	80 81       	ld	r24, Z
    714c:	86 95       	lsr	r24
    714e:	98 2f       	mov	r25, r24
    7150:	91 70       	andi	r25, 0x01	; 1
    7152:	80 e0       	ldi	r24, 0x00	; 0
    7154:	64 e0       	ldi	r22, 0x04	; 4
    7156:	49 2f       	mov	r20, r25
    7158:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin5,GET_BIT(Copy_u8Data,Pin2));
    715c:	fe 01       	movw	r30, r28
    715e:	eb 56       	subi	r30, 0x6B	; 107
    7160:	ff 4f       	sbci	r31, 0xFF	; 255
    7162:	80 81       	ld	r24, Z
    7164:	86 95       	lsr	r24
    7166:	86 95       	lsr	r24
    7168:	98 2f       	mov	r25, r24
    716a:	91 70       	andi	r25, 0x01	; 1
    716c:	80 e0       	ldi	r24, 0x00	; 0
    716e:	65 e0       	ldi	r22, 0x05	; 5
    7170:	49 2f       	mov	r20, r25
    7172:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin6,GET_BIT(Copy_u8Data,Pin3));
    7176:	fe 01       	movw	r30, r28
    7178:	eb 56       	subi	r30, 0x6B	; 107
    717a:	ff 4f       	sbci	r31, 0xFF	; 255
    717c:	80 81       	ld	r24, Z
    717e:	86 95       	lsr	r24
    7180:	86 95       	lsr	r24
    7182:	86 95       	lsr	r24
    7184:	98 2f       	mov	r25, r24
    7186:	91 70       	andi	r25, 0x01	; 1
    7188:	80 e0       	ldi	r24, 0x00	; 0
    718a:	66 e0       	ldi	r22, 0x06	; 6
    718c:	49 2f       	mov	r20, r25
    718e:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    7192:	80 e0       	ldi	r24, 0x00	; 0
    7194:	90 e0       	ldi	r25, 0x00	; 0
    7196:	a0 e8       	ldi	r26, 0x80	; 128
    7198:	bf e3       	ldi	r27, 0x3F	; 63
    719a:	8b a3       	std	Y+35, r24	; 0x23
    719c:	9c a3       	std	Y+36, r25	; 0x24
    719e:	ad a3       	std	Y+37, r26	; 0x25
    71a0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    71a2:	6b a1       	ldd	r22, Y+35	; 0x23
    71a4:	7c a1       	ldd	r23, Y+36	; 0x24
    71a6:	8d a1       	ldd	r24, Y+37	; 0x25
    71a8:	9e a1       	ldd	r25, Y+38	; 0x26
    71aa:	20 e0       	ldi	r18, 0x00	; 0
    71ac:	30 e0       	ldi	r19, 0x00	; 0
    71ae:	4a ef       	ldi	r20, 0xFA	; 250
    71b0:	54 e4       	ldi	r21, 0x44	; 68
    71b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    71b6:	dc 01       	movw	r26, r24
    71b8:	cb 01       	movw	r24, r22
    71ba:	8f 8f       	std	Y+31, r24	; 0x1f
    71bc:	98 a3       	std	Y+32, r25	; 0x20
    71be:	a9 a3       	std	Y+33, r26	; 0x21
    71c0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    71c2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    71c4:	78 a1       	ldd	r23, Y+32	; 0x20
    71c6:	89 a1       	ldd	r24, Y+33	; 0x21
    71c8:	9a a1       	ldd	r25, Y+34	; 0x22
    71ca:	20 e0       	ldi	r18, 0x00	; 0
    71cc:	30 e0       	ldi	r19, 0x00	; 0
    71ce:	40 e8       	ldi	r20, 0x80	; 128
    71d0:	5f e3       	ldi	r21, 0x3F	; 63
    71d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    71d6:	88 23       	and	r24, r24
    71d8:	2c f4       	brge	.+10     	; 0x71e4 <LCD_VidSendChar+0xb34>
		__ticks = 1;
    71da:	81 e0       	ldi	r24, 0x01	; 1
    71dc:	90 e0       	ldi	r25, 0x00	; 0
    71de:	9e 8f       	std	Y+30, r25	; 0x1e
    71e0:	8d 8f       	std	Y+29, r24	; 0x1d
    71e2:	3f c0       	rjmp	.+126    	; 0x7262 <LCD_VidSendChar+0xbb2>
	else if (__tmp > 65535)
    71e4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    71e6:	78 a1       	ldd	r23, Y+32	; 0x20
    71e8:	89 a1       	ldd	r24, Y+33	; 0x21
    71ea:	9a a1       	ldd	r25, Y+34	; 0x22
    71ec:	20 e0       	ldi	r18, 0x00	; 0
    71ee:	3f ef       	ldi	r19, 0xFF	; 255
    71f0:	4f e7       	ldi	r20, 0x7F	; 127
    71f2:	57 e4       	ldi	r21, 0x47	; 71
    71f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    71f8:	18 16       	cp	r1, r24
    71fa:	4c f5       	brge	.+82     	; 0x724e <LCD_VidSendChar+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    71fc:	6b a1       	ldd	r22, Y+35	; 0x23
    71fe:	7c a1       	ldd	r23, Y+36	; 0x24
    7200:	8d a1       	ldd	r24, Y+37	; 0x25
    7202:	9e a1       	ldd	r25, Y+38	; 0x26
    7204:	20 e0       	ldi	r18, 0x00	; 0
    7206:	30 e0       	ldi	r19, 0x00	; 0
    7208:	40 e2       	ldi	r20, 0x20	; 32
    720a:	51 e4       	ldi	r21, 0x41	; 65
    720c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    7210:	dc 01       	movw	r26, r24
    7212:	cb 01       	movw	r24, r22
    7214:	bc 01       	movw	r22, r24
    7216:	cd 01       	movw	r24, r26
    7218:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    721c:	dc 01       	movw	r26, r24
    721e:	cb 01       	movw	r24, r22
    7220:	9e 8f       	std	Y+30, r25	; 0x1e
    7222:	8d 8f       	std	Y+29, r24	; 0x1d
    7224:	0f c0       	rjmp	.+30     	; 0x7244 <LCD_VidSendChar+0xb94>
    7226:	88 ec       	ldi	r24, 0xC8	; 200
    7228:	90 e0       	ldi	r25, 0x00	; 0
    722a:	9c 8f       	std	Y+28, r25	; 0x1c
    722c:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    722e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7230:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7232:	01 97       	sbiw	r24, 0x01	; 1
    7234:	f1 f7       	brne	.-4      	; 0x7232 <LCD_VidSendChar+0xb82>
    7236:	9c 8f       	std	Y+28, r25	; 0x1c
    7238:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    723a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    723c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    723e:	01 97       	sbiw	r24, 0x01	; 1
    7240:	9e 8f       	std	Y+30, r25	; 0x1e
    7242:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7244:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7246:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7248:	00 97       	sbiw	r24, 0x00	; 0
    724a:	69 f7       	brne	.-38     	; 0x7226 <LCD_VidSendChar+0xb76>
    724c:	14 c0       	rjmp	.+40     	; 0x7276 <LCD_VidSendChar+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    724e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    7250:	78 a1       	ldd	r23, Y+32	; 0x20
    7252:	89 a1       	ldd	r24, Y+33	; 0x21
    7254:	9a a1       	ldd	r25, Y+34	; 0x22
    7256:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    725a:	dc 01       	movw	r26, r24
    725c:	cb 01       	movw	r24, r22
    725e:	9e 8f       	std	Y+30, r25	; 0x1e
    7260:	8d 8f       	std	Y+29, r24	; 0x1d
    7262:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7264:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7266:	9a 8f       	std	Y+26, r25	; 0x1a
    7268:	89 8f       	std	Y+25, r24	; 0x19
    726a:	89 8d       	ldd	r24, Y+25	; 0x19
    726c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    726e:	01 97       	sbiw	r24, 0x01	; 1
    7270:	f1 f7       	brne	.-4      	; 0x726e <LCD_VidSendChar+0xbbe>
    7272:	9a 8f       	std	Y+26, r25	; 0x1a
    7274:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	//Clear Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinLow);
    7276:	80 e0       	ldi	r24, 0x00	; 0
    7278:	62 e0       	ldi	r22, 0x02	; 2
    727a:	40 e0       	ldi	r20, 0x00	; 0
    727c:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
    7280:	80 e0       	ldi	r24, 0x00	; 0
    7282:	90 e0       	ldi	r25, 0x00	; 0
    7284:	a0 e8       	ldi	r26, 0x80	; 128
    7286:	bf e3       	ldi	r27, 0x3F	; 63
    7288:	8d 8b       	std	Y+21, r24	; 0x15
    728a:	9e 8b       	std	Y+22, r25	; 0x16
    728c:	af 8b       	std	Y+23, r26	; 0x17
    728e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    7290:	6d 89       	ldd	r22, Y+21	; 0x15
    7292:	7e 89       	ldd	r23, Y+22	; 0x16
    7294:	8f 89       	ldd	r24, Y+23	; 0x17
    7296:	98 8d       	ldd	r25, Y+24	; 0x18
    7298:	2b ea       	ldi	r18, 0xAB	; 171
    729a:	3a ea       	ldi	r19, 0xAA	; 170
    729c:	4a e2       	ldi	r20, 0x2A	; 42
    729e:	50 e4       	ldi	r21, 0x40	; 64
    72a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    72a4:	dc 01       	movw	r26, r24
    72a6:	cb 01       	movw	r24, r22
    72a8:	89 8b       	std	Y+17, r24	; 0x11
    72aa:	9a 8b       	std	Y+18, r25	; 0x12
    72ac:	ab 8b       	std	Y+19, r26	; 0x13
    72ae:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    72b0:	69 89       	ldd	r22, Y+17	; 0x11
    72b2:	7a 89       	ldd	r23, Y+18	; 0x12
    72b4:	8b 89       	ldd	r24, Y+19	; 0x13
    72b6:	9c 89       	ldd	r25, Y+20	; 0x14
    72b8:	20 e0       	ldi	r18, 0x00	; 0
    72ba:	30 e0       	ldi	r19, 0x00	; 0
    72bc:	40 e8       	ldi	r20, 0x80	; 128
    72be:	5f e3       	ldi	r21, 0x3F	; 63
    72c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    72c4:	88 23       	and	r24, r24
    72c6:	1c f4       	brge	.+6      	; 0x72ce <LCD_VidSendChar+0xc1e>
		__ticks = 1;
    72c8:	81 e0       	ldi	r24, 0x01	; 1
    72ca:	88 8b       	std	Y+16, r24	; 0x10
    72cc:	91 c0       	rjmp	.+290    	; 0x73f0 <LCD_VidSendChar+0xd40>
	else if (__tmp > 255)
    72ce:	69 89       	ldd	r22, Y+17	; 0x11
    72d0:	7a 89       	ldd	r23, Y+18	; 0x12
    72d2:	8b 89       	ldd	r24, Y+19	; 0x13
    72d4:	9c 89       	ldd	r25, Y+20	; 0x14
    72d6:	20 e0       	ldi	r18, 0x00	; 0
    72d8:	30 e0       	ldi	r19, 0x00	; 0
    72da:	4f e7       	ldi	r20, 0x7F	; 127
    72dc:	53 e4       	ldi	r21, 0x43	; 67
    72de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    72e2:	18 16       	cp	r1, r24
    72e4:	0c f0       	brlt	.+2      	; 0x72e8 <LCD_VidSendChar+0xc38>
    72e6:	7b c0       	rjmp	.+246    	; 0x73de <LCD_VidSendChar+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    72e8:	6d 89       	ldd	r22, Y+21	; 0x15
    72ea:	7e 89       	ldd	r23, Y+22	; 0x16
    72ec:	8f 89       	ldd	r24, Y+23	; 0x17
    72ee:	98 8d       	ldd	r25, Y+24	; 0x18
    72f0:	20 e0       	ldi	r18, 0x00	; 0
    72f2:	30 e0       	ldi	r19, 0x00	; 0
    72f4:	4a e7       	ldi	r20, 0x7A	; 122
    72f6:	54 e4       	ldi	r21, 0x44	; 68
    72f8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    72fc:	dc 01       	movw	r26, r24
    72fe:	cb 01       	movw	r24, r22
    7300:	8c 87       	std	Y+12, r24	; 0x0c
    7302:	9d 87       	std	Y+13, r25	; 0x0d
    7304:	ae 87       	std	Y+14, r26	; 0x0e
    7306:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7308:	6c 85       	ldd	r22, Y+12	; 0x0c
    730a:	7d 85       	ldd	r23, Y+13	; 0x0d
    730c:	8e 85       	ldd	r24, Y+14	; 0x0e
    730e:	9f 85       	ldd	r25, Y+15	; 0x0f
    7310:	20 e0       	ldi	r18, 0x00	; 0
    7312:	30 e0       	ldi	r19, 0x00	; 0
    7314:	4a ef       	ldi	r20, 0xFA	; 250
    7316:	54 e4       	ldi	r21, 0x44	; 68
    7318:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    731c:	dc 01       	movw	r26, r24
    731e:	cb 01       	movw	r24, r22
    7320:	88 87       	std	Y+8, r24	; 0x08
    7322:	99 87       	std	Y+9, r25	; 0x09
    7324:	aa 87       	std	Y+10, r26	; 0x0a
    7326:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    7328:	68 85       	ldd	r22, Y+8	; 0x08
    732a:	79 85       	ldd	r23, Y+9	; 0x09
    732c:	8a 85       	ldd	r24, Y+10	; 0x0a
    732e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7330:	20 e0       	ldi	r18, 0x00	; 0
    7332:	30 e0       	ldi	r19, 0x00	; 0
    7334:	40 e8       	ldi	r20, 0x80	; 128
    7336:	5f e3       	ldi	r21, 0x3F	; 63
    7338:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    733c:	88 23       	and	r24, r24
    733e:	2c f4       	brge	.+10     	; 0x734a <LCD_VidSendChar+0xc9a>
		__ticks = 1;
    7340:	81 e0       	ldi	r24, 0x01	; 1
    7342:	90 e0       	ldi	r25, 0x00	; 0
    7344:	9f 83       	std	Y+7, r25	; 0x07
    7346:	8e 83       	std	Y+6, r24	; 0x06
    7348:	3f c0       	rjmp	.+126    	; 0x73c8 <LCD_VidSendChar+0xd18>
	else if (__tmp > 65535)
    734a:	68 85       	ldd	r22, Y+8	; 0x08
    734c:	79 85       	ldd	r23, Y+9	; 0x09
    734e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7350:	9b 85       	ldd	r25, Y+11	; 0x0b
    7352:	20 e0       	ldi	r18, 0x00	; 0
    7354:	3f ef       	ldi	r19, 0xFF	; 255
    7356:	4f e7       	ldi	r20, 0x7F	; 127
    7358:	57 e4       	ldi	r21, 0x47	; 71
    735a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    735e:	18 16       	cp	r1, r24
    7360:	4c f5       	brge	.+82     	; 0x73b4 <LCD_VidSendChar+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7362:	6c 85       	ldd	r22, Y+12	; 0x0c
    7364:	7d 85       	ldd	r23, Y+13	; 0x0d
    7366:	8e 85       	ldd	r24, Y+14	; 0x0e
    7368:	9f 85       	ldd	r25, Y+15	; 0x0f
    736a:	20 e0       	ldi	r18, 0x00	; 0
    736c:	30 e0       	ldi	r19, 0x00	; 0
    736e:	40 e2       	ldi	r20, 0x20	; 32
    7370:	51 e4       	ldi	r21, 0x41	; 65
    7372:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    7376:	dc 01       	movw	r26, r24
    7378:	cb 01       	movw	r24, r22
    737a:	bc 01       	movw	r22, r24
    737c:	cd 01       	movw	r24, r26
    737e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    7382:	dc 01       	movw	r26, r24
    7384:	cb 01       	movw	r24, r22
    7386:	9f 83       	std	Y+7, r25	; 0x07
    7388:	8e 83       	std	Y+6, r24	; 0x06
    738a:	0f c0       	rjmp	.+30     	; 0x73aa <LCD_VidSendChar+0xcfa>
    738c:	88 ec       	ldi	r24, 0xC8	; 200
    738e:	90 e0       	ldi	r25, 0x00	; 0
    7390:	9d 83       	std	Y+5, r25	; 0x05
    7392:	8c 83       	std	Y+4, r24	; 0x04
    7394:	8c 81       	ldd	r24, Y+4	; 0x04
    7396:	9d 81       	ldd	r25, Y+5	; 0x05
    7398:	01 97       	sbiw	r24, 0x01	; 1
    739a:	f1 f7       	brne	.-4      	; 0x7398 <LCD_VidSendChar+0xce8>
    739c:	9d 83       	std	Y+5, r25	; 0x05
    739e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73a0:	8e 81       	ldd	r24, Y+6	; 0x06
    73a2:	9f 81       	ldd	r25, Y+7	; 0x07
    73a4:	01 97       	sbiw	r24, 0x01	; 1
    73a6:	9f 83       	std	Y+7, r25	; 0x07
    73a8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73aa:	8e 81       	ldd	r24, Y+6	; 0x06
    73ac:	9f 81       	ldd	r25, Y+7	; 0x07
    73ae:	00 97       	sbiw	r24, 0x00	; 0
    73b0:	69 f7       	brne	.-38     	; 0x738c <LCD_VidSendChar+0xcdc>
    73b2:	24 c0       	rjmp	.+72     	; 0x73fc <LCD_VidSendChar+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73b4:	68 85       	ldd	r22, Y+8	; 0x08
    73b6:	79 85       	ldd	r23, Y+9	; 0x09
    73b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    73ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    73bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    73c0:	dc 01       	movw	r26, r24
    73c2:	cb 01       	movw	r24, r22
    73c4:	9f 83       	std	Y+7, r25	; 0x07
    73c6:	8e 83       	std	Y+6, r24	; 0x06
    73c8:	8e 81       	ldd	r24, Y+6	; 0x06
    73ca:	9f 81       	ldd	r25, Y+7	; 0x07
    73cc:	9b 83       	std	Y+3, r25	; 0x03
    73ce:	8a 83       	std	Y+2, r24	; 0x02
    73d0:	8a 81       	ldd	r24, Y+2	; 0x02
    73d2:	9b 81       	ldd	r25, Y+3	; 0x03
    73d4:	01 97       	sbiw	r24, 0x01	; 1
    73d6:	f1 f7       	brne	.-4      	; 0x73d4 <LCD_VidSendChar+0xd24>
    73d8:	9b 83       	std	Y+3, r25	; 0x03
    73da:	8a 83       	std	Y+2, r24	; 0x02
    73dc:	0f c0       	rjmp	.+30     	; 0x73fc <LCD_VidSendChar+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    73de:	69 89       	ldd	r22, Y+17	; 0x11
    73e0:	7a 89       	ldd	r23, Y+18	; 0x12
    73e2:	8b 89       	ldd	r24, Y+19	; 0x13
    73e4:	9c 89       	ldd	r25, Y+20	; 0x14
    73e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    73ea:	dc 01       	movw	r26, r24
    73ec:	cb 01       	movw	r24, r22
    73ee:	88 8b       	std	Y+16, r24	; 0x10
    73f0:	88 89       	ldd	r24, Y+16	; 0x10
    73f2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    73f4:	89 81       	ldd	r24, Y+1	; 0x01
    73f6:	8a 95       	dec	r24
    73f8:	f1 f7       	brne	.-4      	; 0x73f6 <LCD_VidSendChar+0xd46>
    73fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);


}
    73fc:	cb 56       	subi	r28, 0x6B	; 107
    73fe:	df 4f       	sbci	r29, 0xFF	; 255
    7400:	0f b6       	in	r0, 0x3f	; 63
    7402:	f8 94       	cli
    7404:	de bf       	out	0x3e, r29	; 62
    7406:	0f be       	out	0x3f, r0	; 63
    7408:	cd bf       	out	0x3d, r28	; 61
    740a:	cf 91       	pop	r28
    740c:	df 91       	pop	r29
    740e:	1f 91       	pop	r17
    7410:	0f 91       	pop	r16
    7412:	08 95       	ret

00007414 <LCD_VidSendString>:

void LCD_VidSendString(char *Copy_u8Data)
{
    7414:	df 93       	push	r29
    7416:	cf 93       	push	r28
    7418:	00 d0       	rcall	.+0      	; 0x741a <LCD_VidSendString+0x6>
    741a:	0f 92       	push	r0
    741c:	cd b7       	in	r28, 0x3d	; 61
    741e:	de b7       	in	r29, 0x3e	; 62
    7420:	9b 83       	std	Y+3, r25	; 0x03
    7422:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0;Copy_u8Data[i]!='\0';i++)
    7424:	19 82       	std	Y+1, r1	; 0x01
    7426:	0e c0       	rjmp	.+28     	; 0x7444 <LCD_VidSendString+0x30>
		LCD_VidSendChar(Copy_u8Data[i]);
    7428:	89 81       	ldd	r24, Y+1	; 0x01
    742a:	28 2f       	mov	r18, r24
    742c:	30 e0       	ldi	r19, 0x00	; 0
    742e:	8a 81       	ldd	r24, Y+2	; 0x02
    7430:	9b 81       	ldd	r25, Y+3	; 0x03
    7432:	fc 01       	movw	r30, r24
    7434:	e2 0f       	add	r30, r18
    7436:	f3 1f       	adc	r31, r19
    7438:	80 81       	ld	r24, Z
    743a:	0e 94 58 33 	call	0x66b0	; 0x66b0 <LCD_VidSendChar>
}

void LCD_VidSendString(char *Copy_u8Data)
{
	u8 i;
	for(i=0;Copy_u8Data[i]!='\0';i++)
    743e:	89 81       	ldd	r24, Y+1	; 0x01
    7440:	8f 5f       	subi	r24, 0xFF	; 255
    7442:	89 83       	std	Y+1, r24	; 0x01
    7444:	89 81       	ldd	r24, Y+1	; 0x01
    7446:	28 2f       	mov	r18, r24
    7448:	30 e0       	ldi	r19, 0x00	; 0
    744a:	8a 81       	ldd	r24, Y+2	; 0x02
    744c:	9b 81       	ldd	r25, Y+3	; 0x03
    744e:	fc 01       	movw	r30, r24
    7450:	e2 0f       	add	r30, r18
    7452:	f3 1f       	adc	r31, r19
    7454:	80 81       	ld	r24, Z
    7456:	88 23       	and	r24, r24
    7458:	39 f7       	brne	.-50     	; 0x7428 <LCD_VidSendString+0x14>
		LCD_VidSendChar(Copy_u8Data[i]);

}
    745a:	0f 90       	pop	r0
    745c:	0f 90       	pop	r0
    745e:	0f 90       	pop	r0
    7460:	cf 91       	pop	r28
    7462:	df 91       	pop	r29
    7464:	08 95       	ret

00007466 <LCD_VidIntegerToString>:

void LCD_VidIntegerToString(u16 data)
{
    7466:	df 93       	push	r29
    7468:	cf 93       	push	r28
    746a:	cd b7       	in	r28, 0x3d	; 61
    746c:	de b7       	in	r29, 0x3e	; 62
    746e:	62 97       	sbiw	r28, 0x12	; 18
    7470:	0f b6       	in	r0, 0x3f	; 63
    7472:	f8 94       	cli
    7474:	de bf       	out	0x3e, r29	; 62
    7476:	0f be       	out	0x3f, r0	; 63
    7478:	cd bf       	out	0x3d, r28	; 61
    747a:	9a 8b       	std	Y+18, r25	; 0x12
    747c:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   itoa(data,arr,10);
    747e:	89 89       	ldd	r24, Y+17	; 0x11
    7480:	9a 89       	ldd	r25, Y+18	; 0x12
    7482:	9e 01       	movw	r18, r28
    7484:	2f 5f       	subi	r18, 0xFF	; 255
    7486:	3f 4f       	sbci	r19, 0xFF	; 255
    7488:	b9 01       	movw	r22, r18
    748a:	4a e0       	ldi	r20, 0x0A	; 10
    748c:	50 e0       	ldi	r21, 0x00	; 0
    748e:	0e 94 4a 3c 	call	0x7894	; 0x7894 <itoa>

   LCD_VidSendString(arr);
    7492:	ce 01       	movw	r24, r28
    7494:	01 96       	adiw	r24, 0x01	; 1
    7496:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
}
    749a:	62 96       	adiw	r28, 0x12	; 18
    749c:	0f b6       	in	r0, 0x3f	; 63
    749e:	f8 94       	cli
    74a0:	de bf       	out	0x3e, r29	; 62
    74a2:	0f be       	out	0x3f, r0	; 63
    74a4:	cd bf       	out	0x3d, r28	; 61
    74a6:	cf 91       	pop	r28
    74a8:	df 91       	pop	r29
    74aa:	08 95       	ret

000074ac <LCD_VidMoveCursor>:

void LCD_VidMoveCursor(u8 row, u8 column)
{
    74ac:	df 93       	push	r29
    74ae:	cf 93       	push	r28
    74b0:	00 d0       	rcall	.+0      	; 0x74b2 <LCD_VidMoveCursor+0x6>
    74b2:	00 d0       	rcall	.+0      	; 0x74b4 <LCD_VidMoveCursor+0x8>
    74b4:	0f 92       	push	r0
    74b6:	cd b7       	in	r28, 0x3d	; 61
    74b8:	de b7       	in	r29, 0x3e	; 62
    74ba:	8a 83       	std	Y+2, r24	; 0x02
    74bc:	6b 83       	std	Y+3, r22	; 0x03

	u8 position;
	switch(row)
    74be:	8a 81       	ldd	r24, Y+2	; 0x02
    74c0:	28 2f       	mov	r18, r24
    74c2:	30 e0       	ldi	r19, 0x00	; 0
    74c4:	3d 83       	std	Y+5, r19	; 0x05
    74c6:	2c 83       	std	Y+4, r18	; 0x04
    74c8:	8c 81       	ldd	r24, Y+4	; 0x04
    74ca:	9d 81       	ldd	r25, Y+5	; 0x05
    74cc:	00 97       	sbiw	r24, 0x00	; 0
    74ce:	31 f0       	breq	.+12     	; 0x74dc <LCD_VidMoveCursor+0x30>
    74d0:	2c 81       	ldd	r18, Y+4	; 0x04
    74d2:	3d 81       	ldd	r19, Y+5	; 0x05
    74d4:	21 30       	cpi	r18, 0x01	; 1
    74d6:	31 05       	cpc	r19, r1
    74d8:	21 f0       	breq	.+8      	; 0x74e2 <LCD_VidMoveCursor+0x36>
    74da:	06 c0       	rjmp	.+12     	; 0x74e8 <LCD_VidMoveCursor+0x3c>
	{
	case 0 :
		position=0x00+column; //first row position is 0x00 + column
    74dc:	8b 81       	ldd	r24, Y+3	; 0x03
    74de:	89 83       	std	Y+1, r24	; 0x01
    74e0:	03 c0       	rjmp	.+6      	; 0x74e8 <LCD_VidMoveCursor+0x3c>
		break;
	case 1 :
		position=0x40+column; //second row position is 0x040 + column
    74e2:	8b 81       	ldd	r24, Y+3	; 0x03
    74e4:	80 5c       	subi	r24, 0xC0	; 192
    74e6:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
	LCD_VidSendCommand(position|0x80);
    74e8:	89 81       	ldd	r24, Y+1	; 0x01
    74ea:	80 68       	ori	r24, 0x80	; 128
    74ec:	0e 94 a6 2c 	call	0x594c	; 0x594c <LCD_VidSendCommand>
}
    74f0:	0f 90       	pop	r0
    74f2:	0f 90       	pop	r0
    74f4:	0f 90       	pop	r0
    74f6:	0f 90       	pop	r0
    74f8:	0f 90       	pop	r0
    74fa:	cf 91       	pop	r28
    74fc:	df 91       	pop	r29
    74fe:	08 95       	ret

00007500 <LCD_VidSendString_XY>:
void LCD_VidSendString_XY(char *Copy_u8Data,u8 row, u8 column)
{
    7500:	df 93       	push	r29
    7502:	cf 93       	push	r28
    7504:	00 d0       	rcall	.+0      	; 0x7506 <LCD_VidSendString_XY+0x6>
    7506:	00 d0       	rcall	.+0      	; 0x7508 <LCD_VidSendString_XY+0x8>
    7508:	cd b7       	in	r28, 0x3d	; 61
    750a:	de b7       	in	r29, 0x3e	; 62
    750c:	9a 83       	std	Y+2, r25	; 0x02
    750e:	89 83       	std	Y+1, r24	; 0x01
    7510:	6b 83       	std	Y+3, r22	; 0x03
    7512:	4c 83       	std	Y+4, r20	; 0x04
	LCD_VidMoveCursor(row,column);
    7514:	8b 81       	ldd	r24, Y+3	; 0x03
    7516:	6c 81       	ldd	r22, Y+4	; 0x04
    7518:	0e 94 56 3a 	call	0x74ac	; 0x74ac <LCD_VidMoveCursor>
	LCD_VidSendString(Copy_u8Data);
    751c:	89 81       	ldd	r24, Y+1	; 0x01
    751e:	9a 81       	ldd	r25, Y+2	; 0x02
    7520:	0e 94 0a 3a 	call	0x7414	; 0x7414 <LCD_VidSendString>
}
    7524:	0f 90       	pop	r0
    7526:	0f 90       	pop	r0
    7528:	0f 90       	pop	r0
    752a:	0f 90       	pop	r0
    752c:	cf 91       	pop	r28
    752e:	df 91       	pop	r29
    7530:	08 95       	ret

00007532 <LCD_VidIntegerToString_XY>:
void LCD_VidIntegerToString_XY(u16 data,u8 row, u8 column)
{
    7532:	df 93       	push	r29
    7534:	cf 93       	push	r28
    7536:	00 d0       	rcall	.+0      	; 0x7538 <LCD_VidIntegerToString_XY+0x6>
    7538:	00 d0       	rcall	.+0      	; 0x753a <LCD_VidIntegerToString_XY+0x8>
    753a:	cd b7       	in	r28, 0x3d	; 61
    753c:	de b7       	in	r29, 0x3e	; 62
    753e:	9a 83       	std	Y+2, r25	; 0x02
    7540:	89 83       	std	Y+1, r24	; 0x01
    7542:	6b 83       	std	Y+3, r22	; 0x03
    7544:	4c 83       	std	Y+4, r20	; 0x04
	LCD_VidMoveCursor(row,column);
    7546:	8b 81       	ldd	r24, Y+3	; 0x03
    7548:	6c 81       	ldd	r22, Y+4	; 0x04
    754a:	0e 94 56 3a 	call	0x74ac	; 0x74ac <LCD_VidMoveCursor>
	LCD_VidIntegerToString(data);
    754e:	89 81       	ldd	r24, Y+1	; 0x01
    7550:	9a 81       	ldd	r25, Y+2	; 0x02
    7552:	0e 94 33 3a 	call	0x7466	; 0x7466 <LCD_VidIntegerToString>
}
    7556:	0f 90       	pop	r0
    7558:	0f 90       	pop	r0
    755a:	0f 90       	pop	r0
    755c:	0f 90       	pop	r0
    755e:	cf 91       	pop	r28
    7560:	df 91       	pop	r29
    7562:	08 95       	ret

00007564 <LCD_VidSendChar_XY>:
void LCD_VidSendChar_XY(u8 Copy_u8Data,u8 row, u8 column)
{
    7564:	df 93       	push	r29
    7566:	cf 93       	push	r28
    7568:	00 d0       	rcall	.+0      	; 0x756a <LCD_VidSendChar_XY+0x6>
    756a:	0f 92       	push	r0
    756c:	cd b7       	in	r28, 0x3d	; 61
    756e:	de b7       	in	r29, 0x3e	; 62
    7570:	89 83       	std	Y+1, r24	; 0x01
    7572:	6a 83       	std	Y+2, r22	; 0x02
    7574:	4b 83       	std	Y+3, r20	; 0x03
	LCD_VidMoveCursor(row,column);
    7576:	8a 81       	ldd	r24, Y+2	; 0x02
    7578:	6b 81       	ldd	r22, Y+3	; 0x03
    757a:	0e 94 56 3a 	call	0x74ac	; 0x74ac <LCD_VidMoveCursor>
	LCD_VidSendChar(Copy_u8Data);
    757e:	89 81       	ldd	r24, Y+1	; 0x01
    7580:	0e 94 58 33 	call	0x66b0	; 0x66b0 <LCD_VidSendChar>
}
    7584:	0f 90       	pop	r0
    7586:	0f 90       	pop	r0
    7588:	0f 90       	pop	r0
    758a:	cf 91       	pop	r28
    758c:	df 91       	pop	r29
    758e:	08 95       	ret

00007590 <LCD_VidSendFloat>:

void LCD_VidSendFloat(f32 data)
{
    7590:	df 93       	push	r29
    7592:	cf 93       	push	r28
    7594:	cd b7       	in	r28, 0x3d	; 61
    7596:	de b7       	in	r29, 0x3e	; 62
    7598:	28 97       	sbiw	r28, 0x08	; 8
    759a:	0f b6       	in	r0, 0x3f	; 63
    759c:	f8 94       	cli
    759e:	de bf       	out	0x3e, r29	; 62
    75a0:	0f be       	out	0x3f, r0	; 63
    75a2:	cd bf       	out	0x3d, r28	; 61
    75a4:	6d 83       	std	Y+5, r22	; 0x05
    75a6:	7e 83       	std	Y+6, r23	; 0x06
    75a8:	8f 83       	std	Y+7, r24	; 0x07
    75aa:	98 87       	std	Y+8, r25	; 0x08
	s16 _dot,dot_;
	_dot = data;
    75ac:	6d 81       	ldd	r22, Y+5	; 0x05
    75ae:	7e 81       	ldd	r23, Y+6	; 0x06
    75b0:	8f 81       	ldd	r24, Y+7	; 0x07
    75b2:	98 85       	ldd	r25, Y+8	; 0x08
    75b4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    75b8:	dc 01       	movw	r26, r24
    75ba:	cb 01       	movw	r24, r22
    75bc:	9c 83       	std	Y+4, r25	; 0x04
    75be:	8b 83       	std	Y+3, r24	; 0x03
	dot_ = (data- _dot)*10;
    75c0:	8b 81       	ldd	r24, Y+3	; 0x03
    75c2:	9c 81       	ldd	r25, Y+4	; 0x04
    75c4:	aa 27       	eor	r26, r26
    75c6:	97 fd       	sbrc	r25, 7
    75c8:	a0 95       	com	r26
    75ca:	ba 2f       	mov	r27, r26
    75cc:	bc 01       	movw	r22, r24
    75ce:	cd 01       	movw	r24, r26
    75d0:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    75d4:	9b 01       	movw	r18, r22
    75d6:	ac 01       	movw	r20, r24
    75d8:	6d 81       	ldd	r22, Y+5	; 0x05
    75da:	7e 81       	ldd	r23, Y+6	; 0x06
    75dc:	8f 81       	ldd	r24, Y+7	; 0x07
    75de:	98 85       	ldd	r25, Y+8	; 0x08
    75e0:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    75e4:	dc 01       	movw	r26, r24
    75e6:	cb 01       	movw	r24, r22
    75e8:	bc 01       	movw	r22, r24
    75ea:	cd 01       	movw	r24, r26
    75ec:	20 e0       	ldi	r18, 0x00	; 0
    75ee:	30 e0       	ldi	r19, 0x00	; 0
    75f0:	40 e2       	ldi	r20, 0x20	; 32
    75f2:	51 e4       	ldi	r21, 0x41	; 65
    75f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    75f8:	dc 01       	movw	r26, r24
    75fa:	cb 01       	movw	r24, r22
    75fc:	bc 01       	movw	r22, r24
    75fe:	cd 01       	movw	r24, r26
    7600:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    7604:	dc 01       	movw	r26, r24
    7606:	cb 01       	movw	r24, r22
    7608:	9a 83       	std	Y+2, r25	; 0x02
    760a:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidIntegerToString(_dot);
    760c:	8b 81       	ldd	r24, Y+3	; 0x03
    760e:	9c 81       	ldd	r25, Y+4	; 0x04
    7610:	0e 94 33 3a 	call	0x7466	; 0x7466 <LCD_VidIntegerToString>
	if(dot_>0)
    7614:	89 81       	ldd	r24, Y+1	; 0x01
    7616:	9a 81       	ldd	r25, Y+2	; 0x02
    7618:	18 16       	cp	r1, r24
    761a:	19 06       	cpc	r1, r25
    761c:	3c f4       	brge	.+14     	; 0x762c <LCD_VidSendFloat+0x9c>
	{
		LCD_VidSendChar('.');
    761e:	8e e2       	ldi	r24, 0x2E	; 46
    7620:	0e 94 58 33 	call	0x66b0	; 0x66b0 <LCD_VidSendChar>
		LCD_VidIntegerToString(dot_);
    7624:	89 81       	ldd	r24, Y+1	; 0x01
    7626:	9a 81       	ldd	r25, Y+2	; 0x02
    7628:	0e 94 33 3a 	call	0x7466	; 0x7466 <LCD_VidIntegerToString>
	else
	{

	}

}
    762c:	28 96       	adiw	r28, 0x08	; 8
    762e:	0f b6       	in	r0, 0x3f	; 63
    7630:	f8 94       	cli
    7632:	de bf       	out	0x3e, r29	; 62
    7634:	0f be       	out	0x3f, r0	; 63
    7636:	cd bf       	out	0x3d, r28	; 61
    7638:	cf 91       	pop	r28
    763a:	df 91       	pop	r29
    763c:	08 95       	ret

0000763e <LCD_VidClearScreen>:
void LCD_VidClearScreen()
{
    763e:	df 93       	push	r29
    7640:	cf 93       	push	r28
    7642:	cd b7       	in	r28, 0x3d	; 61
    7644:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x01);
    7646:	81 e0       	ldi	r24, 0x01	; 1
    7648:	0e 94 a6 2c 	call	0x594c	; 0x594c <LCD_VidSendCommand>
}
    764c:	cf 91       	pop	r28
    764e:	df 91       	pop	r29
    7650:	08 95       	ret

00007652 <LCD_VidDeleteChar>:
void LCD_VidDeleteChar(void)
{
    7652:	df 93       	push	r29
    7654:	cf 93       	push	r28
    7656:	cd b7       	in	r28, 0x3d	; 61
    7658:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(LCD_DECREMENT_CURSOR);
    765a:	84 e0       	ldi	r24, 0x04	; 4
    765c:	0e 94 a6 2c 	call	0x594c	; 0x594c <LCD_VidSendCommand>
	LCD_VidSendChar(SPACEBAR_KEY);
    7660:	80 e2       	ldi	r24, 0x20	; 32
    7662:	0e 94 58 33 	call	0x66b0	; 0x66b0 <LCD_VidSendChar>
	LCD_VidSendCommand(LCD_INCREMENT_CURSOR);
    7666:	86 e0       	ldi	r24, 0x06	; 6
    7668:	0e 94 a6 2c 	call	0x594c	; 0x594c <LCD_VidSendCommand>
	LCD_VidSendChar(SPACEBAR_KEY);
    766c:	80 e2       	ldi	r24, 0x20	; 32
    766e:	0e 94 58 33 	call	0x66b0	; 0x66b0 <LCD_VidSendChar>
	LCD_VidSendCommand(LCD_DECREMENT_CURSOR);
    7672:	84 e0       	ldi	r24, 0x04	; 4
    7674:	0e 94 a6 2c 	call	0x594c	; 0x594c <LCD_VidSendCommand>
	LCD_VidSendChar(SPACEBAR_KEY);
    7678:	80 e2       	ldi	r24, 0x20	; 32
    767a:	0e 94 58 33 	call	0x66b0	; 0x66b0 <LCD_VidSendChar>
	LCD_VidSendCommand(LCD_INCREMENT_CURSOR);
    767e:	86 e0       	ldi	r24, 0x06	; 6
    7680:	0e 94 a6 2c 	call	0x594c	; 0x594c <LCD_VidSendCommand>
}
    7684:	cf 91       	pop	r28
    7686:	df 91       	pop	r29
    7688:	08 95       	ret

0000768a <KPD_VidInit>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include <util/delay.h>

void KPD_VidInit(void)
{
    768a:	df 93       	push	r29
    768c:	cf 93       	push	r28
    768e:	cd b7       	in	r28, 0x3d	; 61
    7690:	de b7       	in	r29, 0x3e	; 62
	//Set Columns as Output
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_0,Output);
    7692:	83 e0       	ldi	r24, 0x03	; 3
    7694:	62 e0       	ldi	r22, 0x02	; 2
    7696:	41 e0       	ldi	r20, 0x01	; 1
    7698:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_1,Output);
    769c:	83 e0       	ldi	r24, 0x03	; 3
    769e:	63 e0       	ldi	r22, 0x03	; 3
    76a0:	41 e0       	ldi	r20, 0x01	; 1
    76a2:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_2,Output);
    76a6:	83 e0       	ldi	r24, 0x03	; 3
    76a8:	64 e0       	ldi	r22, 0x04	; 4
    76aa:	41 e0       	ldi	r20, 0x01	; 1
    76ac:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_3,Output);
    76b0:	83 e0       	ldi	r24, 0x03	; 3
    76b2:	66 e0       	ldi	r22, 0x06	; 6
    76b4:	41 e0       	ldi	r20, 0x01	; 1
    76b6:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
	//Set Columns as PinHigh
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_0,PinHigh);
    76ba:	83 e0       	ldi	r24, 0x03	; 3
    76bc:	62 e0       	ldi	r22, 0x02	; 2
    76be:	41 e0       	ldi	r20, 0x01	; 1
    76c0:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_1,PinHigh);
    76c4:	83 e0       	ldi	r24, 0x03	; 3
    76c6:	63 e0       	ldi	r22, 0x03	; 3
    76c8:	41 e0       	ldi	r20, 0x01	; 1
    76ca:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_2,PinHigh);
    76ce:	83 e0       	ldi	r24, 0x03	; 3
    76d0:	64 e0       	ldi	r22, 0x04	; 4
    76d2:	41 e0       	ldi	r20, 0x01	; 1
    76d4:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_3,PinHigh);
    76d8:	83 e0       	ldi	r24, 0x03	; 3
    76da:	66 e0       	ldi	r22, 0x06	; 6
    76dc:	41 e0       	ldi	r20, 0x01	; 1
    76de:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>

	//Set Row as Input
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_0,Input);
    76e2:	81 e0       	ldi	r24, 0x01	; 1
    76e4:	64 e0       	ldi	r22, 0x04	; 4
    76e6:	40 e0       	ldi	r20, 0x00	; 0
    76e8:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_1,Input);
    76ec:	81 e0       	ldi	r24, 0x01	; 1
    76ee:	65 e0       	ldi	r22, 0x05	; 5
    76f0:	40 e0       	ldi	r20, 0x00	; 0
    76f2:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_2,Input);
    76f6:	81 e0       	ldi	r24, 0x01	; 1
    76f8:	66 e0       	ldi	r22, 0x06	; 6
    76fa:	40 e0       	ldi	r20, 0x00	; 0
    76fc:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_3,Input);
    7700:	81 e0       	ldi	r24, 0x01	; 1
    7702:	67 e0       	ldi	r22, 0x07	; 7
    7704:	40 e0       	ldi	r20, 0x00	; 0
    7706:	0e 94 00 29 	call	0x5200	; 0x5200 <DIO_VidSetPinDirection>
	//Set Row as PinHigh
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_0,PinHigh);
    770a:	81 e0       	ldi	r24, 0x01	; 1
    770c:	64 e0       	ldi	r22, 0x04	; 4
    770e:	41 e0       	ldi	r20, 0x01	; 1
    7710:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_1,PinHigh);
    7714:	81 e0       	ldi	r24, 0x01	; 1
    7716:	65 e0       	ldi	r22, 0x05	; 5
    7718:	41 e0       	ldi	r20, 0x01	; 1
    771a:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_2,PinHigh);
    771e:	81 e0       	ldi	r24, 0x01	; 1
    7720:	66 e0       	ldi	r22, 0x06	; 6
    7722:	41 e0       	ldi	r20, 0x01	; 1
    7724:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_3,PinHigh);
    7728:	81 e0       	ldi	r24, 0x01	; 1
    772a:	67 e0       	ldi	r22, 0x07	; 7
    772c:	41 e0       	ldi	r20, 0x01	; 1
    772e:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>



}
    7732:	cf 91       	pop	r28
    7734:	df 91       	pop	r29
    7736:	08 95       	ret

00007738 <Kpd_U8GetPressedKey>:
u8 Kpd_U8GetPressedKey(void)
{
    7738:	df 93       	push	r29
    773a:	cf 93       	push	r28
    773c:	00 d0       	rcall	.+0      	; 0x773e <Kpd_U8GetPressedKey+0x6>
    773e:	00 d0       	rcall	.+0      	; 0x7740 <Kpd_U8GetPressedKey+0x8>
    7740:	cd b7       	in	r28, 0x3d	; 61
    7742:	de b7       	in	r29, 0x3e	; 62
	/*************value if button was not pressed******************/
	u8 Local_u8_Pressed_Key=KPD_NO_PRESSED_KEY;
    7744:	8f ef       	ldi	r24, 0xFF	; 255
    7746:	8b 83       	std	Y+3, r24	; 0x03
	/*******************KEY_ROWS_Array******************************/
   static  u8 Local_u8_Kpd_Rows_Array[ROW_NUM]={KPD_ROW_0,KPD_ROW_1,KPD_ROW_2,KPD_ROW_3};



	for(Local_u8_Column_Counter=0;Local_u8_Column_Counter<COLUMN_NUM;Local_u8_Column_Counter++)
    7748:	1a 82       	std	Y+2, r1	; 0x02
    774a:	5f c0       	rjmp	.+190    	; 0x780a <Kpd_U8GetPressedKey+0xd2>
	{
		/**************ACTIVATE CURRENT COLUMN************************/

		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinLow);
    774c:	8a 81       	ldd	r24, Y+2	; 0x02
    774e:	88 2f       	mov	r24, r24
    7750:	90 e0       	ldi	r25, 0x00	; 0
    7752:	fc 01       	movw	r30, r24
    7754:	e4 5c       	subi	r30, 0xC4	; 196
    7756:	fc 4f       	sbci	r31, 0xFC	; 252
    7758:	90 81       	ld	r25, Z
    775a:	83 e0       	ldi	r24, 0x03	; 3
    775c:	69 2f       	mov	r22, r25
    775e:	40 e0       	ldi	r20, 0x00	; 0
    7760:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>

		/*************READ CURRENT ROW****************/
		for(Local_u8_Row_Counter=0;Local_u8_Row_Counter<ROW_NUM;Local_u8_Row_Counter++)
    7764:	19 82       	std	Y+1, r1	; 0x01
    7766:	3e c0       	rjmp	.+124    	; 0x77e4 <Kpd_U8GetPressedKey+0xac>
		{
			/*****CHECK IF KEY IS PREESED*******/

			if(PinLow == DIO_VidGetPinValue(KPD_PORT_Row,Local_u8_Kpd_Rows_Array[Local_u8_Row_Counter]))
    7768:	89 81       	ldd	r24, Y+1	; 0x01
    776a:	88 2f       	mov	r24, r24
    776c:	90 e0       	ldi	r25, 0x00	; 0
    776e:	fc 01       	movw	r30, r24
    7770:	e8 5c       	subi	r30, 0xC8	; 200
    7772:	fc 4f       	sbci	r31, 0xFC	; 252
    7774:	90 81       	ld	r25, Z
    7776:	81 e0       	ldi	r24, 0x01	; 1
    7778:	69 2f       	mov	r22, r25
    777a:	0e 94 00 2b 	call	0x5600	; 0x5600 <DIO_VidGetPinValue>
    777e:	88 23       	and	r24, r24
    7780:	71 f5       	brne	.+92     	; 0x77de <Kpd_U8GetPressedKey+0xa6>
			{
				Local_u8_Pressed_Key=Local_u8_Kpd_Arr[Local_u8_Row_Counter][Local_u8_Column_Counter];
    7782:	89 81       	ldd	r24, Y+1	; 0x01
    7784:	48 2f       	mov	r20, r24
    7786:	50 e0       	ldi	r21, 0x00	; 0
    7788:	8a 81       	ldd	r24, Y+2	; 0x02
    778a:	28 2f       	mov	r18, r24
    778c:	30 e0       	ldi	r19, 0x00	; 0
    778e:	ca 01       	movw	r24, r20
    7790:	88 0f       	add	r24, r24
    7792:	99 1f       	adc	r25, r25
    7794:	88 0f       	add	r24, r24
    7796:	99 1f       	adc	r25, r25
    7798:	82 0f       	add	r24, r18
    779a:	93 1f       	adc	r25, r19
    779c:	fc 01       	movw	r30, r24
    779e:	e0 5c       	subi	r30, 0xC0	; 192
    77a0:	fc 4f       	sbci	r31, 0xFC	; 252
    77a2:	80 81       	ld	r24, Z
    77a4:	8b 83       	std	Y+3, r24	; 0x03

				while(PinLow == DIO_VidGetPinValue(KPD_PORT_Row,Local_u8_Kpd_Rows_Array[Local_u8_Row_Counter]))
    77a6:	89 81       	ldd	r24, Y+1	; 0x01
    77a8:	88 2f       	mov	r24, r24
    77aa:	90 e0       	ldi	r25, 0x00	; 0
    77ac:	fc 01       	movw	r30, r24
    77ae:	e8 5c       	subi	r30, 0xC8	; 200
    77b0:	fc 4f       	sbci	r31, 0xFC	; 252
    77b2:	90 81       	ld	r25, Z
    77b4:	81 e0       	ldi	r24, 0x01	; 1
    77b6:	69 2f       	mov	r22, r25
    77b8:	0e 94 00 2b 	call	0x5600	; 0x5600 <DIO_VidGetPinValue>
    77bc:	88 23       	and	r24, r24
    77be:	99 f3       	breq	.-26     	; 0x77a6 <Kpd_U8GetPressedKey+0x6e>
					;
				/*******DEACTIVATE CURRENT COLUMN***********/
				DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinHigh);
    77c0:	8a 81       	ldd	r24, Y+2	; 0x02
    77c2:	88 2f       	mov	r24, r24
    77c4:	90 e0       	ldi	r25, 0x00	; 0
    77c6:	fc 01       	movw	r30, r24
    77c8:	e4 5c       	subi	r30, 0xC4	; 196
    77ca:	fc 4f       	sbci	r31, 0xFC	; 252
    77cc:	90 81       	ld	r25, Z
    77ce:	83 e0       	ldi	r24, 0x03	; 3
    77d0:	69 2f       	mov	r22, r25
    77d2:	41 e0       	ldi	r20, 0x01	; 1
    77d4:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
				return Local_u8_Pressed_Key;
    77d8:	8b 81       	ldd	r24, Y+3	; 0x03
    77da:	8c 83       	std	Y+4, r24	; 0x04
    77dc:	1c c0       	rjmp	.+56     	; 0x7816 <Kpd_U8GetPressedKey+0xde>
		/**************ACTIVATE CURRENT COLUMN************************/

		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinLow);

		/*************READ CURRENT ROW****************/
		for(Local_u8_Row_Counter=0;Local_u8_Row_Counter<ROW_NUM;Local_u8_Row_Counter++)
    77de:	89 81       	ldd	r24, Y+1	; 0x01
    77e0:	8f 5f       	subi	r24, 0xFF	; 255
    77e2:	89 83       	std	Y+1, r24	; 0x01
    77e4:	89 81       	ldd	r24, Y+1	; 0x01
    77e6:	84 30       	cpi	r24, 0x04	; 4
    77e8:	08 f4       	brcc	.+2      	; 0x77ec <Kpd_U8GetPressedKey+0xb4>
    77ea:	be cf       	rjmp	.-132    	; 0x7768 <Kpd_U8GetPressedKey+0x30>
				DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinHigh);
				return Local_u8_Pressed_Key;
			}
		}
		/*******DEACTIVATE CURRENT COLUMN***********/
		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinHigh);
    77ec:	8a 81       	ldd	r24, Y+2	; 0x02
    77ee:	88 2f       	mov	r24, r24
    77f0:	90 e0       	ldi	r25, 0x00	; 0
    77f2:	fc 01       	movw	r30, r24
    77f4:	e4 5c       	subi	r30, 0xC4	; 196
    77f6:	fc 4f       	sbci	r31, 0xFC	; 252
    77f8:	90 81       	ld	r25, Z
    77fa:	83 e0       	ldi	r24, 0x03	; 3
    77fc:	69 2f       	mov	r22, r25
    77fe:	41 e0       	ldi	r20, 0x01	; 1
    7800:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_VidSetPinValue>
	/*******************KEY_ROWS_Array******************************/
   static  u8 Local_u8_Kpd_Rows_Array[ROW_NUM]={KPD_ROW_0,KPD_ROW_1,KPD_ROW_2,KPD_ROW_3};



	for(Local_u8_Column_Counter=0;Local_u8_Column_Counter<COLUMN_NUM;Local_u8_Column_Counter++)
    7804:	8a 81       	ldd	r24, Y+2	; 0x02
    7806:	8f 5f       	subi	r24, 0xFF	; 255
    7808:	8a 83       	std	Y+2, r24	; 0x02
    780a:	8a 81       	ldd	r24, Y+2	; 0x02
    780c:	84 30       	cpi	r24, 0x04	; 4
    780e:	08 f4       	brcc	.+2      	; 0x7812 <Kpd_U8GetPressedKey+0xda>
    7810:	9d cf       	rjmp	.-198    	; 0x774c <Kpd_U8GetPressedKey+0x14>
		/*******DEACTIVATE CURRENT COLUMN***********/
		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinHigh);

	}

	return Local_u8_Pressed_Key;
    7812:	8b 81       	ldd	r24, Y+3	; 0x03
    7814:	8c 83       	std	Y+4, r24	; 0x04
    7816:	8c 81       	ldd	r24, Y+4	; 0x04
}
    7818:	0f 90       	pop	r0
    781a:	0f 90       	pop	r0
    781c:	0f 90       	pop	r0
    781e:	0f 90       	pop	r0
    7820:	cf 91       	pop	r28
    7822:	df 91       	pop	r29
    7824:	08 95       	ret

00007826 <__prologue_saves__>:
    7826:	2f 92       	push	r2
    7828:	3f 92       	push	r3
    782a:	4f 92       	push	r4
    782c:	5f 92       	push	r5
    782e:	6f 92       	push	r6
    7830:	7f 92       	push	r7
    7832:	8f 92       	push	r8
    7834:	9f 92       	push	r9
    7836:	af 92       	push	r10
    7838:	bf 92       	push	r11
    783a:	cf 92       	push	r12
    783c:	df 92       	push	r13
    783e:	ef 92       	push	r14
    7840:	ff 92       	push	r15
    7842:	0f 93       	push	r16
    7844:	1f 93       	push	r17
    7846:	cf 93       	push	r28
    7848:	df 93       	push	r29
    784a:	cd b7       	in	r28, 0x3d	; 61
    784c:	de b7       	in	r29, 0x3e	; 62
    784e:	ca 1b       	sub	r28, r26
    7850:	db 0b       	sbc	r29, r27
    7852:	0f b6       	in	r0, 0x3f	; 63
    7854:	f8 94       	cli
    7856:	de bf       	out	0x3e, r29	; 62
    7858:	0f be       	out	0x3f, r0	; 63
    785a:	cd bf       	out	0x3d, r28	; 61
    785c:	09 94       	ijmp

0000785e <__epilogue_restores__>:
    785e:	2a 88       	ldd	r2, Y+18	; 0x12
    7860:	39 88       	ldd	r3, Y+17	; 0x11
    7862:	48 88       	ldd	r4, Y+16	; 0x10
    7864:	5f 84       	ldd	r5, Y+15	; 0x0f
    7866:	6e 84       	ldd	r6, Y+14	; 0x0e
    7868:	7d 84       	ldd	r7, Y+13	; 0x0d
    786a:	8c 84       	ldd	r8, Y+12	; 0x0c
    786c:	9b 84       	ldd	r9, Y+11	; 0x0b
    786e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7870:	b9 84       	ldd	r11, Y+9	; 0x09
    7872:	c8 84       	ldd	r12, Y+8	; 0x08
    7874:	df 80       	ldd	r13, Y+7	; 0x07
    7876:	ee 80       	ldd	r14, Y+6	; 0x06
    7878:	fd 80       	ldd	r15, Y+5	; 0x05
    787a:	0c 81       	ldd	r16, Y+4	; 0x04
    787c:	1b 81       	ldd	r17, Y+3	; 0x03
    787e:	aa 81       	ldd	r26, Y+2	; 0x02
    7880:	b9 81       	ldd	r27, Y+1	; 0x01
    7882:	ce 0f       	add	r28, r30
    7884:	d1 1d       	adc	r29, r1
    7886:	0f b6       	in	r0, 0x3f	; 63
    7888:	f8 94       	cli
    788a:	de bf       	out	0x3e, r29	; 62
    788c:	0f be       	out	0x3f, r0	; 63
    788e:	cd bf       	out	0x3d, r28	; 61
    7890:	ed 01       	movw	r28, r26
    7892:	08 95       	ret

00007894 <itoa>:
    7894:	fb 01       	movw	r30, r22
    7896:	9f 01       	movw	r18, r30
    7898:	e8 94       	clt
    789a:	42 30       	cpi	r20, 0x02	; 2
    789c:	c4 f0       	brlt	.+48     	; 0x78ce <itoa+0x3a>
    789e:	45 32       	cpi	r20, 0x25	; 37
    78a0:	b4 f4       	brge	.+44     	; 0x78ce <itoa+0x3a>
    78a2:	4a 30       	cpi	r20, 0x0A	; 10
    78a4:	29 f4       	brne	.+10     	; 0x78b0 <itoa+0x1c>
    78a6:	97 fb       	bst	r25, 7
    78a8:	1e f4       	brtc	.+6      	; 0x78b0 <itoa+0x1c>
    78aa:	90 95       	com	r25
    78ac:	81 95       	neg	r24
    78ae:	9f 4f       	sbci	r25, 0xFF	; 255
    78b0:	64 2f       	mov	r22, r20
    78b2:	77 27       	eor	r23, r23
    78b4:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <__udivmodhi4>
    78b8:	80 5d       	subi	r24, 0xD0	; 208
    78ba:	8a 33       	cpi	r24, 0x3A	; 58
    78bc:	0c f0       	brlt	.+2      	; 0x78c0 <itoa+0x2c>
    78be:	89 5d       	subi	r24, 0xD9	; 217
    78c0:	81 93       	st	Z+, r24
    78c2:	cb 01       	movw	r24, r22
    78c4:	00 97       	sbiw	r24, 0x00	; 0
    78c6:	a1 f7       	brne	.-24     	; 0x78b0 <itoa+0x1c>
    78c8:	16 f4       	brtc	.+4      	; 0x78ce <itoa+0x3a>
    78ca:	5d e2       	ldi	r21, 0x2D	; 45
    78cc:	51 93       	st	Z+, r21
    78ce:	10 82       	st	Z, r1
    78d0:	c9 01       	movw	r24, r18
    78d2:	0c 94 6b 3c 	jmp	0x78d6	; 0x78d6 <strrev>

000078d6 <strrev>:
    78d6:	dc 01       	movw	r26, r24
    78d8:	fc 01       	movw	r30, r24
    78da:	67 2f       	mov	r22, r23
    78dc:	71 91       	ld	r23, Z+
    78de:	77 23       	and	r23, r23
    78e0:	e1 f7       	brne	.-8      	; 0x78da <strrev+0x4>
    78e2:	32 97       	sbiw	r30, 0x02	; 2
    78e4:	04 c0       	rjmp	.+8      	; 0x78ee <strrev+0x18>
    78e6:	7c 91       	ld	r23, X
    78e8:	6d 93       	st	X+, r22
    78ea:	70 83       	st	Z, r23
    78ec:	62 91       	ld	r22, -Z
    78ee:	ae 17       	cp	r26, r30
    78f0:	bf 07       	cpc	r27, r31
    78f2:	c8 f3       	brcs	.-14     	; 0x78e6 <strrev+0x10>
    78f4:	08 95       	ret

000078f6 <__udivmodhi4>:
    78f6:	aa 1b       	sub	r26, r26
    78f8:	bb 1b       	sub	r27, r27
    78fa:	51 e1       	ldi	r21, 0x11	; 17
    78fc:	07 c0       	rjmp	.+14     	; 0x790c <__udivmodhi4_ep>

000078fe <__udivmodhi4_loop>:
    78fe:	aa 1f       	adc	r26, r26
    7900:	bb 1f       	adc	r27, r27
    7902:	a6 17       	cp	r26, r22
    7904:	b7 07       	cpc	r27, r23
    7906:	10 f0       	brcs	.+4      	; 0x790c <__udivmodhi4_ep>
    7908:	a6 1b       	sub	r26, r22
    790a:	b7 0b       	sbc	r27, r23

0000790c <__udivmodhi4_ep>:
    790c:	88 1f       	adc	r24, r24
    790e:	99 1f       	adc	r25, r25
    7910:	5a 95       	dec	r21
    7912:	a9 f7       	brne	.-22     	; 0x78fe <__udivmodhi4_loop>
    7914:	80 95       	com	r24
    7916:	90 95       	com	r25
    7918:	bc 01       	movw	r22, r24
    791a:	cd 01       	movw	r24, r26
    791c:	08 95       	ret

0000791e <_exit>:
    791e:	f8 94       	cli

00007920 <__stop_program>:
    7920:	ff cf       	rjmp	.-2      	; 0x7920 <__stop_program>
